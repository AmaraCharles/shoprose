var apoProductDefault = "default";
(ap_loadScript = function (t, i) {
  var e = document.createElement("script");
  (e.type = "text/javascript"),
    e.readyState
      ? (e.onreadystatechange = function () {
        ("loaded" != e.readyState && "complete" != e.readyState) ||
          ((e.onreadystatechange = null), i());
      })
      : (e.onload = function () {
        i();
      }),
    (e.src = t),
    document.getElementsByTagName("head")[0].appendChild(e);
}),
  (ap_addOptions = async function ($, customizeryConfig) {
    if (window.apo_js_loaded.options) return;
    window.apo_js_loaded.options = true;
    window.ap_front_settings.config.is_clone_bt_addcart = true;
    var money_format =
      window.ap_front_settings && window.ap_front_settings.money_format
        ? window.ap_front_settings.money_format
        : "${{amount}}";

    let isCssV3 = false;
    const OPTION_URL = {
      group: "group_product",
      only: "only_url",
      allowed: "allowed_open_url",
    };
    const OPTION_URL_DISPLAY = {
      value: "click_value",
      view: "click_view",
    };
    // Add setting: show watermark
    var isShowWatermarkOnProductPage =
      customizeryConfig.show_watermark_on_product_page;
    var shop_id = window.ap_front_settings?.shop_id;
    var totalPriceAdd = 0;
    var container_AP_POptions = "avpoptions-container__v2";
    let isCustom149 =
      window.ap_front_settings?.product_info?.product_id === "8121233309931" &&
      (shop_id === "61530898667" || shop_id === "67691053329");

    let isThemeProperty = shop_id === "84988035369";
    let isNotUseAvisHidden = false;// shop_id === "77859357001";

    var joinAddCharge = window.ap_front_settings.joinAddCharge;
    if (shop_id === "59437023322") {
      joinAddCharge = "||";
    }

    (window.AP_POptions = window.AP_POptions || {}), (AP_POptions.$ = $);
    function getEventData(e, t) {
      return e._data
        ? e._data(t, "events")
        : e.data
          ? e.data(t, "events")
          : null;
    }
    var pluginAction = {
      getProduct: (t) =>
        new Promise((o, n) => {
          let rootUrl = "/";
          if (shop_id === "72799093070") {
            rootUrl = "/pt/";
          }
          o(
            fetch(
              rootUrl + `products/${t}.js`, { method: "GET" }
            )
              .then((t) => {
                if (t.status == "200") return t.json();
                else null;
              })
              .then((t) => t)
          );
        }),
      getColecByPrId: async function (productId) {
        const fetchOptions = {
          method: "GET",
          headers: {
            "shop-id": shop_id,
          },
        };
        return new Promise((n, o) => {
          n(
            fetch(
              `${priceMod.avisUrl}product/collections?id=${productId}`,
              fetchOptions
            )
              .then((t) => {
                return t.json();
              })
              .then((t) => t)
          );
        });
      },
    };

    var key_variant_conditional = "avis_shopify_option";
    var formProductGenOptionJs = {};
    var selectedVariantIdAll = {};

    var conditionalLogicInstances = { default: "" };
    function handleChangeShopifyVariant(
      elemOptionAvisContainer,
      productId,
      productInfo
    ) {
      const observer = new MutationObserver(function () {
        if (shop_id === "60370419756") {
          if (window?.ap_front_settings?.page_type === "product" && !document.querySelector(".avpoptions-container__v2")) {
            mainCheckAllRules();
          }
        }
        conditionalLogicInstances[productId]?.s_check_input_variant(
          elemOptionAvisContainer,
          productId,
          productInfo
        );
      });
      const config = { subtree: true, childList: true };
      observer.observe(document, config);

      if (shop_id === "14252734" || shop_id === "57017368679") {
        setInterval(function () {
          let watchingVariant = conditionalLogicInstances[productId].watching[key_variant_conditional];
          if (!watchingVariant) return;

          let variants = productInfo.variants;
          let variantId = variants[0].id.toString();
          let formData = new FormData(formProductGenOptionJs[productId]);
          if (formData && formData.get("id")) variantId = formData.get("id");
          else {
            const searchParams = new URLSearchParams(window.location.search);
            if (searchParams?.get("variant")) {
              variantId = searchParams?.get("variant");
            }
          }

          let oldVariantId = selectedVariantIdAll[productId];
          if (oldVariantId !== variantId) {
            conditionalLogicInstances[productId]?.s_check_input_variant(
              elemOptionAvisContainer,
              productId,
              productInfo
            );
          }
        }, 300);
      }
    }
    // 1. Check rules options
    var customizeryRules = new (function () {
      var e = this;
      return (
        (e.getHandleFromUrl = function (e) {
          var t = e.replace(/\/$/, "").split("/");
          return (
            ("products" == t[t.length - 2] || "products_preview" === t.pop()) &&
            t[t.length - 1].replace(/(.*)?\?.*$/, "$1")
          );
        }),
        (e.getProduct = function (t, n) {
          if (t instanceof Object) return n(t);
          var i = e.getProductFromWindow();
          i ? n(i) : t ? e.pullProduct(t, n) : n(!1);
        }),
        (e.getProductFromWindow = function () {
          return window.ap_front_settings &&
            window.ap_front_settings.product_info.product instanceof Object
            ? window.ap_front_settings.product_info.product
            : undefined;
        }),
        (e.pullProduct = function (e, t) {
          return window.IS_AP_POptions
            ? void $.getJSON(
              "//" +
              window.shopConfiguration.uuid +
              ".myshopify.com/products/" +
              e +
              ".json",
              function (e) {
                t(e.product);
              }
            )
            : void $.ajax({
              dataType: "json",
              cache: !1,
              url: "/products/" + e + ".json",
              success: function (e) {
                t(e.product);
              },
              error: function (e) {
                throw "AvisPlus Options product lookup error";
              },
            });
        }),
        (e.checkRuleForProduct = function (ruleSetItem, product) {
          let t = ruleSetItem;
          let n = product;
          switch (
          ((t.selector = String(t.selector).toLowerCase().trim()), t.type)
          ) {
            case "all":
              return !0;
            case "product_handle":
              return n.handle.toLowerCase().trim() === t.selector;
            case "product_url":
              var i = t.selector;
              return n.handle.toLowerCase().trim() === e.getHandleFromUrl(i);
            case "tag":
              return "string" == typeof n.tags
                ? ((n.tags = n.tags.toLowerCase()),
                  n.tags.indexOf(", ") >= 0
                    ? n.tags.split(", ").indexOf(t.selector) >= 0
                    : n.tags === t.selector)
                : ((n.tags = n.tags.join(",").toLowerCase().split(",")),
                  n.tags.indexOf(t.selector) >= 0);
            case "vendor":
              return n.vendor.toLowerCase().trim() === t.selector;
            case "type":
              if (n.type) return n.type.toLowerCase().trim() === t.selector;
              if (n.product_type)
                return n.product_type.toLowerCase().trim() === t.selector;
          }
        }),
        (e.checkConditionsForProduct = function (type, conditions, product) {
          switch (type) {
            case "all":
              let index = 0;
              for (let condition of conditions) {
                if (!e.checkConditionItemForProduct(condition, product)) break;
                index = index + 1;
              }

              return index == conditions.length;

            case "any":
              for (let condition of conditions) {
                if (e.checkConditionItemForProduct(condition, product))
                  return true;
              }
              return false;

            default:
              return false;
          }
        }),
        (e.checkConditionItemForProduct = function (condition, product) {
          if (!condition["type"] || !condition["selector"]) return false;

          let filter = String(condition.selector).toLowerCase().trim();
          let keywordCompareType = condition["keywordCompareType"];
          let data = null;

          switch (condition.type) {
            case "title":
              return e.compareKeyConditionItemForProduct(
                keywordCompareType,
                filter,
                product.title
              );

            case "type":
              if (product["type"]) data = product.type;
              else if (product["product_type"]) data = product.product_type;

              return e.compareKeyConditionItemForProduct(
                keywordCompareType,
                filter,
                data
              );

            case "vendor":
              return e.compareKeyConditionItemForProduct(
                keywordCompareType,
                filter,
                product["vendor"]
              );
            case "tag":
              return e.compareKeyConditionItemForProductTag(
                keywordCompareType,
                filter,
                product.tags
              );

            // console.log("product.tags 2", product.tags);
            case "price":
              return e.compareKeyConditionItemForProduct(
                keywordCompareType,
                parseFloat(filter) * 100,
                product["price"]
              );

            case "collection":
              let collectionsOfProduct = product.collections;
              if (collectionsOfProduct.length == 0) return false;

              if (keywordCompareType == "is_equal_to") {
                return (
                  collectionsOfProduct.filter(
                    (e) => e.title && String(e.title).toLowerCase() == filter
                  ).length > 0
                );
              }

              return false;
          }

          return false;
        }),
        (e.compareKeyConditionItemForProductTag = function (
          keywordCompareType,
          filter,
          data
        ) {
          if (!keywordCompareType) return false;
          switch (keywordCompareType) {
            case "is_equal_to":
              return "string" == typeof data
                ? ((data = data.toLowerCase()),
                  data.indexOf(", ") >= 0
                    ? data.split(", ").indexOf(filter) >= 0
                    : data === filter)
                : ((data = data.join(",").toLowerCase().split(",")),
                  data.indexOf(filter) >= 0);

            case "is_not_equal_to":
              return "string" == typeof data
                ? ((data = data.toLowerCase()),
                  data.indexOf(", ") >= 0
                    ? data.split(", ").indexOf(filter) == -1
                    : data === filter)
                : ((data = data.join(",").toLowerCase().split(",")),
                  data.indexOf(filter) == -1);
            case "contains":
              if ("string" == typeof data) data = data.toLowerCase();
              else data = data.join(", ").toLowerCase();

              return data.split(", ").find(x => x.indexOf(filter) > -1);
            // return "string" == typeof data
            //   ? ((data = data.toLowerCase()),
            //     data.indexOf(", ") >= 0
            //       ? data.split(", ").indexOf(filter) >= 0
            //       : data === filter)
            //   : ((data = data.join(",").toLowerCase().split(",")),
            //     data.some((item) =>
            //       filter.split("").some((char) => item.includes(char))
            //     ));
            case "does_not_contain":
              if ("string" == typeof data) data = data.toLowerCase();
              else data = data.join(", ").toLowerCase();

              return data.split(", ").find(x => x.indexOf(filter) > -1) === undefined;
            // return "string" == typeof data
            //   ? ((data = data.toLowerCase()),
            //     data.indexOf(", ") >= 0
            //       ? data.split(", ").indexOf(filter) == -1
            //       : data === filter)
            //   : ((data = data.join(",").toLowerCase().split(",")),
            //     data.every((item) => !item.includes(filter)));

            case "starts_with":
              return "string" == typeof data
                ? ((data = data.toLowerCase()),
                  data.indexOf(", ") >= 0
                    ? data.split(", ").some((item) => item.startsWith(filter))
                    : data === filter)
                : ((data = data.join(",").toLowerCase().split(",")),
                  data.some((item) => item.startsWith(filter)));
            case "ends_with":
              return "string" == typeof data
                ? ((data = data.toLowerCase()),
                  data.indexOf(", ") >= 0
                    ? data.split(", ").some((item) => item.endsWith(filter))
                    : data === filter)
                : ((data = data.join(",").toLowerCase().split(",")),
                  data.some((item) => item.endsWith(filter)));
            default:
              return false;
          }
        }),
        (e.compareKeyConditionItemForProduct = function (
          keywordCompareType,
          filter,
          data
        ) {
          if (!keywordCompareType) return false;

          if (data && "string" == typeof data) data = data.toLowerCase().trim();

          switch (keywordCompareType) {
            case "is_equal_to":
              return filter == data;

            case "is_not_equal_to":
              return filter != data;

            case "starts_with":
              return data.startsWith(filter);

            case "ends_with":
              return data.endsWith(filter);

            case "does_not_contain":
              return data && data.indexOf(filter) == -1;

            case "contains":
              return data && data.indexOf(filter) >= 0;

            case "is_greater_than":
              return parseFloat(filter) < parseFloat(data);

            case "is_less_than":
              return parseFloat(filter) > parseFloat(data);

            default:
              return false;
          }
        }),
        (e.checkRuleSetForProduct = function (t, n) {
          var i = !1;
          return (
            $.each(t, function (t, o) {
              if (o && o.selector && o.type && e.checkRuleForProduct(o, n))
                return (i = !0), !1;
            }),
            i
          );
        }),
        (e.checkAllRules = function (
          optionSetsConfig,
          optionSetsKey,
          productInfo,
          renderOptions
        ) {
          // t: customizeryConfig, n: optionSets, o: function add options
          return optionSetsConfig[optionSetsKey] &&
            optionSetsConfig[optionSetsKey].length
            ? (productInfo ||
              (productInfo = e.getHandleFromUrl(location.pathname)), // If dont't product, get handle product by url
              void e.getProduct(productInfo, async function (productInfo) {
                let optionSets = customizeryConfig["optionSets"];
                let checkExistCollection = optionSets?.find(
                  (x) =>
                    x.type === "automated" &&
                    x?.conditional_applying_product?.conditions &&
                    x.conditional_applying_product.conditions.find(
                      (y) => y.type === "collection" && y.selector
                    )
                );
                // Get collections
                if (productInfo?.id && checkExistCollection) {
                  if (window?.ap_front_settings?.page_type === "product") {
                    productInfo["collections"] =
                      window?.ap_front_settings?.product_info?.collections;
                  } else {
                    let collections = await pluginAction.getColecByPrId(
                      productInfo?.id
                    );
                    productInfo["collections"] = collections?.data;
                  }
                }

                return productInfo
                  ? void renderOptions(
                    optionSetsConfig[optionSetsKey].filter(function (
                      optionSet
                    ) {
                      if (
                        (window.ap_front_settings.config &&
                          window.ap_front_settings.config.app_v &&
                          window.ap_front_settings.config.app_v.indexOf(
                            "v2"
                          ) > -1) ||
                        (optionSetsConfig["app_v"] &&
                          optionSetsConfig["app_v"].indexOf("v2") > -1)
                      ) {
                        if (!optionSet.type) return false;
                        switch (optionSet.type) {
                          case "all":
                            return true;

                          case "manual":
                            if (
                              !optionSet["products"] ||
                              optionSet.products.length == 0
                            ) {
                              return false;
                            } else {
                              return optionSet.products.includes(
                                String(productInfo.id)
                              );
                            }

                          case "automated":
                            if (
                              !optionSet["conditional_applying_product"] ||
                              !optionSet.conditional_applying_product[
                              "type"
                              ] ||
                              !optionSet.conditional_applying_product[
                              "conditions"
                              ]
                            )
                              return false;

                            return e.checkConditionsForProduct(
                              optionSet.conditional_applying_product.type,
                              optionSet.conditional_applying_product
                                .conditions,
                              productInfo
                            );

                          default:
                            return false;
                        }
                      } else {
                        if (
                          !optionSet.rule_sets ||
                          !optionSet.rule_sets.length
                        )
                          return false;
                        if (optionSet.all_products) return true;
                        var ruleSets = optionSet.rule_sets.filter(function (
                          ruleSet
                        ) {
                          return e.checkRuleSetForProduct(
                            ruleSet,
                            productInfo
                          );
                        });
                        return ruleSets.length === optionSet.rule_sets.length;
                      }
                    }),
                    productInfo
                  )
                  : renderOptions(null);
              }))
            : renderOptions(null);
        }),
        e
      );
    })();
    // 2. Init option for product page
    var priceModAll = {};
    function getAllProperties(productId) {
      let avisAddCartFormActive = formProductGenOptionJs[productId];

      let formData = new FormData(avisAddCartFormActive);
      let properties = [];
      formData.forEach((value, key) => {
        if (key.indexOf("properties") > -1) {
          let property = key.replace("properties[", "").replace("]", "");
          properties.push({ key: property, value: value });
        }
      });

      priceModAll[productId]["properties"] = properties;

      if (shop_id === "69043421407") {
        let listOptionSelector = document.querySelector(".list-avis-options");
        if (!listOptionSelector) {
          let totalAddCharge = document.querySelector(".apo-total-addcharge");
          if (totalAddCharge) {
            listOptionSelector = document.createElement("div");
            listOptionSelector.classList.add("list-avis-options");
            listOptionSelector.setAttribute("style", "display:none !important");
            totalAddCharge.parentNode.insertBefore(listOptionSelector, totalAddCharge);
          }
        }
        if (listOptionSelector) {
          let itemOptionSelectors = listOptionSelector.querySelectorAll(".avis-option-properties");
          let prevOption = null;
          let isHasPro = false;
          for (let itemProperty of properties) {
            isHasPro = true;
            let propertySelector = listOptionSelector.querySelector(`.avis-option-properties[data-key='${itemProperty.key}']`);
            if (propertySelector) {
              if (propertySelector.getAttribute("data-value") !== itemProperty.value) {
                propertySelector.innerHTML = `<span class="option-key">${itemProperty.key}:</span><span class="option-value">${itemProperty.value}</span>`;
                propertySelector.setAttribute("data-value", itemProperty.value);
              }
            }
            else {
              propertySelector = document.createElement("div");
              propertySelector.classList.add("avis-option-properties");
              propertySelector.setAttribute("data-key", itemProperty.key);
              propertySelector.setAttribute("data-value", itemProperty.value);
              propertySelector.innerHTML = `<span class="option-key">${itemProperty.key}:</span><span class="option-value">${itemProperty.value}</span>`;

              if (prevOption) {
                prevOption.parentNode.insertBefore(propertySelector, prevOption.nextSibling);
              }
              else {
                listOptionSelector.prepend(propertySelector);
              }
            }
            prevOption = propertySelector;
          }
          if (isHasPro) {
            listOptionSelector.removeAttribute("style");
          }
          else listOptionSelector.setAttribute("style", "display:none !important");
          for (var tempItem of itemOptionSelectors) {
            if (!properties.find(x => x.key === tempItem.getAttribute("data-key"))) tempItem.remove();
          }
        }
      }
    }
    var priceMod = {
      isEditOptionCart: false,
      cartCurrent: window.ap_front_settings.cart,
      cartItemLineEdit: -1,
      cartItemEdit: null,
      isCloneButtonAddCart:
        window.ap_front_settings.config.is_clone_bt_addcart ?? false,
      avisAddCartForm: $('form[action$="/cart/add"]'),
      avisAddCartFormActive: $('form[action$="/cart/add"]'),
      avisAddCartFormActiveJS: document.querySelector(
        'form[action$="/cart/add"]'
      ),
      avisUrl: "https://apo-api.avisplus.io/shopify/api/",
      options: { appendPrice: !1, skipPriceModIfVisible: "" },
      variantSubmissionAlters: [],
      orderId: new Date().getTime(),
      variantOrdering: [],
      activeVariants: {},
      radioInput: {},
      productVariantBundles: [],
      buttonAddCart: null,
      toggleSelector: function (elem) {
        elem.style.display =
          "block" != getComputedStyle(elem).display ? "block" : "none";
      },
      isHiddenSwatchTitle: function (option) {
        return option?.hidden_variant_title != null &&
          option?.hidden_variant_title !== undefined
          ? option?.hidden_variant_title
          : customizeryConfig?.customize_options?.swatch?.hidden_variant_title;
      },
      classHiddenSwatchTitle: function (isHiddenSwatchTitle) {
        return isHiddenSwatchTitle ? "avp-hiddenvarianttitleswatch" : "";
      },
      addLoadingAddCart: function (button) {
        button.setAttribute("disabled", "disabled"),
          button.classList.add("apo-loading");
      },
      removeLoadingAddCart: function (button) {
        button.removeAttribute("disabled", "disabled"),
          button.classList.remove("apo-loading");
      },
      getAllProductVariantBundles: async function (productHandles) {
        if (productHandles && productHandles.length > 0) {
          let products = await Promise.all(
            productHandles.map(async (handle) => {
              let productInfo = await pluginAction.getProduct(handle);
              if (productInfo) return productInfo;
              return null;
            })
          );
          priceMod.productVariantBundles =
            priceMod.productVariantBundles.concat(products);
          priceMod.productVariantBundles =
            priceMod.productVariantBundles.filter((x) => x);
        }
      },
      isLegacyValue: function (e) {
        return !e || "string" == typeof e || e instanceof String;
      },
      hasVariant: function (optionValue) {
        let result =
          !priceMod.isLegacyValue(optionValue) &&
          optionValue.type &&
          (optionValue.type === "useexistingvariant" ||
            optionValue.type === "chargeorbundle") &&
          optionValue.productId &&
          optionValue.is_exist &&
          optionValue.productVariationId;
        return result;
      },
      formatWithDelimiters(number, precision, thousands, decimal) {
        thousands = thousands || ",";
        decimal = decimal || ".";

        if (isNaN(number) || number === null) {
          return 0;
        }

        number = (number / 100.0).toFixed(precision);

        var parts = number.split(".");
        var dollarsAmount = parts[0].replace(
          /(\d)(?=(\d\d\d)+(?!\d))/g,
          "$1" + thousands
        );
        var centsAmount = parts[1] ? decimal + parts[1] : "";

        return dollarsAmount + centsAmount;
      },
      formatWithDelimitersToNumber(number, precision, thousands, decimal) {
        thousands = thousands || ",";
        decimal = decimal || ".";

        if (isNaN(number) || number === null) {
          return 0;
        }

        number = (number / 100.0).toFixed(precision);
        return number;
      },
      convertMoney: function (cents) {
        var value = "";
        var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
        var formatString = money_format;

        switch (formatString.match(placeholderRegex)[1]) {
          case "amount":
            value = priceMod.formatWithDelimiters(cents, 2);
            break;
          case "amount_no_decimals":
            value = priceMod.formatWithDelimiters(cents, 0);
            break;
          case "amount_with_comma_separator":
            value = priceMod.formatWithDelimiters(cents, 2, ".", ",");
            break;
          case "amount_no_decimals_with_comma_separator":
            value = priceMod.formatWithDelimiters(cents, 0, ".", ",");
            break;
          case "amount_no_decimals_with_space_separator":
            value = priceMod.formatWithDelimiters(cents, 0, " ");
            break;
          case "amount_with_apostrophe_separator":
            value = priceMod.formatWithDelimiters(cents, 2, "'");
            break;
        }

        if (shop_id === "69043421407") {
          value = value.replace(",", ".").replace(",", ".");
        }
        return value;
      },
      isNumeric: function (str) {
        return !isNaN(str) && !isNaN(parseFloat(str));
      },
      formatMoney: function (cents, isZeroToEmpty = false) {
        if (typeof cents === "string") {
          cents = cents.replace(".", "");
        }
        var value = priceMod.convertMoney(cents);

        if (isZeroToEmpty && value == "0") return null;

        var formatString = money_format;
        var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
        return formatString.replace(placeholderRegex, value);
      },
      formatMoneyToNumber: function (cents) {
        if (typeof cents === "string") {
          cents = cents.replace(".", "");
        }

        var value = 0;
        var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
        var formatString = money_format;

        switch (formatString.match(placeholderRegex)[1]) {
          case "amount":
            value = priceMod.formatWithDelimitersToNumber(cents, 2);
            break;
          case "amount_no_decimals":
            value = priceMod.formatWithDelimitersToNumber(cents, 0);
            break;
          case "amount_with_comma_separator":
            value = priceMod.formatWithDelimitersToNumber(cents, 2, ".", ",");
            break;
          case "amount_no_decimals_with_comma_separator":
            value = priceMod.formatWithDelimitersToNumber(cents, 0, ".", ",");
            break;
          case "amount_no_decimals_with_space_separator":
            value = priceMod.formatWithDelimitersToNumber(cents, 0, " ");
            break;
          case "amount_with_apostrophe_separator":
            value = priceMod.formatWithDelimitersToNumber(cents, 2, "'");
            break;
        }

        return value;
      },
      formatNewMoney: function (cents) {
        if (typeof cents === "string") {
          cents = cents.replace(".", "");
        }

        var formatString = money_format;
        var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
        return formatString.replace(placeholderRegex, cents);
      },
      priceMarkup: function (e, t) {
        let formatPrice = priceMod.formatMoney(parseFloat(e), true);
        if (formatPrice) return `<span class="money">(+${formatPrice})</span>`;

        return "";
      },
      getValueText: function (e, option) {
        if (priceMod.isLegacyValue(e)) return { value: e, display: e };
        if (e) {
          let isSwatch =
            option.type === "swatch" ||
            option.type === "swatch_single_color" ||
            option.type === "swatch_single_image" ||
            option.type === "swatch_multi_color" ||
            option.type === "swatch_multi_image";
          let isHasPrice = true;
          if (
            e.type == "adjustprice" ||
            e.price === "" ||
            ((e.type == "useexistingvariant" || e.type == "chargeorbundle") &&
              !e.is_exist) ||
            ((e.price == "0" || !e.price) && e.type == "createcharge")
          )
            isHasPrice = false;

          if (
            option?.type === "select" &&
            window.ap_front_settings.shop_id === "63321833641"
          )
            isHasPrice = false;

          let nameValue = e.value;
          let borderRadiusStyle = option?.type === "button_single" || option?.type === "button_multi"
            ? `border-radius: ${customizeryConfig?.customize_options?.button?.border_radius ?? 4}px;
                padding: ${customizeryConfig?.customize_options?.button?.padding_top_bottom ?? 8}px ${customizeryConfig?.customize_options?.button?.padding_left_right ?? 8}px;
                `
            : "";
          if (!nameValue?.trim() && option?.option_url === OPTION_URL.group)
            nameValue = e.url_name;
          let valueDisplay = `<span class="${isSwatch ? "swatch-variant-title" : "choice-list-variatnt-title"
            }"
            style="${borderRadiusStyle}"
            >${nameValue}${isHasPrice ? " " + priceMod.priceMarkup(e.price) : ""
            }</span>`;

          let valueUrl = e?.url?.trim();
          if (
            option?.type !== "select" &&
            option?.type !== "swatch_select_color" &&
            option?.type !== "swatch_select_image"
          ) {
            if (option?.option_url === OPTION_URL.allowed && valueUrl) {
              if (option?.url_display === OPTION_URL_DISPLAY.view) {
                valueDisplay =
                  `<span class="apo-swatch-url-view"
                  style="${borderRadiusStyle}"
                >
                  ${valueDisplay}<a class="apo-swatch-url" href="${e.url
                  }" target="_blank">${option?.url_label ?? "View"}</a></span>`;
              } else
                valueDisplay = `<span style="${borderRadiusStyle}"><a  class="apo-swatch-url" href="${valueUrl}" target="_blank">${valueDisplay}</a></span>`;
            } else if (
              option?.option_url === OPTION_URL.group ||
              (option?.option_url === OPTION_URL.only && valueUrl)
            ) {
              valueDisplay = `<span style="${borderRadiusStyle}"><a  class="apo-swatch-url" href="${valueUrl}">${valueDisplay}</a></span>`;
            }
          }

          let formatPrice = priceMod.formatMoney(parseFloat(e.price), true);
          let valueData = nameValue;
          if (isHasPrice)
            valueData =
              formatPrice &&
                e.type != "useexistingvariant" &&
                e.type != "chargeorbundle"
                ? `${nameValue} [ ${formatPrice} ]`
                : `${nameValue}`;

          return {
            value: valueData,
            display: valueDisplay,
          };
        }
        return { value: !1, display: !1 };
      },
      getVariantString: function (e, t, n, productId) {
        return (
          e + "-" + t + "-" + priceModAll[productId].variantOrdering.length
        );
      },
      findInputQuantityByInputValue: function (elemValue) {
        if (elemValue && elemValue.parents(".avp-value-grid").length > 0) {
          return elemValue
            .parents(".avp-value-grid")
            .find("input.avp-qty-input");
        }

        return null;
      },
      variantData: function (e, t) {
        return {
          name: e,
          productId: t.data("variant-product"),
          handle: t.data("product-handle"),
          variantId: t.data("variant-id"),
          price: t.data("variant-price"),
          quantity: 1,
          isOneTime: t.data("variant-onetime"),
          value: t.data("option-value"),
          type: t.data("option-type"),
          $input: t,
          isShow: true,
        };
      },
      addVariant: function (e, t, n, productId) {
        (priceModAll[productId].activeVariants[t] = priceMod.variantData(e, n)),
          spLog(
            { string: t, data: priceMod.activeVariants[t] },
            "adding variant to current",
            !0
          ),
          priceModAll[productId].activeVariants[t].variantId &&
          priceModAll[productId].activeVariants[t].variantId != "" &&
          eventApi.productBundleAdd({
            name: e,
            element: n,
            productBundle: priceModAll[productId].activeVariants[t],
            orderId: priceMod.orderId,
          });
      },
      removeVariant: function (e, t, n, productId) {
        var i = priceModAll[productId].activeVariants[t];
        spLog({ string: t, data: i }, "removing variant from current", !0),
          delete priceModAll[productId].activeVariants[t],
          i.variantId &&
          i.variantId != "" &&
          eventApi.productBundleRemove({
            name: e,
            element: n,
            productBundle: i,
          });
      },
      variantChangeSingle: async function (e, t, productId) {
        let optionType = t.data("option-type");
        let isChoiseList = !checkOptionAddCharge(optionType);

        var n = t.data("variant-string");
        ((isChoiseList && t.is(":checked")) ||
          (!isChoiseList &&
            (t.find("[field-name]")?.val() ||
              t?.val() ||
              t.find(".apo_value")?.val()))) &&
          !priceModAll[productId].activeVariants[n]
          ? priceMod.addVariant(e, n, t, productId)
          : ((isChoiseList && !t.is(":checked")) ||
            (!isChoiseList &&
              !t.find("[field-name]")?.val() &&
              !t?.val() &&
              !t.find(".apo_value")?.val())) &&
          priceModAll[productId].activeVariants[n] &&
          priceMod.removeVariant(e, n, t, productId);

        if (isChoiseList && priceModAll[productId].activeVariants[n]) {
          let inputQuantity = priceMod.findInputQuantityByInputValue(t);
          if (inputQuantity && inputQuantity.length > 0) {
            priceModAll[productId].activeVariants[n]["quantity"] = parseInt(
              inputQuantity.val()
            );
          }
        }
      },
      variantChange: async function (e, t, productId, elemOptionAvisContainer) {
        await Promise.all(
          window.AP_POptions.$.each(t, async function (t, n) {
            var i = $(n);
            (i.data("variant-price") == 0 || i.data("variant-price")) &&
              (await priceMod.variantChangeSingle(e, i, productId));
          })
        );
        if (elemOptionAvisContainer)
          createTotalAdd(elemOptionAvisContainer, productId);
      },
      attachData: function (e, t, n, i, option, productId) {
        let isOneTime = option.is_onetime ?? false;
        if (priceMod.hasVariant(n)) {
          var o = $(e),
            r = priceMod.getVariantString(
              t,
              n.productVariationId,
              i,
              productId
            );
          o.data("variant-string", r),
            o.data("variant-product", n.productId),
            o.data("variant-id", n.productVariationId),
            o.data("variant-price", n.price),
            o.data("variant-onetime", isOneTime),
            o.data("option-value", n.value),
            o.data("option-type", option.type),
            priceModAll[productId].variantOrdering.push(r);
        }
        return e;
      },
      postingQueue: [],
      postVariant: function (e, t) {
        var n = eventApi.beforeVariantPost({
          variant: e,
          callback: t,
          properties: {
            _apo_parent_order: priceMod.orderId,
            // _apo_field_name: e.name,
          },
        });
        return (
          !n &&
          void window.AP_POptions.$.post(
            "/cart/add.js",
            {
              quantity: e.quantity,
              id: e.variantId,
              properties: Object.assign(
                e.properties
                  ? e.properties
                  : {
                    _apo_parent_order: priceMod.orderId,
                    //  _apo_field_name: e.name,
                  }
              ),
            },
            function (e) {
              return (
                spLog(e, "variant post complete", !0),
                e && e.variant_id
                  ? void t()
                  : t(new Error("Was not added to cart"))
              );
            },
            "json"
          ).fail(function (e, n, i) {
            return (
              spLog({ xhr: e, status: n, error: i }, "variant post fail", !0),
              e &&
                e.responseJSON &&
                e.responseJSON.status &&
                422 === e.responseJSON.status
                ? t(e.responseJSON, !0)
                : void t(i)
            );
          })
        );
      },
      postVariants: function (e, t) {
        if (priceMod.postingQueue.length) {
          var n = priceMod.postingQueue.shift();
          priceMod.postVariant(n, function (n, i) {
            if (n) {
              if (i && n.description)
                return (
                  spLog(n, "customer facing error", !0),
                  alert(n.description),
                  void t(n)
                );
              spLog(n, "removing variant from current", !0);
            }
            priceMod.postVariants(e, t);
          });
        } else t();
      },
      postCartVariant: function (item) {
        fetch("/cart/add.js", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(item),
        })
          .then((e) => e.json())
          .then((e) => {
            if (
              e &&
              (e.status == "bad_request" ||
                e.status == 404 ||
                e.status == 422 ||
                e.status == "too_many_requests")
            ) {
              console.log("Error Avis: Add cart ", e);
              return {
                res: e,
              };
            } else {
              console.log("Add change OK");
              return null;
            }
          })
          .catch((e) => {
            console.log("Error Avis: Add cart ", e);
            return null;
          });
      },
      postCartVariants: function (items, t) {
        let cartData = "add.js";
        if (shop_id === "58912800936")
        {
          cartData = "add";
        }
        fetch("/cart/" + cartData, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(items),
        })
          .then((e) => {
            if (shop_id === "58912800936" && e.status === 200)
            {
              location.href = "/cart";
            }
            return e.json();
          })
          .then((e) => {
            if (
              e &&
              (e.status == "bad_request" ||
                e.status == 404 ||
                e.status == 422 ||
                e.status == "too_many_requests")
            ) {
              console.log("Error Avis: Add cart ", e);
              t(e);
            } else {
              console.log("Add change OK", e);
              t(e);
            }
          })
          .catch((e) => {
            console.log("Error Avis: Add cart ", e);
            t(e);
          });
      },
      getVariantSubmissions: function (productId) {
        if (
          priceMod.options.skipPriceModIfVisible &&
          $(priceMod.options.skipPriceModIfVisible).is(":visible")
        )
          return null;
        var e = [];
        if (window.AP_POptions && window.AP_POptions.pos)
          for (var t in priceModAll[productId].activeVariants)
            e.push(priceModAll[productId].activeVariants[t]);
        else
          $.each(
            priceModAll[productId].variantOrdering.reverse(),
            function (t, n) {
              priceModAll[productId].activeVariants[n] &&
                priceModAll[productId].activeVariants[n].isShow &&
                e.push(priceModAll[productId].activeVariants[n]);
            }
          );
        return priceMod.alterVariantValues(e, productId);
      },
      alterVariantValues: function (e, productId) {
        return (
          e &&
          e.length &&
          priceModAll[productId].variantSubmissionAlters.length &&
          $.each(
            priceModAll[productId].variantSubmissionAlters,
            function (t, n) {
              window.AP_POptions &&
                window.AP_POptions.pos &&
                e.forEach(function (t, n) {
                  (t.containerId = t.$input.closest(
                    "[data-product-options-container-id]"
                  ).length
                    ? t.$input
                      .closest("[data-product-options-container-id]")
                      .attr("data-product-options-container-id")
                    : ""),
                    (e[n] = t);
                }),
                (e = n(e)),
                e ||
                spLog(
                  n,
                  "priceMod: variantSubmissionAlter did not return any values",
                  !0
                );
            }
          ),
          e
        );
      },
      listInputAddBundle: [],
      cartSection:
        document.querySelector("cart-notification") ||
        document.querySelector("cart-drawer") ||
        document.querySelector("product-form"),
      addToCart: async function (productId, e, t, n) {
        if (shop_id === "72770978131" || shop_id === "76880183633") {
          let miniCart = document.querySelector("mini-cart");
          if (miniCart) priceMod.cartSection = miniCart;
        }
        n = n
          ? priceMod.alterVariantValues(n, productId)
          : priceMod.getVariantSubmissions(productId);
        if (priceMod.isCloneButtonAddCart) {
          e.preventDefault();
          e.stopImmediatePropagation();
          let listVariantBundle = [];
          for (var optionIndex in n) {
            let optionData = `${n[optionIndex].name}: ${n[optionIndex].value} - ${n[optionIndex].variantId}`;
            listVariantBundle.push(
              n[optionIndex].isOneTime
                ? optionData
                : `${optionData} * ${n[optionIndex].quantity}`
            );
          }
          if (!$('[name="properties[_apo_variants]"]').length) {
            var variant = $("<input />")
              .attr("type", "hidden")
              .attr("name", `properties[_apo_variants]`)
              .val(listVariantBundle.join(joinAddCharge));
            $(e.target).before(variant);
          } else {
            $('[name="properties[_apo_variants]"]').val(
              listVariantBundle.join(joinAddCharge)
            );
          }
          let avisAddCartFormActive = formProductGenOptionJs[productId];
          let formButton = e.target.closest("form");
          if (formButton) avisAddCartFormActive = formButton;

          let formData = new FormData(avisAddCartFormActive);
          let mainItemCart = {
            id: !1,
            quantity: 1,
            properties: {},
          };
          let productIdCurrent = false;
          formData.forEach((e, t) => {
            if (
              ("id" == t && (mainItemCart.id = parseInt(e)),
                "selling_plan" == t &&
                (mainItemCart["selling_plan"] = parseInt(e)),
                "selling_plan_radio" == t &&
                (mainItemCart["selling_plan_radio"] = parseInt(e)),
                "product_size" == t && (productIdCurrent = parseInt(e)),
                "quantity" == t && (mainItemCart.quantity = parseInt(e)),
                t.indexOf("properties") > -1)
            ) {
              let property = t.replace("properties[", "").replace("]", "");
              mainItemCart.properties[property] = e;
            }
          });
          if (productIdCurrent && !mainItemCart.id) {
            mainItemCart.id = productIdCurrent;
          }
          if (!mainItemCart.id) {
            let idSelector = avisAddCartFormActive.querySelector(
              ".product-variant-id"
            );
            if (idSelector && idSelector.value)
              mainItemCart.id = idSelector.value;
          }
          if (!mainItemCart.id) {
            let idSelector = avisAddCartFormActive.querySelector("[name=id]");
            if (idSelector && idSelector.value) {
              mainItemCart.id = idSelector.value;
            }
          }

          if ($('[name="properties[_apo_variants]"]').length > 0) {
            $('[name="properties[_apo_variants]"]').remove();
          }

          let isSection =
            window.ap_front_settings.shop_id === "72434319636" ||
            window.ap_front_settings.shop_id === "63532892418" ||
            window.ap_front_settings.shop_id === "79438512462" ||
            window.ap_front_settings.shop_id === "78469497151" ||
            window.ap_front_settings.shop_id === "60419801166" ||
            window.ap_front_settings.shop_id === "17207277";
          let sections =
            priceMod.cartSection?.getSectionsToRender &&
              typeof priceMod.cartSection?.getSectionsToRender === "function"
              ? priceMod.cartSection
                .getSectionsToRender()
                .map((section) => (isSection ? section.section : section.id))
              : [];

          if (
            sections.length === 0 &&
            shop_id === "83553517888"
          ) {
            let sectionsToBundle = ["variant-added"];
            document.documentElement.dispatchEvent(
              new CustomEvent("cart:prepare-bundled-sections", {
                bubbles: !0,
                detail: {
                  sections: sectionsToBundle,
                },
              })
            );

            sections = sectionsToBundle;
          }

          if (
            sections.length === 0 &&
            shop_id === "25604915279"
          ) {
            document.documentElement.dispatchEvent(new CustomEvent("theme:loading:start", { bubbles: true }));
            let sectionsToBundle = [];
            document.documentElement.dispatchEvent(
              new CustomEvent("cart:prepare-bundled-sections", {
                bubbles: !0,
                detail: {
                  sections: sectionsToBundle,
                },
              })
            );

            sections = sectionsToBundle;
          }

          if (shop_id === "63324618960") {
            sections = 'cart-icon-bubble';
            let productFormData = avisAddCartFormActive.closest("product-form");
            if (productFormData?.cartDrawer) {
              sections += `,${productFormData.cartDrawer.closest('.shopify-section').id.replace('shopify-section-', '')}`;
            }
          }

          if (shop_id === "25514049590" && window.BOOMR?.themeName === "Focal") sections = ['mini-cart'];
          if (shop_id === "6037953")
          {
            sections = [];
            document.documentElement.dispatchEvent(new CustomEvent("cart:prepare-bundled-sections", { bubbles: true, detail: { sections: sections } }));
          }

          let sections_url = window.location.pathname;

          let paramCartInput = {
            items: [],
            sections: sections,
            sections_url: sections_url,
          };

          $.each(n, function (e, t) {
            let optionData = `${t.name}: ${t.value} - ${t.variantId}`;
            let item = {
              id: parseInt(t.variantId),
              quantity: t.isOneTime
                ? 1
                : mainItemCart.quantity * (t.quantity ?? 1),
              properties: {
                _apo_added_by: t.isOneTime
                  ? optionData
                  : `${optionData} * ${t.quantity ?? 1}`,
              },
            };
            if (mainItemCart["selling_plan"])
              item["selling_plan"] = mainItemCart.selling_plan;
            if (mainItemCart["selling_plan_radio"])
              item["selling_plan_radio"] = mainItemCart.selling_plan_radio;
            paramCartInput.items.push(item);
          });
          paramCartInput.items.push(mainItemCart);
          var r = eventApi.beforeVariantsPost({
            variantValues: n,
            orderId: priceMod.orderId,
            callback: t,
          });
          return !r && priceMod.postCartVariants(paramCartInput, t);
        }
      },
      resetState: function () {
        (priceMod.orderId = new Date().getTime()),
          (priceMod.options = { appendPrice: !1, skipPriceModIfVisible: "" }),
          (priceMod.variantOrdering = []),
          (priceMod.variantSubmissionAlters = []),
          (priceMod.activeVariants = {});
      },
      buyItNow: function () {
        let textCustomizationCostFor = "Customization Cost for";
        try {
          textCustomizationCostFor =
            customizeryConfig && customizeryConfig.text_customization_cost_for
              ? customizeryConfig.text_customization_cost_for
              : "Customization Cost for";
        } catch (e) {
          textCustomizationCostFor = "Customization Cost for";
        }
        let options = [];
        if (
          customizeryConfig &&
          customizeryConfig.optionSets &&
          customizeryConfig.optionSets.length
        ) {
          customizeryConfig.optionSets.forEach((optionSetItem) => {
            if (optionSetItem.options)
              options = options.concat(optionSetItem.options);
          });
        }
      },
      init: function (e) {
        priceMod.resetState(), $.extend(priceMod.options, e);
      },
    };
    // // 3. Init cart page
    // cartData =
    //   window.ap_front_settings && window.ap_front_settings.cart
    //     ? window.ap_front_settings.cart
    //     : {};

    AvisOptionsConfig.priceMod = priceMod;
    var priceModCart = {
      form: null,
      cartItems: [],
      options: {
        appendPrice: !1,
      },
      getCart: function (e) {
        window.AP_POptions.$.getJSON("/cart.js", function (t) {
          e(t);
        }).fail(function (e, t, n) {
        });
      },
      listCartUpdate: {},
      getCartV2: async () =>
        fetch("/cart.json?avis=1", { method: "GET" })
          .then((t) => t.json())
          .then((t) => t),
      updateCart: (t, e) => {
        fetch("/cart/update.js", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(t),
        })
          .then((t) => t.json())
          .then((t) => {
            t && e(t);
          })
          .catch((t) => {
            console.log("Error:", t);
          });
      },
      changeCart: async (t) => {
        let data = await fetch("/cart/change.js", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(t),
        })
          .then((t) => {
            return t.json();
          })
          .then((t) => {
            return t;
          })
          .catch((t) => {
            console.log("Error:", t);
            return false;
          });
        return data;
      },
      changesCart: async (t, callback) => {
        let isAdd = false;
        for (let e = 0; e < t.length; e++) {
          const o = t[e];
          let changeCartData = await priceModCart.changeCart(o);
          if (changeCartData) isAdd = true;
          if (e === t.length - 1 && isAdd) {
            callback();
          }
        }
      },
      postUpdateCart: async function (data) {
        return new Promise((n, o) => {
          n(
            fetch("/cart/update.js", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ updates: data }),
            })
              .then((e) => e.json())
              .then((e) => {
                return {
                  res: e,
                };
              })
              .catch((e) => {
                console.log("Error Avis: Update cart ", e);
                return null;
              })
          );
        });
      },
      postChangeCart: async function (data) {
        return new Promise((n, o) => {
          n(
            fetch("/cart/change.js", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(data),
            })
              .then((e) => e.json())
              .then((e) => {
                console.log("res change cart:", e);
                return {
                  res: e,
                };
              })
              .catch((e) => {
                console.log("Error Avis: Update cart ", e);
                return null;
              })
          );
        });
      },
      postAddsCart: async function (data) {
        return new Promise((n, o) => {
          n(
            fetch("/cart/add.js", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(data),
            })
              .then((e) => e.json())
              .then((e) => {
                return {
                  res: e,
                  key: data.key,
                };
              })
              .catch((e) => {
                console.log("Error Avis: Add cart ", e);
                return null;
              })
          );
        });
      },
      postAddCart: async function (data) {
        return new Promise((n, o) => {
          n(
            fetch("/cart/add.js?avis=apo1", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ items: [data.item] }),
            })
              .then((e) => e.json())
              .then((e) => {
                return {
                  res: e,
                  key: data.key,
                };
              })
              .catch((e) => {
                console.log("Error Avis: Add cart ", e);
                return null;
              })
          );
        });
      },
      init: function (e) {
        priceModCart.options.appendPrice = true;
        // Add collections of product to cart collections (Add product in cart slider (None load page cart))
        if (window.ap_front_settings.product_info.collections.length > 0) {
          for (var clectItem of window.ap_front_settings.product_info
            .collections) {
            window.ap_front_settings.cart_collections.push({
              product_id: window.ap_front_settings.product_info.product_id,
              collection_id: clectItem,
            });
          }
        }
      },
    };
    function conditionalLogicFactory(e) {
      var t = this;
      (t.active = !1),
        (t.isPreview = !1),
        (t.watching = {}),
        (t.reactions = {}),
        (t.timers = { running: { Change: 0, React: 0 } }),
        (t.intervals = []);
      function logCondition(e, n, i) {
        spLog(e, n, i || !0),
          t.isPreview && ((n = "AvisPlus Options preview: " + n), alert(n));
      }
      function i_fieldHide(n, elemOptionAvisContainer, productId) {
        let avisAddCartFormActive = formProductGenOptionJs[productId]
          ? $(formProductGenOptionJs[productId])
          : null;

        function hideControl() {
          if (!avisAddCartFormActive) return;

          // if (shop_id === "71974158653" || shop_id === "29666866" || shop_id === "11166422") {
          let clss = 'input:not([type="checkbox"]:not([avp-data="switch"])):not([disabled]),select:not([disabled]),textarea:not([disabled]),fieldset:not([disabled]),span[data-required]:not([disabled]),div[data-required]:not([disabled])';
          n.$input[0].querySelectorAll(clss).forEach(x => {
            let fieldName = x.getAttribute("field-name");
            //let name = x.getAttribute("name");
            let newFieldName = fieldName?.replaceAll('"', "&quot;");
            //let newName = name?.replaceAll('"', "&quot;");
            let inputSelector = avisAddCartFormActive[0].querySelector(`input[temp-name="${newFieldName}"]`);
            if (isThemeProperty) {
              if (inputSelector) {
                inputSelector.setAttribute("disabled", "disabled");
                inputSelector.setAttribute("name", `properties[${newFieldName}]`);
              }
            }
            else {
              if (inputSelector) {
                inputSelector.setAttribute("disabled", "disabled");
                //inputSelector.setAttribute("nme-disabled", `properties[${newFieldName}]`);
                inputSelector.removeAttribute("name");
              }

              x.setAttribute("disabled", "disabled");
              //x.setAttribute("nme-disabled", newName);
              x.removeAttribute("name");
            }
          }),
            n.$input[0].style.setProperty("display", "none", "important");
          // }
          // else {
          //   e(
          //     'input:not([type="checkbox"]:not([avp-data="switch"])),select,textarea,fieldset, span[data-required],div[data-required]',
          //     n.$input
          //   )
          //     .not("[disabled]")
          //     .each(function () {
          //       let fieldName = e(this).attr("field-name");
          //       let newFieldName = fieldName?.replaceAll('"', "&quot;");
          //       if (isThemeProperty) {
          //         avisAddCartFormActive
          //           ?.find(`input[temp-name="${newFieldName}"]`)
          //           ?.attr({
          //             disabled: "disabled",
          //             name: `properties[${e(this).attr("field-name")}]`,
          //           });
          //         let inputSelectorContainer = avisAddCartFormActive
          //           ?.find(`input[field-name="${newFieldName}"]`);
          //         if (inputSelectorContainer) {
          //           inputSelectorContainer.attr({
          //             disabled: "disabled",
          //             name: `properties[${e(this).attr("field-name")}]`,
          //           });

          //           inputSelectorContainer.closest("[data-required]")?.attr({
          //             disabled: "disabled",
          //           });
          //         }

          //       } else {
          //         avisAddCartFormActive
          //           ?.find(`input[temp-name="${newFieldName}"]`)
          //           ?.attr({
          //             disabled: "disabled",
          //             "nme-disabled": `properties[${e(this).attr("field-name")}]`,
          //           })
          //           ?.removeAttr("name");
          //         e(this)
          //           .attr({
          //             disabled: "disabled",
          //             "nme-disabled": e(this).attr("name"),
          //           })
          //           .removeAttr("name");
          //       }
          //     }),
          //     n.$input[0].style.setProperty("display", "none", "important");
          // }

          (n.hidden = !0),
            eventApi.fieldHide(
              { reaction: n },
              elemOptionAvisContainer,
              productId
            ),
            t.watching[n.name] &&
            ((t.watching[n.name].hidden = !0),
              l_change(
                elemOptionAvisContainer,
                productId,
                t.watching[n.name],
                0
              ));
        }

        spLog(n, "conditional logic: hiding", !0),
          n.$input.attr({ disabled: "disabled" }).fadeTo
            ? n.$input
              .attr({ disabled: "disabled" })
              .fadeTo(100, 0, function () {
                hideControl();
              })
            : (n.$input.attr({ disabled: "disabled" })[0].animate(
              {
                opacity: 0,
              },
              {
                duration: 100,
                easing: "linear",
                iterations: 1,
                fill: "both",
              }
            ).onfinish = function () {
              hideControl();
            });
      }
      function o_fieldShow(n, elemOptionAvisContainer, productId) {
        let avisAddCartFormActive = formProductGenOptionJs[productId]
          ? $(formProductGenOptionJs[productId])
          : null; // priceMod.avisAddCartFormActive;

        function showControl() {
          if (!avisAddCartFormActive) return;
          // if (shop_id === "71974158653" || shop_id === "29666866" || shop_id === "11166422") {
          let clss = 'input:not([type="checkbox"]:not([avp-data="switch"]))[disabled],select[disabled],textarea[disabled],fieldset[disabled],span[data-required][disabled],div[data-required][disabled]';
          n.$input[0].querySelectorAll(clss).forEach(x => {
            let fieldName = x.getAttribute("field-name");
            //let name = x.getAttribute("nme-disabled");
            let newFieldName = fieldName?.replaceAll('"', "&quot;");
            //let newName = name?.replaceAll('"', "&quot;");
            let inputSelector = avisAddCartFormActive[0].querySelector(`input[temp-name="${newFieldName}"]`);
            if (isThemeProperty) {
              if (inputSelector) {
                inputSelector.removeAttribute("disabled");
              }
            }
            else {
              if (inputSelector) {
                inputSelector.setAttribute("name", `properties[${newFieldName}]`);
                if (inputSelector.value) {
                  //inputSelector.removeAttribute("nme-disabled");
                  inputSelector.removeAttribute("disabled");
                }
              }

              //x.removeAttribute("nme-disabled");
              x.removeAttribute("disabled");
              x.setAttribute("name", newFieldName);
            }
          });
          // }
          // else {
          //   e(
          //     'input:not([type="checkbox"]:not([avp-data="switch"])),select,textarea,fieldset, span[data-required],div[data-required]',
          //     n.$input
          //   )
          //     .filter("[disabled]")
          //     .each(function () {
          //       let fieldName = e(this).attr("field-name");
          //       let newFieldName = fieldName?.replaceAll('"', "&quot;");
          //       if (isThemeProperty) {
          //         avisAddCartFormActive
          //           ?.find(`input[name="properties[${newFieldName}]"]`)
          //           ?.removeAttr("disabled");

          //         avisAddCartFormActive
          //           ?.find(`input[field-name="${newFieldName}"]`)
          //           ?.removeAttr("disabled");

          //         let inputSelectorContainer = avisAddCartFormActive
          //           ?.find(`input[field-name="${newFieldName}"]`);
          //         if (inputSelectorContainer) {
          //           inputSelectorContainer.removeAttr("disabled");
          //           inputSelectorContainer.closest("[data-required]")?.removeAttr("disabled");
          //         }
          //       } else {
          //         let findInputHidden = avisAddCartFormActive
          //         .find(`input[nme-disabled="properties[${newFieldName}]"]`);
          //         if (findInputHidden)
          //         {
          //           findInputHidden.attr({
          //             name: `properties[${fieldName}]`,
          //           });
          //           if (findInputHidden.val())
          //           {

          //           }
          //         }
          //         avisAddCartFormActive
          //           .find(`input[nme-disabled="properties[${newFieldName}]"]`)
          //           .attr({
          //             name: `properties[${fieldName}]`,
          //           })
          //           .removeAttr("disabled")
          //           .removeAttr("nme-disabled");
          //         e(this)
          //           .attr({ name: e(this).attr("nme-disabled") })
          //           .removeAttr("nme-disabled")
          //           .removeAttr("disabled");
          //       }
          //     });
          // }

          n.$input.show(),
            (n.hidden = !1),
            eventApi.fieldShow(
              { reaction: n },
              elemOptionAvisContainer,
              productId
            ),
            t.watching[n.name] &&
            ((t.watching[n.name].hidden = !1),
              l_change(
                elemOptionAvisContainer,
                productId,
                t.watching[n.name],
                0
              ));
        }

        spLog(n, "conditional logic: showing field", !0),
          n.$input.removeAttr("disabled").fadeTo
            ? n.$input.removeAttr("disabled").fadeTo(100, 1, function () {
              showControl();
            })
            : (n.$input.removeAttr("disabled")[0].animate(
              {
                opacity: 1,
              },
              {
                duration: 100,
                easing: "linear",
                iterations: 1,
                fill: "both",
              }
            ).onfinish = function () {
              showControl();
            });
      }
      function compareCondition(e, t, n) {
        if (t && e != "greater" && e != "less") t = t.split(" [ ")[0];
        switch (e) {
          case "contains":
            return !!t && t.indexOf(n) !== -1;
          case "not_contain":
            return t && t.indexOf(n) === -1;
          case "starts_with":
            return t && t.startsWith(n);
          case "ends_width":
            return t && t.endsWith(n);
          case "is":
            return t == n;
          case "isnot":
            return t != n;
          case "greater":
            return parseFloat(t) > parseFloat(n);
          case "less":
            return parseFloat(t) < parseFloat(n);
          default:
            return (
              spLog(e, "conditional logic: unknown type for rule compare", !0),
              !1
            );
        }
      }
      function checkCondition(e, t, n) {
        if ("greater" == e || "less" == e) {
          try {
            var i = parseFloat(t),
              o = parseFloat(n);
            if (!isNaN(i) && !isNaN(o)) return compareCondition(e, i, o);
          } catch (a) {
            spLog(a, "conditional logic: greater / less error", !0);
          }
          return !1;
        }
        return (
          (t = t ? t.toLowerCase() : ""),
          (n = n ? n.toLowerCase() : ""),
          compareCondition(e, t, n)
        );
      }

      t.s_check_input_variant = function (
        elemOptionAvisContainer,
        productId,
        productInfo
      ) {
        let watchingVariant = t.watching[key_variant_conditional];
        if (!watchingVariant) return;

        let variants = productInfo.variants;
        let variantId = variants[0].id.toString();
        let formData = new FormData(formProductGenOptionJs[productId]);

        let checkUrl = shop_id === "1991066";
        if (!checkUrl && formData && formData.get("id")) variantId = formData.get("id");
        else {
          const searchParams = new URLSearchParams(window.location.search);
          if (searchParams?.get("variant")) {
            variantId = searchParams?.get("variant");
          }
        }

        let oldVariantId = selectedVariantIdAll[productId];
        if (oldVariantId !== variantId) {
          selectedVariantIdAll[productId] = variantId;
          const findVariant = variants.find(
            (variant) => variant.id.toString() === variantId
          );
          if (findVariant && findVariant?.public_title) {
            let value = findVariant?.public_title?.toLowerCase();
            watchingVariant.value = value;

            e.each(watchingVariant.reactions, function (o, r) {
              t.reactions[r].rules[watchingVariant.name] &&
                t.reactions[r].rules[watchingVariant.name].length
                ? e.each(
                  t.reactions[r].rules[watchingVariant.name],
                  function (e, t) {
                    t.doesMatch = void 0;
                  }
                )
                : n(
                  { watch: watchingVariant, field: r },
                  "conditional logic: missing reaction, name: " +
                  watchingVariant.name +
                  ", field: " +
                  r
                ),
                d_react(elemOptionAvisContainer, productId, t.reactions[r]);
            });
          }
        }
      };
      function s_check_input(elemOptionAvisContainer, productId, i) {
        if (!i.$input)
          return void logCondition(
            i,
            "conditional logic: page missing input, name: " + i.name
          );
        var o;
        if (i.$input.not("[disabled]").length)
          switch (i.input.type) {
            case "radio":
            case "button_single":
              o = e("input:checked", i.$input).val();
              break;
            case "swatch":
            case "swatch_single_color":
            case "swatch_single_image":
            case "swatch_multi_color":
            case "swatch_multi_image":
            case "swatch_select_image":
            case "swatch_select_color":
              o = e("input:checked", i.$input)
                .map(function () {
                  return e(this).val();
                })
                .toArray();
              break;
            case "checkbox":
            case "button_multi":
              o = e("input:checked", i.$input)
                .map(function () {
                  return e(this).val();
                })
                .toArray();
              break;
            default:
              o = e("input:not(.iti__search-input),select,textarea", i.$input)
                .not('[type="hidden"]')
                .first()
                .val();
          }
        o != i.value &&
          ((i.value = o),
            e.each(i.reactions, function (o, r) {
              t.reactions[r].rules[i.name] && t.reactions[r].rules[i.name].length
                ? e.each(t.reactions[r].rules[i.name], function (e, t) {
                  t.doesMatch = void 0;
                })
                : logCondition(
                  { watch: i, field: r },
                  "conditional logic: missing reaction, name: " +
                  i.name +
                  ", field: " +
                  r
                ),
                d_react(elemOptionAvisContainer, productId, t.reactions[r]);
            }));
      }
      function p_rule_logic(elemOptionAvisContainer, productId, r) {
        if (!r.$input && !r[key_variant_conditional])
          return void logCondition(
            r,
            "conditional logic: page missing input, name: " + r.name
          );
        var s = "all" === r.logic;
        e.each(r.rules, function (n, i) {
          e.each(i, function (i, o) {
            if (void 0 === o.doesMatch) {
              var p = t.watching[n];
              if (p.hidden) {
                o.doesMatch = false;
              } else {
                Array.isArray(p.value)
                  ? p.value.length
                    ? ((o.doesMatch = !1),
                      e.each(p.value, function (e, t) {
                        o.doesMatch =
                          checkCondition(o.type, t, o.value) || o.doesMatch;
                      }))
                    : (o.doesMatch = checkCondition(o.type, "", o.value))
                  : (o.doesMatch = checkCondition(o.type, p.value, o.value));
              }
            }
            s = "all" === r.logic ? o.doesMatch && s : o.doesMatch || s;
          });
        }),
          "hide" === r.type
            ? s
              ? !r.hidden && i_fieldHide(r, elemOptionAvisContainer, productId)
              : r.hidden && o_fieldShow(r, elemOptionAvisContainer, productId)
            : s
              ? r.hidden && o_fieldShow(r, elemOptionAvisContainer, productId)
              : !r.hidden && i_fieldHide(r, elemOptionAvisContainer, productId);

        createTotalAdd(elemOptionAvisContainer, productId);
      }
      t.runAfterTimeouts = function (e) {
        var n = setInterval(function () {
          if (!t.timers.running.Change && !t.timers.running.React) {
            clearInterval(n);
            var i = t.intervals.indexOf(n);
            i !== -1 && t.intervals.splice(i, 1), e();
          }
        }, 100);
        t.intervals.push(n);
      };
      function c_timer(elemOptionAvisContainer, productId, e, n, i, o) {
        var r = e.name + n;
        t.timers[r] || t.timers.running[n]++,
          clearTimeout(t.timers[r]),
          (t.timers[r] = setTimeout(
            function () {
              delete t.timers[r],
                t.timers.running[n]--,
                o(elemOptionAvisContainer, productId, e);
            },
            void 0 === i ? 50 : i
          ));
      }
      function l_change(elemOptionAvisContainer, productId, e, t) {
        c_timer(
          elemOptionAvisContainer,
          productId,
          e,
          "Change",
          t,
          s_check_input
        );
      }
      function d_react(elemOptionAvisContainer, productId, e, t) {
        c_timer(
          elemOptionAvisContainer,
          productId,
          e,
          "React",
          t,
          p_rule_logic
        );
      }
      t.register = function (elemOptionAvisContainer, productId, i, o, r) {
        if (t.active) {
          if (t.reactions[i.label_cart]) {
            var a = t.reactions[i.label_cart];
            if (a.$input)
              return void logCondition(
                { reaction: a, input: i },
                "conditional logic: duplicate input, name: " +
                i.label_cart +
                ", label: " +
                i.label_product
              );
            (a.$input = o), d_react(elemOptionAvisContainer, productId, a, 50);
          }
          if (t.watching[i.label_cart]) {
            var p = t.watching[i.label_cart];
            if (p.$input)
              return void logCondition(
                { watch: p, input: i },
                "conditional logic: duplicate input, name: " +
                i.label_cart +
                ", label: " +
                i.label_product
              );
            (p.input = i),
              (p.$input = o),
              e.each(r, function (t, n) {
                var i = e(n);
                i.not("fieldset,input,select,textarea").length &&
                  (i = e(
                    "fieldset,input:not(.iti__search-input),select,textarea",
                    i
                  )
                    .not('[type="hidden"]')
                    .first()),
                  i.is("[type=text],[type=number],textarea") &&
                  i.on("keydown", function (e) {
                    l_change(elemOptionAvisContainer, productId, p);
                  }),
                  i.on("change", function (e) {
                    l_change(elemOptionAvisContainer, productId, p);
                  }),
                  i.is("[type=radio]") &&
                  i.on("click", function (e) {
                    l_change(elemOptionAvisContainer, productId, p);
                  });
              }),
              s_check_input(elemOptionAvisContainer, productId, p);
          }
        }
      };
      function setConditionalLogicOption(n) {
        if (
          n.conditional_logic &&
          n.conditional_logic.condition_items &&
          n.conditional_logic.condition_items.length
        ) {
          (t.active = !0),
            "uploadery" !== n.type ||
            n.label_cart ||
            (n.label_cart = n.stub_input_id.$oid);
          var i = {
            name: n.label_cart,
            logic: n.conditional_logic.logic,
            type: n.conditional_logic.type,
            hidden: !1,
            $input: null,
            rules: {},
          };
          return (
            e.each(n.conditional_logic.condition_items, function (e, o) {
              t.watching[o.field] ||
                (t.watching[o.field] = {
                  name: o.field,
                  value: void 0,
                  reactions: [],
                }),
                t.watching[o.field].reactions.indexOf(n.label_cart) === -1 &&
                t.watching[o.field].reactions.push(n.label_cart),
                i.rules[o.field] || (i.rules[o.field] = []),
                i.rules[o.field].push({
                  doesMatch: void 0,
                  type: o.type,
                  value: o.value,
                });
            }),
            (t.reactions[n.label_cart] = i),
            i
          );
        }
      }
      function f(n) {
        var i = [];
        return (
          e.each(n, function (e, n) {
            return window.AP_POptions && window.AP_POptions.pos
              ? void (n.$input.parent(":disabled").length || i.push(n))
              : void (
                (t.reactions[n.name] && t.reactions[n.name].hidden) ||
                i.push(n)
              );
          }),
          i
        );
      }
      function initData() {
        Object.keys(t.timers)
          .filter(function (e) {
            return "running" !== e;
          })
          .forEach(function (e) {
            clearTimeout(t.timers[e]);
          }),
          t.intervals.forEach(function (e) {
            clearInterval(e);
          }),
          (t.active = !1),
          (t.isPreview = !1),
          (t.watching = {}),
          (t.reactions = {}),
          (t.intervals = []),
          (t.timers.running = { Change: 0, React: 0 });
      }
      return (
        (t.init = function (n, i) {
          i && initData(),
            e.each(n, function (e, t) {
              setConditionalLogicOption(t);
            }),
            t.active && priceMod.variantSubmissionAlters.push(f);
        }),
        t
      );
    }

    function EventApi(e) {
      var t = this;
      return (
        (t.subscribe = function (e, t) {
          "function" == typeof t &&
            document.addEventListener("productoptions." + e, function (e) {
              t(e);
            });
        }),
        (t.trigger = function (e, t, n) {
          n = !!n && n;
          var i = new CustomEvent(e, { detail: t, cancelable: n });
          return document.dispatchEvent(i), i;
        }),
        (t.getValue = function (t, n) {
          var i = n.find('[name*="properties"]'),
            o = "";
          return (
            i.is(
              "textarea, input[type=text], input[type=number], input[type=radio]:checked, input[type=hidden]"
            )
              ? (o = i.val())
              : i.is("select") &&
              (o = e.isArray(i.val()) ? i.val().join(",") : i.val()),
            o
          );
        }),
        (t.appLoad = function (e) {
          t.trigger("productoptions.appLoad", e);
        }),
        (t.fieldLoad = function (e, productId) {
          e.hasBundledProducts = !1;
          for (var n in priceModAll[productId].activeVariants)
            priceModAll[productId].activeVariants[n].label_cart &&
              priceModAll[productId].activeVariants[n].label_cart ===
              e.fieldConfig.label_cart &&
              (e.hasBundledProducts = !0);
          (e.value = t.getValue(e.fieldConfig.label_cart, e.element)),
            t.trigger("productoptions.fieldLoad", e);
        }),
        (t.fieldChange = function (e) {
          t.trigger("productoptions.fieldChange", e);
        }),
        (t.productBundleAdd = function (e) {
          (e.element = e.element.closest("div")),
            t.trigger("productoptions.productBundleAdd", e);
        }),
        (t.productBundleRemove = function (e) {
          (e.element = e.element.closest("div")),
            t.trigger("productoptions.productBundleRemove", e);
        }),
        (t.fieldShow = function (e, elemOptionAvisContainer, productId) {
          var n = {
            name: e.reaction.name,
            value: t.getValue(e.reaction.name, e.reaction.$input),
            element: e.reaction.$input,
          };
          t.trigger("productoptions.fieldShow", n),
            eventApi.fieldChange({
              name: e.reaction.name,
              value: t.getValue(e.reaction.name, e.reaction.$input),
              element: e.reaction.$input,
            }),
            Object.keys(priceModAll[productId].activeVariants)
              .filter(function (t) {
                return (
                  // priceModAll[productId].activeVariants[t].price &&
                  // priceModAll[productId].activeVariants[t].price != "" &&
                  priceModAll[productId].activeVariants[t].name ===
                  e.reaction.name
                );
              })
              .forEach(function (t) {
                priceModAll[productId].activeVariants[t].isShow = true;
                if (
                  priceModAll[productId].activeVariants[t].variantId &&
                  priceModAll[productId].activeVariants[t].variantId != ""
                )
                  eventApi.productBundleAdd({
                    name: e.reaction.name,
                    element: e.reaction.$input,
                    productBundle: priceModAll[productId].activeVariants[t],
                  });
              });
          findButtonAddCart(elemOptionAvisContainer, productId);
          createTotalAdd(elemOptionAvisContainer, productId);
        }),
        (t.fieldHide = function (e, elemOptionAvisContainer, productId) {
          var n = {
            name: e.reaction.name,
            value: t.getValue(e.reaction.name, e.reaction.$input),
            element: e.reaction.$input,
          };
          t.trigger("productoptions.fieldHide", n),
            eventApi.fieldChange({
              name: e.reaction.name,
              value: "",
              element: e.reaction.$input,
            }),
            Object.keys(priceModAll[productId].activeVariants)
              .filter(function (t) {
                return (
                  // priceModAll[productId].activeVariants[t].price &&
                  // priceModAll[productId].activeVariants[t].price != "" &&
                  priceModAll[productId].activeVariants[t].name ===
                  e.reaction.name
                );
              })
              .forEach(function (t) {
                if (
                  priceModAll[productId].activeVariants[t].variantId &&
                  priceModAll[productId].activeVariants[t].variantId != ""
                )
                  eventApi.productBundleRemove({
                    name: e.reaction.name,
                    element: e.reaction.$input,
                    productBundle: priceModAll[productId].activeVariants[t],
                  });

                priceModAll[productId].activeVariants[t].isShow = false;
              });
          findButtonAddCart(elemOptionAvisContainer, productId);
          createTotalAdd(elemOptionAvisContainer, productId);
        }),
        (t.validationFail = function (e) {
          var n = t.trigger("productoptions.validationFail", e, !0);
          return n.defaultPrevented;
        }),
        (t.validationSuccess = function (e) {
          t.trigger("productoptions.validationSuccess", e);
        }),
        (t.productBundleCartSubmit = function (e) {
          var n = t.trigger("productoptions.productBundleCartSubmit", e, !0);
          return n.defaultPrevented;
        }),
        (t.beforeVariantPost = function (e) {
          var n = t.trigger("productoptions.beforeVariantPost", e, !0);
          return n.defaultPrevented;
        }),
        (t.beforeVariantsPost = function (e) {
          var n = t.trigger("productoptions.beforeVariantsPost", e, !0);
          return n.defaultPrevented;
        }),
        t
      );
    }
    var eventApi = new EventApi(window.AP_POptions.$);
    function spLog(e, t, n) {
      var i = "IO",
        o = "DodgerBlue";
      "function" == typeof window.spLogCallback &&
        window.spLogCallback(i, e, t, n === !0 ? o : n);
      try {
        "on" === localStorage.getItem("spLog") && console.log([i, t, e]);
      } catch (r) { }
    }
    function createTotalAdd(elemOptionAvisContainer, productId) {
      totalPriceAdd = 0;

      let priceAddElem = elemOptionAvisContainer.querySelector(
        ".avp-productoption-total-add"
      );
      let inputTotalAddCharge = elemOptionAvisContainer.querySelector(
        ".apo-total-addcharge"
      );
      if (priceModAll[productId].activeVariants) {
        for (const item in priceModAll[productId].activeVariants) {
          let priceAdd = priceMod.formatMoneyToNumber(
            priceModAll[productId].activeVariants[item].price
          );
          if (
            priceModAll[productId].activeVariants[item].isShow &&
            priceAdd != "0"
          )
            totalPriceAdd +=
              parseFloat(priceAdd) *
              parseInt(
                priceModAll[productId].activeVariants[item].quantity ?? 1
              );
        }

        if (priceAddElem) {
          if (totalPriceAdd > 0) {
            priceAddElem.classList.remove("apo-total-addcharge-hide");
            let formatPrice = priceMod.formatMoney(totalPriceAdd * 100);
            let priceAdd = priceAddElem.querySelector(
              ".avp-productoption-totalpriceadd"
            );
            if (priceAdd) priceAdd.innerHTML = formatPrice;
            if (inputTotalAddCharge)
              inputTotalAddCharge.value = totalPriceAdd * 100;
          } else {
            priceAddElem.classList.add("apo-total-addcharge-hide");
            if (inputTotalAddCharge) inputTotalAddCharge.value = 0;

            let formatPrice = priceMod.formatMoney(totalPriceAdd * 100);
            let priceAdd = priceAddElem.querySelector(
              ".avp-productoption-totalpriceadd"
            );
            if (priceAdd) priceAdd.innerHTML = formatPrice;
          }
        }
      }

      if (totalPriceAdd === 0 && priceAddElem) {
        priceAddElem.classList.add("apo-total-addcharge-hide");
      }
      if (inputTotalAddCharge) inputTotalAddCharge.value = totalPriceAdd * 100;
    }

    const showPopupImageSwatch = (event) => {
      let apoSwatchPopupClass = "apo-swatch-popup";
      let apoSwatchBackdropClass = "apo-swatch-backdrop";

      const remove = () => {
        let t = document.querySelector(`.${apoSwatchPopupClass}`),
          e = document.querySelector(`.${apoSwatchBackdropClass}`);
        t && t.remove(), e && e.remove();
      };
      remove();
      const createPopup = () => {
        let n = document.createElement("div");
        return (
          n.classList.add(apoSwatchPopupClass),
          n.setAttribute("style", "display:none!important"),
          (n.innerHTML = `<div class="apo-swatch-popup-box">\n         <span class="apo-swatch-popup-close">&times;</span>\n <div class="apo-popup-image">  </div>    </div>`),
          n
        );
      },
        backDrop = () => {
          let t = document.createElement("div");
          return (
            t.classList.add(apoSwatchBackdropClass),
            t.setAttribute("style", "display:none!important"),
            t.addEventListener("click", remove.bind(this)),
            t
          );
        };

      let e = createPopup(),
        r = backDrop();
      document.body.appendChild(e),
        document.body.appendChild(r),
        e
          .querySelectorAll(".apo-swatch-popup-close")
          .forEach((t) => t.addEventListener("click", remove.bind(this)));

      let mainImg = event.currentTarget.querySelector(".apo-main-image");
      if (mainImg && mainImg.getAttribute("src")) {
        let imgSrc = mainImg.getAttribute("src");
        let fileName = imgSrc.split("/").pop();
        let newImgSrc = imgSrc.replace(fileName, "full_" + fileName);
        if (document.querySelector(".apo-popup-image"))
          document.querySelector(
            ".apo-popup-image"
          ).innerHTML = `<img style="width: 100%; height: 100%; object-fit: contain;" src="${newImgSrc}" />`;
        e.setAttribute("style", "display:flex!important");
        r.setAttribute("style", "display:block!important");
      }
    };

    const checkOptionAddCharge = (optionType) => {
      return (
        optionType === "text" ||
        optionType === "textarea" ||
        optionType === "number" ||
        optionType === "date" ||
        optionType === "color" ||
        optionType === "switch" ||
        optionType === "file" ||
        optionType === "phone" ||
        optionType === "font" ||
        optionType === "email"
      );
    };

    var e = {
      _createTotalAdd: function (elemOptionAvisContainer, productId) {
        createTotalAdd(elemOptionAvisContainer, productId);
      },
      _handleChangeQuantity: async function (
        event,
        elemOptionAvisContainer,
        productId
      ) {
        let elm = event.target;
        let parents = $(elm).parents(".avp-value-grid");
        if (parents.length > 0) {
          let inputValue = parents.find("[field-name]");
          if (inputValue.length > 0) {
            let quantity = $(elm).val();
            if (quantity) {
              if (elm.max > 0 && parseInt(quantity) > elm.max) {
                quantity = elm.max;
              }

              if (elm.min > 0 && parseInt(quantity) < elm.min) {
                quantity = elm.min;
              }

              $(elm).val(quantity);
            } else {
              quantity = elm.min > 0 ? elm.min : 1;
            }
            await createAvisContainerHidden(
              elemOptionAvisContainer,
              productId,
              inputValue.attr("field-name"),
              quantity,
              inputValue,
              "",
              true,
              elm
            );
          }

          e._createTotalAdd(elemOptionAvisContainer, productId);
        }
      },
      _createQuantity: function (
        elemOptionAvisContainer,
        productId,
        valueElement,
        min,
        max,
        quantityDefault = -1
      ) {
        if (!quantityDefault) quantityDefault = -1;
        let elemInput = document.createElement("INPUT");
        min = min ? min : 1;
        elemInput.setAttribute("type", "number");
        elemInput.setAttribute("disabled", "disabled");
        elemInput.classList.add("avp-qty-input");
        if (min) {
          min = parseInt(min);
          elemInput.setAttribute("min", min);
        }
        if (max) {
          max = parseInt(max);
          elemInput.setAttribute("max", max);
          if (quantityDefault > max) quantityDefault = max;
        }
        elemInput.setAttribute(
          "value",
          quantityDefault > min ? quantityDefault : min
        );

        elemInput.removeEventListener("input", (event) => {
          e._handleChangeQuantity(event, elemOptionAvisContainer, productId);
        });
        elemInput.addEventListener("input", (event) => {
          e._handleChangeQuantity(event, elemOptionAvisContainer, productId);
        });
        let elemInputJq = window.AP_POptions.$(elemInput);
        elemInputJq.on("keypress", function (e) {
          var t = String.fromCharCode(e.which);
          return Boolean(t.match(/[0-9]/));
        });

        elemInputJq.on("blur", function (e) {
          let elm = e?.currentTarget;
          if (!elm?.value) {
            let quantity = 1;
            let min = elm.getAttribute("min");
            if (min && parseInt(min) > 0) quantity = min;
            elm.value = quantity;
          }
        });

        let buttonCut = window.AP_POptions.$("<button></button>")
          .addClass("avp-qty-button")
          .addClass("avp-qty-cut")
          .attr({ disabled: "disabled" })
          .html(`<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" role="presentation" class="icon icon-minus" fill="none" viewBox="0 0 10 2">
  <path fill-rule="evenodd" clip-rule="evenodd" d="M.5 1C.5.7.7.5 1 .5h8a.5.5 0 110 1H1A.5.5 0 01.5 1z" color="#7b3700">
</path></svg>`);
        buttonCut.on("click", async function (event) {
          event.preventDefault();
          let parents = $(this).parents(".avp-value-grid");
          if (parents.length > 0) {
            let inputValue = parents.find("[field-name]");
            if (inputValue.length > 0) {
              let inputQuantity = parents.find(".avp-qty-input");
              if (inputQuantity.length > 0) {
                let quantity = inputQuantity.val();
                if (!quantity) quantity = 1;
                quantity = parseInt(quantity) - 1;
                if (quantity <= parseInt(min)) {
                  quantity = min;
                  $(this).attr({ disabled: "disabled" });
                }
                inputQuantity.val(quantity);
                await createAvisContainerHidden(
                  elemOptionAvisContainer,
                  productId,
                  inputValue.attr("field-name"),
                  quantity,
                  inputValue,
                  "",
                  true
                );
              }
            }

            e._createTotalAdd(elemOptionAvisContainer, productId);
          }
        });
        let buttonAdd = window.AP_POptions.$("<button></button>")
          .addClass("avp-qty-button")
          .addClass("avp-qty-add")
          .attr({ disabled: "disabled" })
          .html(`<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" role="presentation" class="icon icon-plus" fill="none" viewBox="0 0 10 10">
  <path fill-rule="evenodd" clip-rule="evenodd" d="M1 4.51a.5.5 0 000 1h3.5l.01 3.5a.5.5 0 001-.01V5.5l3.5-.01a.5.5 0 00-.01-1H5.5L5.49.99a.5.5 0 00-1 .01v3.5l-3.5.01H1z" color="#7b3700">
</path></svg>`);

        buttonAdd.on("click", async function (event) {
          event.preventDefault();
          let parents = $(this).parents(".avp-value-grid");
          if (parents.length > 0) {
            let inputValue = parents.find("[field-name]");
            if (inputValue.length > 0) {
              let inputQuantity = parents.find(".avp-qty-input");
              if (inputQuantity.length > 0) {
                let quantity = inputQuantity.val();
                if (!quantity) quantity = 1;
                quantity = parseInt(quantity) + 1;
                if (max && quantity >= parseInt(max)) {
                  quantity = max;
                  $(this).attr({ disabled: "disabled" });
                }
                inputQuantity.val(quantity);
                await createAvisContainerHidden(
                  elemOptionAvisContainer,
                  productId,
                  inputValue.attr("field-name"),
                  quantity,
                  inputValue,
                  "",
                  true
                );
              }
            }

            e._createTotalAdd(elemOptionAvisContainer, productId);
          }
        });

        let qtyWrapper = window.AP_POptions.$("<div></div>")
          .addClass("avp-qty-wrapper")
          .append(buttonCut)
          .append(elemInputJq)
          .append(buttonAdd);
        let result = window.AP_POptions.$("<div></div>")
          .addClass("avp-value-grid")
          .append(
            window.AP_POptions.$("<div></div>")
              .addClass("avp-value-grid-item")
              .append(valueElement)
          )
          .append(
            window.AP_POptions.$("<div></div>")
              .addClass("avp-value-grid-item")
              .append(qtyWrapper)
          );
        return result;
      },
      _createRadioButton: function (
        elemOptionAvisContainer,
        productId,
        option,
        t,
        n,
        i,
        quantityDefault,
        isOnlyUrl
      ) {
        function genVariantTitleHtml(a) {
          $(document).ready(function () {
            var label = $(a)
              .closest(".ap-options__swatch-container")
              .find(".avp-option-title");

            var variantTitleHtml = "";
            if ($(a).prop("checked")) {
              variantTitleHtml = $(a)
                .parent()
                .find(".swatch-variant-title")
                .clone()
                .prepend("| ")
                .css({
                  fontStyle: "normal",
                  fontWeight: "normal",
                  display: "inline-block",
                })
                .prop("outerHTML");
            }

            label.html(
              `${option?.label_product}${(option?.required ? `<div class="avp-required">*</div>` : " ") +
              variantTitleHtml
              }`
            );
          });
        }
        var o = priceMod.getValueText(t, option),
          r = window.AP_POptions.$("<input/>")
            .attr("type", "radio")
            .attr("field-name", option.label_cart)
            .attr(
              "name",
              isNotUseAvisHidden
                ? `properties[${option?.label_cart}]`
                : option?.label_cart
            )
            .attr("value", o.value)
            .attr("autocomplete", "off")
            .addClass("avp-productoptiontextcolor")
            .addClass("avp-productoptionbackground")
            .on("click", async function (t, n) {
              if (isOnlyUrl) {
                t.target
                  ?.closest("label")
                  ?.querySelector(".apo-swatch-url")
                  ?.click();
                return;
              }
              if (
                priceModAll[productId].radioInput &&
                priceModAll[productId].radioInput[option.label_cart] &&
                priceModAll[productId].radioInput[option.label_cart].value ===
                t.target.value
              ) {
                if (
                  window.ap_front_settings.shop_id === "67366289656" &&
                  (option?.type === "radio" || option?.type === "button_single")
                ) {
                } else $(this).prop("checked", false);

                if (
                  option.type.indexOf("swatch") > -1 &&
                  (option.hidden_variant_title != null &&
                    option.hidden_variant_title !== undefined
                    ? option?.hidden_variant_title
                    : customizeryConfig?.customize_options?.swatch
                      ?.hidden_variant_title)
                ) {
                  genVariantTitleHtml(this);
                }
                await createAvisContainerHidden(
                  elemOptionAvisContainer,
                  productId,
                  option.label_cart,
                  "",
                  $(this)
                );
                priceModAll[productId].radioInput[option.label_cart].value = "";
                eventApi.fieldChange({
                  name: option.label_cart,
                  value: "",
                  element: $(this).closest("div"),
                });
                i(t);

                let spanRequired = $(this).closest(
                  "span[data-required='true']"
                );
                if (spanRequired && spanRequired.length) {
                  window.AP_POptions.apps.productoptions.toggleInputError(
                    spanRequired,
                    !0
                  );
                }

                e._createTotalAdd(elemOptionAvisContainer, productId);
              }

              findButtonAddCart(elemOptionAvisContainer, productId);
            })
            .on("change", async function (t, n) {
              if (isOnlyUrl) return;
              n ||
                eventApi.fieldChange({
                  name: option.label_cart,
                  value: t.target.value,
                  element: $(this).closest("div"),
                }),
                i(t);

              if (
                option.type.indexOf("swatch") > -1 &&
                (option.hidden_variant_title != null &&
                  option?.hidden_variant_title !== undefined
                  ? option?.hidden_variant_title
                  : customizeryConfig?.customize_options?.swatch
                    ?.hidden_variant_title)
              ) {
                genVariantTitleHtml(this);
              }
              if ($(this).prop("checked")) {
                if (
                  t.currentTarget.closest(".avp-productoptionswatchwrapper") &&
                  t.currentTarget.closest(".apo-custom-wrapper")
                ) {
                  let imgSelector = t.currentTarget
                    .closest(".avp-productoptionswatchwrapper")
                    .querySelector(".avp-productoptionswatch");
                  if (imgSelector && imgSelector.getAttribute("data-src")) {
                    let src = imgSelector.getAttribute("data-src");
                    let mainImageSelector = t.currentTarget
                      .closest(".apo-custom-wrapper")
                      .querySelector(".apo-main-image");
                    mainImageSelector.setAttribute("src", src);
                  }
                }
                priceModAll[productId].radioInput[option.label_cart] = {
                  value: t.target.value,
                };
                await createAvisContainerHidden(
                  elemOptionAvisContainer,
                  productId,
                  option.label_cart,
                  t.target.value,
                  $(this)
                );
              } else {
                priceModAll[productId].radioInput[option.label_cart] = {
                  value: "",
                };
                await createAvisContainerHidden(
                  elemOptionAvisContainer,
                  productId,
                  option.label_cart,
                  "",
                  $(this)
                );
              }

              let spanRequired = $(this).closest("span[data-required='true']");
              if (spanRequired && spanRequired.length) {
                window.AP_POptions.apps.productoptions.toggleInputError(
                  spanRequired,
                  !0
                );
              }

              e._createTotalAdd(elemOptionAvisContainer, productId);
              findButtonAddCart(elemOptionAvisContainer, productId);
            });

        if (isNotUseAvisHidden && option.required)
          r.attr("required", "required");

        let valueWrapper = null;
        if (n) {
          let valueElement = window.AP_POptions.$("<label></label>")
            .addClass("avp-productoptioncheckwrapper")
            .addClass(
              `avp-productoptioncheckwrapper${customizeryConfig?.customize_options?.radio_btn?.shape ===
                "pill" || option.type === "button_single"
                ? " avp-pilloptioncheckwrapper"
                : ""
              }`
            )
            .append(
              priceMod.attachData(
                r,
                option.label_cart,
                t,
                o.display,
                option,
                productId
              )
            )
            .append(o.display);
          if (option.show_option_value_qty) {
            valueWrapper = e._createQuantity(
              elemOptionAvisContainer,
              productId,
              valueElement,
              option.min_value_qty,
              option.max_value_qty,
              quantityDefault
            );
          } else valueWrapper = valueElement;
        }
        ((customizeryConfig?.customize_options?.radio_btn?.shape === "pill"
          || option.type === "button_single") &&
          r.css({ display: "none" }));
        return n ? valueWrapper : r;
      },
      _createCheckboxButton: function (
        elemOptionAvisContainer,
        productId,
        option,
        t,
        n,
        valueDefault,
        quantityDefault
      ) {
        var i = priceMod.getValueText(t, option),
          o = window.AP_POptions.$("<input/>")
            .attr("type", "checkbox")
            .attr("value", i.value)
            .attr("field-name", option.label_cart)
            .attr("autocomplete", "off")
            .attr("name", isNotUseAvisHidden ? `properties[${option?.label_cart}]` : option?.label_cart)
            .addClass("avp-productoptiontextcolor")
            .addClass("avp-productoptionbackground");

        (customizeryConfig?.customize_options?.checkbox?.shape === "pill"
          || option.type === "button_multi") &&
          o.css({ display: "none" });

        if (valueDefault) o.attr("checked", "checked");
        let valueWrapper = null;
        if (n) {
          let valueElement = window.AP_POptions.$("<label></label>")
            .addClass("avp-productoptioncheckwrapper")
            .addClass(
              `avp-productoptioncheckwrapper${customizeryConfig?.customize_options?.checkbox?.shape === "pill"
                || option.type === "button_multi"
                ? " avp-pilloptioncheckwrapper"
                : ""
              }`
            )
            .append(
              priceMod.attachData(
                o,
                option.label_cart,
                t,
                i.display,
                option,
                productId
              )
            )
            .append(i.display);
          if (option.show_option_value_qty) {
            valueWrapper = e._createQuantity(
              elemOptionAvisContainer,
              productId,
              valueElement,
              option.min_value_qty,
              option.max_value_qty,
              quantityDefault
            );
          } else valueWrapper = valueElement;
        }

        return n ? valueWrapper : o;
      },
      _createSelectMenu: function (
        elemOptionAvisContainer,
        productId,
        t,
        n,
        i,
        o,
        r,
        optionDefaultValues,
        option
      ) {
        var a = window.AP_POptions.$('<div class="avp-select"></div>'),
          result = null,
          s = window.AP_POptions.$(
            '<select class="avp-productdescfont avp-productoptiontextcolor avp-productoptionbackground"></select>'
          )
            .attr("id", r)
            .attr("name", isNotUseAvisHidden ? `properties[${t}]` : t)
            .attr("autocomplete", "off")
            .attr("field-name", t);
        let isOnlyUrl =
          option.option_url === OPTION_URL.group ||
          option.option_url === OPTION_URL.only;
        if ((o && s.attr("required", "required"), void 0 !== i && "" !== i)) {
          if (
            navigator.userAgent.toLowerCase().indexOf("firefox") > -1 &&
            !e.ffCssFix
          ) {
            var p = ".avp-select select:invalid { box-shadow: none; }",
              c = document.head || document.getElementsByTagName("head")[0],
              l = document.createElement("style");
            (l.type = "text/css"),
              l.styleSheet
                ? (l.styleSheet.cssText = p)
                : l.appendChild(document.createTextNode(p)),
              c.appendChild(l),
              (e.ffCssFix = !0);
          }

          s.append(
            window.AP_POptions.$("<option>")
              .text(i)
              .attr("value", "")
              .attr("disabled", "true")
              .attr("selected", !0)
          );
        }

        let optionDefaultSelected = null;
        let isOptionUrlSelected = false;
        return (
          n &&
          n.length &&
          (window.AP_POptions.$.each(n, function (e, n) {
            let valueDefault = false;
            if (
              optionDefaultValues &&
              optionDefaultValues.indexOf(n["value_id"]) > -1
            ) {
              valueDefault = true;
            }

            let valueUrl = n?.url?.trim();
            var i = priceMod.getValueText(n, option),
              o = window.AP_POptions.$("<option></option>")
                .attr("value", i.value)
                .attr("apo-url", valueUrl && isOnlyUrl ? valueUrl : "")
                .html(i.display);
            if (valueDefault) optionDefaultSelected = o;

            let handle = valueUrl?.split("/")?.pop();
            if (
              isOnlyUrl &&
              handle ===
              window.ap_front_settings?.product_info?.product?.handle
            ) {
              o.attr("selected", true);
              isOptionUrlSelected = true;
            }
            s.append(
              priceMod.attachData(o, t, n, i.display, option, productId)
            );
          }),
            !isOptionUrlSelected && optionDefaultSelected
              ? optionDefaultSelected.attr("selected", true)
              : "",
            // s.prop("field-name", t),
            // s.prop("name", t),
            s.on("change", async function (event, n) {
              if (isOnlyUrl) {
                let urlHref =
                  event?.target?.selectedOptions[0]?.getAttribute("apo-url");
                if (urlHref) {
                  let handle = urlHref?.split("/")?.pop();
                  if (
                    handle !==
                    window.ap_front_settings?.product_info?.product?.handle
                  ) {
                    location.href = urlHref;
                  }
                }

                return;
              }
              window.AP_POptions.apps.productoptions.toggleInputError(s, !0),
                n ||
                eventApi.fieldChange({
                  name: t,
                  value: event.target.value,
                  element: $(this).closest("div:not(.avp-select)"),
                });
              var i = $("option", s);
              priceMod.variantChange(t, i, productId);
              await createAvisContainerHidden(
                elemOptionAvisContainer,
                productId,
                t,
                event.target.value,
                s
              );
              e._createTotalAdd(elemOptionAvisContainer, productId);
              findButtonAddCart(elemOptionAvisContainer, productId);
            })),
          a.append(s),
          (result = option.show_option_value_qty
            ? e._createQuantity(
              elemOptionAvisContainer,
              productId,
              a,
              option.min_value_qty,
              option.max_value_qty
            )
            : a),
          s.trigger("change", ["onLoad"]),
          result
        );
      },
      _createSelectSwatch: function (
        elemOptionAvisContainer,
        productId,
        option
      ) {
        let fieldName = option?.label_cart;
        let quantityDefault = 1;
        let isOnlyUrl =
          option.option_url === OPTION_URL.group ||
          option.option_url === OPTION_URL.only;
        function genValuesHtml() {
          let valuesHtml = "";
          if (option?.option_values && option?.option_values.length > 0) {
            let index = 0;
            let existDefault = false;
            let isFirstValueDefault = false;
            let firstValuesHtml = "";
            for (let optionValue of option?.option_values) {
              let isColor = option.type === "swatch_select_color";
              let styleBox = isColor
                ? `background:${optionValue.swatch.color};`
                : "background-image: url('" +
                (optionValue.swatch.file_image_url
                  ? optionValue.swatch.file_image_url
                  : optionValue.url_image) +
                "');";

              let classHiddenSwatchTitle = priceMod.classHiddenSwatchTitle(
                priceMod.isHiddenSwatchTitle(option)
              );

              var valueText = priceMod.getValueText(optionValue, option);
              let isDefault = false;
              if (option?.is_option_default_value) {
                let optionDefaultValue = option?.option_default_value;
                if (optionDefaultValue?.indexOf(optionValue.value_id) > -1) {
                  isDefault = true;
                  existDefault = true;

                  if (index === 0) isFirstValueDefault = true;
                } else if (optionDefaultValue) {
                  let arrValue = optionDefaultValue.split(" * ");
                  let newValue = arrValue[0].trim();
                  if (optionValue.value.trim() === newValue) {
                    isDefault = true;
                    existDefault = true;
                    if (index === 0) isFirstValueDefault = true;
                    if (arrValue.length > 1)
                      quantityDefault = parseInt(arrValue[1]);
                  }
                }
              }

              let swatchValueItem = `<div class="option-avis-swatch-value-box" data-style="${styleBox}" style="${styleBox}">&nbsp;</div>
                                        <div class="option-avis-swatch-value-title ${classHiddenSwatchTitle}">${typeof valueText?.display === "string"
                  ? valueText?.display
                  : valueText?.display[0]?.innerHTML
                }</div>`;
              let valueUrl = "";
              if (isOnlyUrl) {
                valueUrl = optionValue?.url?.trim();
                if (valueUrl && isOnlyUrl) {
                  swatchValueItem = `<a class="apo-swatch-url" href="${valueUrl}">${swatchValueItem}</a>`;
                }
              }
              if (index === 0) {
                firstValuesHtml = `<li class="option-avis-value">
                                <input id="avis-value-${index}" type="radio" data-index="${index}" data-apo-url='${valueUrl}' name='${fieldName}' field-name="${fieldName}" @@checked@@ value="${valueText?.value}"><label class="option-avis-swatch-value-label" for="avis-value-${index}">
                ${swatchValueItem}
                </label>
                              </li>`;
              } else {
                valuesHtml += `<li class="option-avis-value">
                                <input id="avis-value-${index}" type="radio" data-index="${index}" data-apo-url='${valueUrl}' name='${fieldName}' field-name="${fieldName}" ${isDefault ? "checked" : ""
                  } value="${valueText?.value}">
                <label class="option-avis-swatch-value-label" for="avis-value-${index}">
                ${swatchValueItem}
                </label>
                              </li>`;
              }

              if (index === option.option_values.length - 1) {
                if (option?.placeholder) {
                  firstValuesHtml = firstValuesHtml.replace("@@checked@@", "");
                  valuesHtml = `<li class="option-avis-value">
                                    <input id="avis-value--1" type="radio" data-index="-1" name='${fieldName}' ${existDefault ? "" : "checked"
                    } field-name="${fieldName}" value="">
                                    <label class="option-avis-swatch-value-label" for="avis-value--1">
                                      <div class="option-avis-swatch-value-box" data-style="display:none" style="display:none">&nbsp;</div>
                                      <div class="option-avis-swatch-value-title avis-drop-value-placeholder">${option?.placeholder
                    }</div>
                                    </label>
                                  </li>
                                  ${firstValuesHtml}
                                  ${valuesHtml}`;
                } else {
                  firstValuesHtml = firstValuesHtml.replace(
                    "@@checked@@",
                    existDefault && !isFirstValueDefault ? "" : "checked"
                  );
                  valuesHtml = `${firstValuesHtml}
                                ${valuesHtml}`;
                }
              }
              index++;
            }
          }
          return valuesHtml;
        }
        let wrapperSelector = document.createElement("div");
        wrapperSelector.classList.add("option-avis-dropdown-inner");
        let html = `<div class="option-avis-swatch-drop-down">
                        <span class="option-avis-dropdown-view-value ">
                          <div class="option-avis-swatch-value-box" style="${option?.placeholder
            ? "display:none;"
            : "background-color:transparent;"
          }" ></div>
                          <div class="option-avis-swatch-value-title">${option?.placeholder ? option?.placeholder : ""
          }</div>
                        </span>
                        <span class="option-avis-arrow-select"></span>
                    </div>
                    <ul class="option-avis-dropdown-values" style="display: none;">
                      ${genValuesHtml()}
                    </ul>`;

        wrapperSelector.innerHTML = html;
        let selectedSelector = wrapperSelector.querySelector(
          ".option-avis-swatch-drop-down"
        );
        let ulSelector = wrapperSelector.querySelector(
          "ul.option-avis-dropdown-values"
        );
        document.addEventListener("click", function () {
          if ("block" == getComputedStyle(ulSelector).display) {
            Object(priceMod.toggleSelector)(ulSelector);
          }
        });
        selectedSelector.addEventListener("click", function (e) {
          e.preventDefault(),
            e.stopPropagation(),
            Object(priceMod.toggleSelector)(
              selectedSelector.nextElementSibling
            );
        });

        !isOnlyUrl &&
          ulSelector
            .querySelectorAll("li.option-avis-value")
            .forEach(function (t) {
              t.addEventListener("click", function (e) {
                e.preventDefault();
                e.stopPropagation();
                Object(priceMod.toggleSelector)(ulSelector);
                t.querySelector('input[type="radio"]').checked = true;
                t.querySelector('input[type="radio"]').dispatchEvent(
                  new CustomEvent("change")
                );
              });

              let inputSelector = t.querySelector("input");
              inputSelector.addEventListener("change", async function (event) {
                event.preventDefault();
                event.stopPropagation();

                let spanRequired = $(this).closest("div[data-required='true']");
                if (spanRequired && spanRequired.length) {
                  window.AP_POptions.apps.productoptions.toggleInputError(
                    spanRequired,
                    !0
                  );
                }

                let listInput = [];
                ulSelector
                  .querySelectorAll("li.option-avis-value input")
                  .forEach((item) => {
                    listInput.push($(item));
                  });
                let selectedText = wrapperSelector.querySelector(
                  ".option-avis-dropdown-view-value .option-avis-swatch-value-title"
                );
                let selectedBox = wrapperSelector.querySelector(
                  ".option-avis-dropdown-view-value .option-avis-swatch-value-box"
                );

                let liSelector = event.target.closest(".option-avis-value");
                if (liSelector) {
                  if (selectedText) {
                    selectedText.innerHTML = liSelector.querySelector(
                      ".option-avis-swatch-value-title"
                    )?.innerHTML;
                  }

                  if (selectedBox) {
                    selectedBox.setAttribute(
                      "style",
                      liSelector.querySelector(".option-avis-swatch-value-box")
                        ?.dataset?.style
                    );
                  }
                }

                if (isOnlyUrl) {
                  return;
                }

                priceMod.variantChange(fieldName, listInput, productId);
                await createAvisContainerHidden(
                  elemOptionAvisContainer,
                  productId,
                  fieldName,
                  event.target.value,
                  $(this)
                );
                e._createTotalAdd(elemOptionAvisContainer, productId);
              });

              if (
                inputSelector.dataset.index > -1 &&
                inputSelector.dataset.index < option.option_values.length
              ) {
                let textSelector = t.querySelector(
                  ".option-avis-swatch-value-title"
                );
                priceMod.attachData(
                  inputSelector,
                  fieldName,
                  option.option_values[inputSelector.dataset.index],
                  textSelector.innerHTML,
                  option,
                  productId
                );
              }
            });

        let result = $(wrapperSelector);
        if (option.show_option_value_qty) {
          result = e._createQuantity(
            elemOptionAvisContainer,
            productId,
            $(wrapperSelector),
            option.min_value_qty,
            option.max_value_qty,
            quantityDefault
          );
        }

        if (isOnlyUrl) {
          for (let inputSelector of ulSelector.querySelectorAll(
            "li.option-avis-value input[data-apo-url]"
          )) {
            let urlHref = inputSelector?.getAttribute("data-apo-url");
            if (urlHref) {
              let handle = urlHref?.split("/")?.pop();
              if (
                handle ===
                window.ap_front_settings?.product_info?.product?.handle
              ) {
                let selectedText = wrapperSelector.querySelector(
                  ".option-avis-dropdown-view-value .option-avis-swatch-value-title"
                );
                let selectedBox = wrapperSelector.querySelector(
                  ".option-avis-dropdown-view-value .option-avis-swatch-value-box"
                );

                let liSelector = inputSelector.closest(".option-avis-value");
                if (liSelector) {
                  if (selectedText) {
                    selectedText.innerHTML = liSelector.querySelector(
                      ".option-avis-swatch-value-title"
                    )?.innerHTML;
                  }

                  if (selectedBox) {
                    selectedBox.setAttribute(
                      "style",
                      liSelector.querySelector(".option-avis-swatch-value-box")
                        ?.dataset?.style
                    );
                  }
                }

                inputSelector.checked = true;
                break;
              }
            }
          }
        } else {
          let inputChecked = wrapperSelector.querySelector(":checked");
          if (inputChecked) {
            inputChecked.dispatchEvent(new CustomEvent("change"));
          }
        }
        return result;
      },
      _createHiddenInput: function (
        elemOptionAvisContainer,
        productId,
        e,
        isProperty = false
      ) {
        let newFieldName = e?.replaceAll('"', "&quot;");
        var t = window.AP_POptions.$("<input />")
          .attr("type", "hidden")
          .attr("name", isProperty ? "properties[" + e + "]" : e);
        if (!isProperty) {
          t.attr("field-name", e);
        } else t.attr("temp-name", newFieldName);

        if (!isProperty) {
          createAvisContainerHidden(elemOptionAvisContainer, productId, e, "");
        }

        return t;
      },
      handleChangeElement: function (
        elemOptionAvisContainer,
        productId,
        event,
        maxLength,
        minLength,
        textTransform
      ) {
        event.preventDefault();
        var elm = event.target;
        var config = window.AP_POptions.apps.productoptions;
        var allowValue = elm.getAttribute("data-allow-value");
        var labelCart = elm.getAttribute("field-name");
        var value = elm.value;
        maxLength &&
          value.length > maxLength &&
          ((value = value.substr(0, maxLength)), (elm.value = value));
        minLength &&
          value.length < minLength &&
          ((value = value.substr(0, minLength)), (elm.value = value));
        if (allowValue && value) {
          if (
            allowValue == "only_letters" &&
            config.allowedValueLetterRegex.test(value)
          ) {
          } else if (
            allowValue == "only_letters_and_numbers" &&
            config.allowedValueLetterNumberRegex.test(value)
          ) {
          } else config.toggleInputError($(elm), !0);
        } else config.toggleInputError($(elm), !0);

        if (value && textTransform && textTransform === "Uppercase")
          value = value.toLocaleUpperCase();
        if (value && textTransform && textTransform === "Lowercase")
          value = value.toLocaleLowerCase();
        if (value && textTransform && textTransform === "Capitalize") {
          let words = value.split(" ");
          for (let index in words) {
            words[index] =
              words[index][0].toUpperCase() + words[index].substr(1);
          }
          value = words.join(" ");
        }

        var parent = elm.closest(".apo-text-field");
        if (parent) {
          let counterLetter = parent.querySelector(".apo-counter-input");
          if (counterLetter) {
            counterLetter.innerHTML = value.length;
          }

          priceMod.variantChange(
            labelCart,
            [$(parent)],
            productId,
            elemOptionAvisContainer
          );
        } else {
          priceMod.variantChange(
            labelCart,
            [$(elm)],
            productId,
            elemOptionAvisContainer
          );
        }
        createAvisContainerHidden(
          elemOptionAvisContainer,
          productId,
          labelCart,
          value
        );

        findButtonAddCart(elemOptionAvisContainer, productId);
      },

      handleChangeElementPhone: function (
        elemOptionAvisContainer,
        productId,
        event
      ) {
        const elm = event.target;
        const labelCart = elm.getAttribute("field-name");
        const input = document.getElementById(elm.id);
        const phoneInput = window.apoPhoneInputGlobals
          .getInstance(input)
          .getNumber();

        var parent = elm.closest(".apo-text-field");

        if (parent) {
          priceMod.variantChange(
            labelCart,
            [$(parent)],
            productId,
            elemOptionAvisContainer
          );
        } else {
          priceMod.variantChange(
            labelCart,
            [$(elm)],
            productId,
            elemOptionAvisContainer
          );
        }

        createAvisContainerHidden(
          elemOptionAvisContainer,
          productId,
          elm.getAttribute("field-name"),
          phoneInput
        );
        findButtonAddCart(elemOptionAvisContainer, productId);
      },

      _createTextInput: function (
        elemOptionAvisContainer,
        productId,
        labelCart,
        valueDefault,
        placeholder,
        maxLength,
        minLength,
        required,
        id,
        allowValue,
        textTransform
      ) {
        maxLength =
          maxLength && parseInt(maxLength, 10) > 0
            ? parseInt(maxLength, 10)
            : 0;
        minLength =
          minLength && parseInt(minLength, 10) > 0
            ? parseInt(minLength, 10)
            : 0;
        var elemInput = document.createElement("INPUT");
        elemInput.setAttribute("type", "text");
        elemInput.setAttribute("field-name", labelCart);
        elemInput.setAttribute(
          "name",
          isNotUseAvisHidden ? `properties[${labelCart}]` : labelCart
        );
        elemInput.setAttribute("id", id);
        elemInput.setAttribute("autocomplete", "off");

        elemInput.classList.add("avp-productdescfont");
        elemInput.classList.add("avp-productoptiontextcolor");
        elemInput.classList.add("avp-productoptionbackground");

        if (textTransform && textTransform === "Uppercase")
          elemInput.classList.add("avp-text-transform-uppercase");
        if (textTransform && textTransform === "Lowercase")
          elemInput.classList.add("avp-text-transform-lowercase");
        if (textTransform && textTransform === "Capitalize")
          elemInput.classList.add("avp-text-transform-capitalize");

        elemInput.removeEventListener("input", (event) =>
          e.handleChangeElement(
            elemOptionAvisContainer,
            productId,
            event,
            maxLength,
            minLength,
            textTransform
          )
        );
        elemInput.addEventListener("input", (event) => {
          e.handleChangeElement(
            elemOptionAvisContainer,
            productId,
            event,
            maxLength,
            minLength,
            textTransform
          );
        });

        if (shop_id === "77859357001") {
          elemInput.addEventListener("change", (event) => {
            e.handleChangeElement(
              elemOptionAvisContainer,
              productId,
              event,
              maxLength,
              minLength,
              textTransform
            );
          });
        }

        var textField = document.createElement("span");
        textField.classList.add("apo-text-field");
        textField.appendChild(elemInput);
        if (maxLength && maxLength > 0) {
          const counterLetter = document.createElement("span");
          counterLetter.classList.add("apo-counter-letter");
          var countText = valueDefault
            ? valueDefault.length
            : elemInput.value.length;
          counterLetter.innerHTML = `<span class="apo-counter-input">${countText}</span>/${maxLength}`;
          textField.appendChild(counterLetter);
          elemInput.style.paddingRight = "60px";
        }

        if (minLength && minLength > 0) {
          const minLetter = document.createElement("span");
          minLetter.classList.add("apo-min-letter");
          minLetter.innerHTML = `Type at least ${minLength} characters`;
          textField.appendChild(minLetter);
        }

        let elemInputJq = window.AP_POptions.$(elemInput);
        return (
          void 0 !== placeholder &&
          "" !== placeholder &&
          elemInputJq.prop("placeholder", placeholder),
          maxLength &&
          elemInputJq.prop({ maxlength: maxLength, size: maxLength }),
          minLength && elemInputJq.prop({ minLength: minLength }),
          required && elemInputJq.prop("required", required),
          allowValue &&
          allowValue != "default" &&
          elemInputJq.attr("data-allow-value", allowValue),
          void 0 !== valueDefault &&
          "" !== valueDefault &&
          elemInputJq.val(valueDefault),
          createAvisContainerHidden(
            elemOptionAvisContainer,
            productId,
            labelCart,
            valueDefault
          ),
          $(textField)
        );
      },

      _createPhoneInput: function (
        elemOptionAvisContainer,
        productId,
        labelCart,
        valueDefault,
        placeholder,
        isRequired,
        valueCountry,
        id
      ) {
        var elemInput = document.createElement("INPUT");
        elemInput.setAttribute("type", "text");
        elemInput.setAttribute("field-name", labelCart);
        elemInput.setAttribute(
          "name",
          isNotUseAvisHidden ? `properties[${labelCart}]` : labelCart
        );
        elemInput.setAttribute("id", id);
        elemInput.setAttribute("autocomplete", "off");

        elemInput.classList.add("avp-productdescfont");
        elemInput.classList.add("avp-productoptiontextcolor");
        elemInput.classList.add("avp-productoptionbackground");

        if (isRequired) elemInput.setAttribute("required", isRequired);

        elemInput.removeEventListener("input", (event) =>
          e.handleChangeElementPhone(elemOptionAvisContainer, productId, event)
        );
        elemInput.addEventListener("input", (event) => {
          e.handleChangeElementPhone(elemOptionAvisContainer, productId, event);
        });

        var textField = document.createElement("span");
        textField.classList.add("apo-text-field");
        textField.appendChild(elemInput);

        let phoneInput = window.apoPhoneInput(elemInput, {
          initialCountry: valueCountry
            ? valueCountry.toLocaleLowerCase().trim()
            : "us",
          utilsScript:
            "https://cdn.jsdelivr.net/npm/intl-tel-input@21.0.8/build/js/utils.js",
          showSelectedDialCode: true,
          customPlaceholder: function (selectedCountryPlaceholder) {
            return placeholder ? placeholder : selectedCountryPlaceholder;
          },
        });

        elemInput.addEventListener("keyup", () => {
          let isValid = phoneInput.isValidNumberPrecise();
          if (isValid) {
            elemInput.classList.remove("invalid-phone-number");
          } else {
            elemInput.classList.add("invalid-phone-number");
          }
        });

        elemInput.addEventListener("keydown", function (event) {
          // Allow backspace, delete, tab, escape, enter, and arrow keys
          const allowedKeys = [
            "Backspace",
            "Delete",
            "Tab",
            "Escape",
            "Enter",
            "ArrowLeft",
            "ArrowRight",
            "ArrowUp",
            "ArrowDown",
            "Decimal",
          ];
          if (
            allowedKeys.includes(event.key) ||
            // Allow shortcuts: Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X, Command+A/C/V/X
            ((event.key === "a" ||
              event.key === "c" ||
              event.key === "v" ||
              event.key === "x") &&
              (event.ctrlKey || event.metaKey))
          ) {
            // Let it happen, don't do anything
            return;
          }
          // Ensure that it is a number and stop the keypress
          if (!event.key.match(/^\d$/)) {
            event.preventDefault();
          }
        });

        return (
          createAvisContainerHidden(
            elemOptionAvisContainer,
            productId,
            labelCart,
            valueDefault
          ),
          $(textField)
        );
      },

      _createTextArea: function (
        elemOptionAvisContainer,
        productId,
        labelCart,
        t,
        n,
        maxLength,
        o,
        r,
        textTransform,
        minLength
      ) {
        maxLength =
          maxLength && parseInt(maxLength, 10) > 0
            ? parseInt(maxLength, 10)
            : 0;
        minLength =
          minLength && parseInt(minLength, 10) > 0
            ? parseInt(minLength, 10)
            : 0;
        var a = window.AP_POptions.$("<textarea>")
          .attr("field-name", labelCart)
          .attr(
            "name",
            isNotUseAvisHidden ? `properties[${labelCart}]` : labelCart
          )
          .attr("id", r)
          .attr("autocomplete", "off")
          .addClass("avp-productdescfont")
          .addClass("avp-productoptiontextcolor")
          .addClass("avp-productoptionbackground");

        if (textTransform && textTransform === "Uppercase")
          a.addClass("avp-text-transform-uppercase");
        if (textTransform && textTransform === "Lowercase")
          a.addClass("avp-text-transform-lowercase");
        if (textTransform && textTransform === "Capitalize")
          a.addClass("avp-text-transform-capitalize");

        var textField = window.AP_POptions.$("<span>")
          .addClass("apo-text-field")
          .append(a);
        if (maxLength && maxLength > 0) {
          const counterLetter = document.createElement("span");
          counterLetter.classList.add("apo-counter-letter");
          counterLetter.classList.add("avp-counter-letters-textarea");
          var countText = t ? t.length : 0;
          counterLetter.innerHTML = `<span class="apo-counter-input">${countText}</span>/${maxLength}`;
          textField[0].appendChild(counterLetter);
        }

        if (minLength && minLength > 0) {
          const minLetter = document.createElement("span");
          minLetter.classList.add("apo-min-letter");
          minLetter.innerHTML = `Type at least ${minLength} characters`;
          textField[0].appendChild(minLetter);
        }

        a[0].removeEventListener("input", (event) =>
          e.handleChangeElement(
            elemOptionAvisContainer,
            productId,
            event,
            maxLength,
            minLength,
            textTransform
          )
        );
        a[0].addEventListener("input", (event) => {
          e.handleChangeElement(
            elemOptionAvisContainer,
            productId,
            event,
            maxLength,
            minLength,
            textTransform
          );
        });

        return (
          void 0 !== t && "" !== t && a.val(t),
          void 0 !== n && "" !== n && a.prop("placeholder", n),
          maxLength && maxLength > 0 && a.prop("max_length", maxLength),
          o && a.prop("required", o),
          createAvisContainerHidden(
            elemOptionAvisContainer,
            productId,
            labelCart,
            a.val()
          ),
          textField
        );
      },
      _createNumberInput: function (
        elemOptionAvisContainer,
        productId,
        e,
        t,
        n,
        i,
        o,
        r,
        a
      ) {
        let labelCart = e;
        var s = window.AP_POptions.$("<input/>")
          .attr("type", "number")
          .attr("step", "any")
          .attr("field-name", e)
          .attr(
            "name",
            isNotUseAvisHidden ? `properties[${labelCart}]` : labelCart
          )
          .attr("id", a)
          .attr("autocomplete", "off")
          .addClass("avp-productdescfont")
          .addClass("avp-productoptiontextcolor")
          .addClass("avp-productoptionbackground");
        void 0 !== t && "" !== t && s.val(t),
          void 0 !== n && "" !== n && s.prop("placeholder", n),
          r && s.prop("required", r),
          s.on("keypress", function (e) {
            var t = String.fromCharCode(e.which);
            return Boolean(t.match(/[0-9\.-]/));
          });
        var p = function (e) {
          (i = parseFloat(i)),
            (o = parseFloat(o)),
            (input = parseFloat(s.val())),
            void 0 !== i &&
            "" !== i &&
            input < i &&
            "keyup" != e.type &&
            s.val(i),
            void 0 !== o && "" !== o && input > o && s.val(o);

          priceMod.variantChange(
            labelCart,
            [s],
            productId,
            elemOptionAvisContainer
          );
        };
        return (
          s.on("keyup", function (x) {
            p(x);
            createAvisContainerHidden(
              elemOptionAvisContainer,
              productId,
              e,
              s.val()
            );
            findButtonAddCart(elemOptionAvisContainer, productId);
          }),
          s.on("blur", function (x) {
            p(x),
              createAvisContainerHidden(
                elemOptionAvisContainer,
                productId,
                e,
                s.val()
              ),
              window.AP_POptions.apps.productoptions.toggleInputError(s, !0);
            findButtonAddCart(elemOptionAvisContainer, productId);
          }),
          createAvisContainerHidden(
            elemOptionAvisContainer,
            productId,
            e,
            s.val()
          ),
          s
        );
      },
      _createDateInput: function (
        elemOptionAvisContainer,
        productId,
        labelCart,
        defaultValue,
        placeholder,
        isRequired,
        idInput
      ) {
        var inputDate = window.AP_POptions.$("<input/>")
          .attr("type", "text")
          .attr("avp-data", "date")
          .attr("step", "any")
          .attr("field-name", labelCart)
          .attr(
            "name",
            isNotUseAvisHidden ? `properties[${labelCart}]` : labelCart
          )
          .attr("id", idInput)
          .attr("autocomplete", "off")
          .attr("placeholder", `${placeholder ? placeholder : ""}`)
          .addClass("avp-productdescfont")
          .addClass("avp-productoptiontextcolor")
          .addClass("avp-productoptionbackground");
        inputDate.prop("readonly", true);
        defaultValue && inputDate.val(defaultValue),
          isRequired && inputDate.prop("required", isRequired),
          inputDate.on("keypress", function (e) {
            var t = String.fromCharCode(e.which);
            return Boolean(t.match(/[0-9\.-]/));
          });
        var eventInput = function (e) { };
        return (
          inputDate.on("change", function (e) {
            eventInput(e);
            priceMod.variantChange(
              labelCart,
              [inputDate],
              productId,
              elemOptionAvisContainer
            );
            createAvisContainerHidden(
              elemOptionAvisContainer,
              productId,
              labelCart,
              $(this).val()
            );
          }),
          // inputDate.on("keyup", function (e) {
          //   eventInput(e);
          //   createAvisContainerHidden(elemOptionAvisContainer, productId, labelCart, $(this).val());
          //   findButtonAddCart(elemOptionAvisContainer, productId);
          // }),
          // inputDate.on("blur", function (e) {
          //   eventInput(e),
          //     window.AP_POptions.apps.productoptions.toggleInputError(
          //       inputDate,
          //       !0
          //     );
          //   createAvisContainerHidden(elemOptionAvisContainer, productId, labelCart, $(this).val());
          //   findButtonAddCart(elemOptionAvisContainer, productId);
          // }),
          createAvisContainerHidden(
            elemOptionAvisContainer,
            productId,
            labelCart,
            inputDate.val()
          ),
          inputDate
        );
      },
      _createColorInput: function (
        elemOptionAvisContainer,
        productId,
        e,
        t,
        i,
        o
      ) {
        let inputColor = $("<input/>")
          .attr("type", "color")
          .attr("avp-data", "color")
          .attr("field-name", e)
          .attr("autocomplete", "off")
          .attr("name", isNotUseAvisHidden ? `properties[${e}]` : e)
          .attr("id", o)
          .addClass("avp-colorpicker");
        var a = window.AP_POptions.$(
          `<div class="apo-maincolorpicker">
              <label class="apo-colorlabel" for="${o}">
                <svg class="apo-icon__color" style="fill: ${t}" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                  <path d="M11 6.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z" />
                  <path d="M7 9a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z" />
                  <path d="M8 11.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z" />
                  <path d="M13 9a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z" />
                  <path fill-rule="evenodd" d="M10 3a7 7 0 0 0 0 14 1.75 1.75 0 0 0 1.75-1.75v-1.5a2 2 0 0 1 2-2h1.5a1.75 1.75 0 0 0 1.75-1.75 7 7 0 0 0-7-7Zm3.75 7.25h1.5a.25.25 0 0 0 .25-.25 5.5 5.5 0 1 0-5.5 5.5.25.25 0 0 0 .25-.25v-1.5a3.5 3.5 0 0 1 3.5-3.5Z" />
                </svg>
                <span class="apo-textvalue">${t ? t : "#000000"}</span>
              </label>
            </div>`
        ).append(inputColor);
        return (
          a.on("change", function () {
            priceMod.variantChange(e, [a], productId, elemOptionAvisContainer);
            createAvisContainerHidden(
              elemOptionAvisContainer,
              productId,
              e,
              inputColor.val()
            );
          }),
          void 0 !== t && "" !== t && inputColor.val(t),
          i && a.prop("required", i),
          createAvisContainerHidden(
            elemOptionAvisContainer,
            productId,
            e,
            inputColor.val()
          ),
          a
        );
      },

      _createFontInput: function (
        elemOptionAvisContainer,
        productId,
        name,
        fontSelected,
        isRequired,
        id
      ) {
        let required = isRequired ? true : false;
        let a = window.AP_POptions.$(
          `<div class="avp-font-dropdown">
            <input type="text" field-name="${name}" name="${isNotUseAvisHidden ? `properties[${name}]` : name
          }" id="${id}" readonly placeholder="-- Select a font --" required=${required}>
            <div id="${id}-dropdown-content" class="avp-dropdown-content">
              <input type="text" placeholder="Search font..." id="${id}-search-input">
              <div id="${id}-sticky" class="sticky">Reset to Default</div>
            </div>
          </div>`
        );

        return (
          createAvisContainerHidden(
            elemOptionAvisContainer,
            productId,
            name,
            ""
          ),
          a
        );
      },

      _createFileInput: function (
        elemOptionAvisContainer,
        productId,
        e,
        isRequired,
        isMultiFiles,
        o
      ) {
        let inputFile = $("<input/>")
          .attr("type", "file")
          // .attr("field-name", e)
          .attr("name", isNotUseAvisHidden ? `properties[${e}]` : e)
          .attr("id", o)
          .attr(
            "accept",
            ".jpeg, .jpg, .png, .gif, .webp, .tif, .tiff, .svg, .ico, .csv, .docx, .pdf, .xls, .xlsm, .xlsx, .txt, .ai, .eps, .psd, .heic"
          )
          .addClass("avp-file__input");

        let inputValue = $("<input/>")
          .attr("type", "hidden")
          .attr("field-name", e)
          // .attr("name", e)
          // .attr("id", o)
          // .attr(
          //   "accept",
          //   ".jpeg, .jpg, .png, .gif, .webp, .tif, .tiff, .svg, .ico, .csv, .docx, .pdf, .xls, .xlsm, .xlsx, .txt, .ai, .eps, .psd"
          // )
          .addClass("apo_value");

        if (isMultiFiles) inputFile.prop("multiple", isMultiFiles);
        if (isRequired) inputValue.prop("required", isRequired);
        var a = window.AP_POptions.$(
          `<div class="apo-file">
              <label class="apo-file__lable" for="${o}">
                <span class="apo-file__action">${customizeryConfig.text_file_upload_button
            ? customizeryConfig.text_file_upload_button
            : "Choose File"
          }</span>
              </label>
            </div>`
        );

        inputFile.on("change", function (e) {
          window.AP_POptions.apps.productoptions.toggleInputError(a, !0);
        });
        a.append(inputFile);
        a.append(inputValue);
        return (
          createAvisContainerHidden(elemOptionAvisContainer, productId, e, ""),
          a
        );
      },
      _createParagraph: function (e) {
        var p = window.AP_POptions.$("<div>" + e + "</div>").addClass(
          "avp-paragraph"
        );
        return p;
      },
      _createHTML: function (e) {
        var p = window.AP_POptions.$("<div>" + e + "</div>").addClass(
          "avp-HTML"
        );
        return p;
      },
      _createSpace: function (height) {
        var p = window.AP_POptions.$(`
          <div class="avp-space" style="height: ${height}px"></div>  
        `)
        return p;
      },
      _createSwitch: function (elemOptionAvisContainer, productId, option, id) {
        let elemInput = document.createElement("input");
        elemInput.setAttribute("type", "checkbox");
        elemInput.setAttribute("avp-data", "switch");
        elemInput.setAttribute("field-name", option?.label_cart);
        elemInput.setAttribute(
          "name",
          isNotUseAvisHidden
            ? `properties[${option?.label_cart}]`
            : option?.label_cart
        );
        elemInput.setAttribute("id", id);
        elemInput.setAttribute("autocomplete", "off");

        elemInput.classList.add("avp-switch");

        let div = document.createElement("div");
        div.classList.add("apo-main__switch");

        let label = document.createElement("label");
        label.classList.add("apo-switch");
        label.setAttribute("for", id);

        let span = document.createElement("span");
        span.classList.add("apo-textvalue");
        span.innerHTML = option?.switch_label;

        div.append(elemInput);
        div.append(label);
        div.append(span);

        if (option?.default_status === "true") elemInput.checked = true;
        if (option?.required)
          elemInput.setAttribute("required", option?.required);
        createAvisContainerHidden(
          elemOptionAvisContainer,
          productId,
          option?.label_cart,
          ""
        );
        const handleChangeElement = function (event) {
          if (elemInput.checked) {
            elemInput.value = option?.switch_label;
            if (option?.required)
              window.AP_POptions.apps.productoptions.toggleInputError(
                $(div),
                !0
              );
          } else {
            elemInput.value = "";
          }
          priceMod.variantChange(
            option?.label_cart,
            [$(div)],
            productId,
            elemOptionAvisContainer
          );
          createAvisContainerHidden(
            elemOptionAvisContainer,
            productId,
            option?.label_cart,
            $(elemInput).val()
          );
          findButtonAddCart(elemOptionAvisContainer, productId);
        };

        elemInput.removeEventListener("change", (event) =>
          handleChangeElement(event)
        );
        elemInput.addEventListener("change", handleChangeElement.bind());
        option?.default_status === "true" &&
          elemInput.dispatchEvent(new Event("change"));
        return $(div);
      },
      _createHiddenField: function (
        elemOptionAvisContainer,
        productId,
        labelCart,
        defaultValue,
        id
      ) {
        var elemEmailInput = document.createElement("input");
        elemEmailInput.setAttribute("type", "text");
        elemEmailInput.setAttribute("field-name", labelCart);
        elemEmailInput.setAttribute(
          "name",
          isNotUseAvisHidden ? `properties[${labelCart}]` : labelCart
        );
        elemEmailInput.setAttribute("id", id);
        elemEmailInput.classList.add("avp-productdescfont");
        elemEmailInput.classList.add("avp-productoptiontextcolor");
        elemEmailInput.classList.add("avp-productoptionbackground");

        elemEmailInput.removeEventListener("input", (event) =>
          e.handleChangeElement(elemOptionAvisContainer, productId, event)
        );
        elemEmailInput.addEventListener("input", (event) => {
          e.handleChangeElement(elemOptionAvisContainer, productId, event);
        });

        var textField = document.createElement("span");
        textField.classList.add("apo-text-field");
        textField.appendChild(elemEmailInput);

        let elemInputJq = window.AP_POptions.$(elemEmailInput);
        return (
          defaultValue && elemInputJq.val(defaultValue),
          createAvisContainerHidden(
            elemOptionAvisContainer,
            productId,
            labelCart,
            defaultValue
          ),
          textField ? window.AP_POptions.$(textField) : elemInputJq
        );
      },
      _createHeading: function (content, styles, color) {
        var h = window.AP_POptions.$(
          `<${styles} style="color: ${color};">` + content + `</${styles}>`
        ).addClass("avp-heading");
        return h;
      },
      _createDivider: function (borderStyles, dividerColor) {
        var thicknessDivider = borderStyles === "double" ? "3px" : "1px";
        var d = window.AP_POptions.$(
          `<div style="border-bottom: ${thicknessDivider} ${borderStyles} ${dividerColor ? dividerColor : "#000000"};"></div>`
        ).addClass("avp-divider");
        return d;
      },
      _createModal: function (option) {
        let divButtonOnModal = document.createElement("div");
        divButtonOnModal.classList.add("avp-modal");
        divButtonOnModal.innerHTML = `<span class='apo-modal__title'>${option?.title_on_product ?? ""
          }</span>`;

        divButtonOnModal.addEventListener("click", function () {
          let modalPopup = AvisOptionsData.createModalPopup(option);
          let body = document.querySelector("body");
          body.append(modalPopup);
        });

        return $(divButtonOnModal);
      },

      _createSizeChart: function (option) {
        let divButtonOnSizeChart = document.createElement("div");
        divButtonOnSizeChart.classList.add("avp-modal");
        divButtonOnSizeChart.classList.add("apo-size__chart");

        divButtonOnSizeChart.innerHTML = `<span class='apo-modal__title apo-title__size-chart'>
        <span class="apo-chart__icon">
          ${option?.chart_icons === true
            ? option?.chart_icon_styles === "light_icon_1" ||
              option?.chart_icon_styles === "dark_icon_1"
              ? `<svg fill="${option?.chart_icon_styles.includes("light")
                ? "#000000"
                : "#ffffff"
              }" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 512.00 512.00" xml:space="preserve" width="100px" height="100px" transform="matrix(1, 0, 0, 1, 0, 0)rotate(0)" stroke="#000000"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round" stroke="#CCCCCC" stroke-width="11.264022"></g><g id="SVGRepo_iconCarrier"> <g> <g> <path d="M427.761,0L0.001,427.76l84.241,84.241L512,84.241L427.761,0z M78.377,484.074l354.899-354.899l-11.032-11.031 L67.347,473.044L22.063,427.76l17.126-17.126l33.905,33.905l11.031-11.032L50.22,399.603l11.495-11.495l11.378,11.378 l11.031-11.032l-11.378-11.378l11.495-11.495l17.01,17.01l11.032-11.031l-17.01-17.01l11.495-11.495l11.378,11.378l11.031-11.032 l-11.378-11.378l11.495-11.495l33.905,33.905l11.031-11.032l-33.904-33.905l11.495-11.495l11.378,11.378l11.031-11.031 l-11.378-11.378l11.495-11.495l17.01,17.01l11.031-11.031l-17.01-17.01l11.495-11.495l11.378,11.378l11.031-11.031l-11.378-11.378 l11.495-11.495L253.3,264.33l11.032-11.031l-33.905-33.905l11.495-11.495l11.378,11.378l11.032-11.031l-11.378-11.378 l11.495-11.495l17.01,17.01l11.032-11.032l-17.01-17.01l11.494-11.494l11.378,11.378l11.032-11.031l-11.378-11.378l11.494-11.494 l33.904,33.904l11.032-11.031l-33.904-33.905l11.494-11.494l11.378,11.378l11.032-11.031l-11.378-11.378l11.494-11.494 l17.009,17.009l11.032-11.031l-17.01-17.01l11.495-11.495l11.379,11.378l11.032-11.032L388.11,61.715l11.495-11.495l33.905,33.904 l11.032-11.031l-33.905-33.905l17.126-17.126l45.283,45.283l-17.01,17.01l11.032,11.031l17.01-17.009l5.863,5.863L84.241,489.937 L78.377,484.074z"></path> </g> </g> <g> <g> <rect x="436.585" y="98.848" transform="matrix(0.6926 -0.7213 0.7213 0.6926 59.7226 353.441)" width="15.93" height="15.601"></rect> </g> </g> </g></svg>`
              : option?.chart_icon_styles === "light_icon_2" ||
                option?.chart_icon_styles === "dark_icon_2"
                ? `<svg fill="${option?.chart_icon_styles.includes("light")
                  ? "#000000"
                  : "#ffffff"
                }" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 512 512" xml:space="preserve" width="100px" height="100px"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <g> <g> <path d="M95.909,108.194c-13.161,0-23.869,10.707-23.869,23.869s10.708,23.869,23.869,23.869 c13.161,0,23.869-10.707,23.869-23.869C119.779,118.901,109.07,108.194,95.909,108.194z M95.91,140.21 c-4.493,0-8.148-3.656-8.148-8.148c-0.001-4.492,3.655-8.148,8.148-8.148c4.493,0,8.148,3.656,8.148,8.148 C104.058,136.556,100.404,140.21,95.91,140.21z"></path> </g> </g> <g> <g> <path d="M48.027,132.071h15.721c0-17.818,14.335-32.169,32.152-32.169V84.18C69.698,84.18,48.027,105.868,48.027,132.071z"></path> </g> </g> <g> <g> <path d="M152.085,132.071c0,31.443-24.741,56.168-56.184,56.168v15.721c39.828,0,71.906-32.061,71.906-71.889H152.085z"></path> </g> </g> <g> <g> <path d="M416.09,212.252H190.823c0,0,0.997-79.62,0.997-80.189c0-52.885-43.025-95.91-95.91-95.91 C43.024,36.153,0,79.179,0,132.063v104.058c0,52.885,43.025,95.91,95.91,95.91H416.09c22.614,0,43.056,9.423,57.648,24.533 c-7.515,4.639-16.329,7.135-25.629,7.135H270.933v112.146h177.175c35.128,0,63.719-28.137,63.885-63.627H512V308.162 C512,255.277,468.975,212.252,416.09,212.252z M95.91,51.875c44.217,0,80.189,35.973,80.189,80.189s-35.972,80.189-80.189,80.189 s-80.189-35.973-80.189-80.189S51.693,51.875,95.91,51.875z M175.434,185.628l-0.332,26.625h-26.637 C159.116,205.248,168.299,196.186,175.434,185.628z M320.194,460.125h-8.385v-7.337h-15.721v7.337h-9.433v-80.703h9.433v9.433 h15.721v-9.433h8.385V460.125z M472.168,453.57v-17.55h-15.721v23.356c-2.71,0.483-5.494,0.75-8.339,0.75h-8.431V419.25h-15.721 v40.876h-15.721v-24.106h-15.721v24.106h-16.77v-63.934h-15.721v63.934h-24.106v-80.703h112.193 c12.901,0,25.138-3.662,35.447-10.462c8.012,12.45,12.689,27.239,12.72,43.106C496.218,429.564,486.524,445.164,472.168,453.57z M496.279,359.655c-4.969-7.555-10.982-14.362-17.822-20.23v-62.716h-15.721v51.735c-4.666-2.609-9.571-4.835-14.673-6.644v-29.37 H432.34v25.268c-5.285-0.906-10.712-1.388-16.251-1.388h-0.519v-39.601h-15.721v39.602h-16.77V292.43h-15.721v23.881h-15.721 v-64.757h-15.721v64.757h-14.673V292.43h-15.721v23.881h-18.866v-39.602h-15.721v39.602H256.26V292.43h-15.721v23.881h-17.818 v-64.757h-15.721v64.757h-14.673V292.43h-15.721v23.881h-15.721v-39.602h-15.721v39.602h-18.866V292.43h-15.721v23.881H95.91 c-0.003,0-0.006,0-0.009,0v-64.757H80.18v63.198c-5.46-1.09-10.72-2.733-15.721-4.875v-25.832H48.737v16.865 c-2.956-2.158-5.754-4.515-8.385-7.047v-42.309H24.63v21.231c-5.68-10.997-8.909-23.456-8.909-36.664v-51.505 c17.158,26.092,46.693,43.357,80.189,43.357H416.09c44.217,0,80.189,35.973,80.189,80.189V359.655z"></path> </g> </g> <g> <g> <rect x="296.088" y="403.528" width="15.721" height="32.491"></rect> </g> </g> <g> <g> <path d="M24.013,132.072h15.721c0-31.444,24.724-56.183,56.167-56.183V60.167C56.073,60.167,24.013,92.244,24.013,132.072z"></path> </g> </g> <g> <g> <path d="M128.071,132.071c0,17.818-14.353,32.155-32.17,32.155v15.721c26.202,0,47.892-21.674,47.892-47.876H128.071z"></path> </g> </g> </g></svg>`
                : option?.chart_icon_styles === "light_icon_3" ||
                  option?.chart_icon_styles === "dark_icon_3"
                  ? `<svg fill="${option?.chart_icon_styles.includes("light")
                    ? "#000000"
                    : "#ffffff"
                  }" height="100px" width="100px" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 490 490" xml:space="preserve"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <g> <g> <g> <path d="M488.185,474.254l-330.001-470c-2.506-3.57-7.038-5.103-11.197-3.789S140,5.637,140,10v470c0,5.523,4.477,10,10,10h330 c3.731,0,7.152-2.078,8.873-5.388C490.594,481.301,490.328,477.307,488.185,474.254z M160,470v-30h30v-20h-30v-50h30v-20h-30v-50 h30v-20h-30v-50h30v-20h-30v-50h30v-20h-30V41.645L460.76,470H160z"></path> <path d="M225,400h105c3.788,0,7.25-2.14,8.944-5.528c1.694-3.388,1.328-7.442-0.944-10.472L233,244 c-2.583-3.444-7.078-4.849-11.162-3.487C217.755,241.874,215,245.696,215,250v140C215,395.523,219.477,400,225,400z M235,280 l75,100h-75V280z"></path> <path d="M110,0H10C4.477,0,0,4.477,0,10v470c0,5.523,4.477,10,10,10h100c5.523,0,10-4.477,10-10V10C120,4.477,115.523,0,110,0z M100,470H20v-45h40v-20H20v-60h40v-20H20v-70h40v-20H20v-70h40v-20H20V85h40V65H20V20h80V470z"></path> </g> </g> </g> </g></svg>`
                  : option?.chart_icon_styles === "light_icon_4" ||
                    option?.chart_icon_styles === "dark_icon_4"
                    ? `<svg fill="${option?.chart_icon_styles.includes("light")
                      ? "#000000"
                      : "#ffffff"
                    }" height="100px" width="100px" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 446.545 446.545" xml:space="preserve"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <g> <path d="M133.639,213.912c1.953,1.953,4.512,2.929,7.071,2.929s5.119-0.976,7.071-2.929c3.905-3.905,3.905-10.237,0-14.143 l-18.611-18.611l26.662-26.662c3.905-3.905,3.905-10.237,0-14.142s-10.237-3.905-14.142,0l-26.661,26.662l-23.419-23.419 l26.662-26.662c3.905-3.905,3.905-10.237,0-14.143c-3.905-3.905-10.237-3.905-14.143,0l-26.662,26.662l-53.3-53.299L76.444,24.23 l123.438,123.438c3.905,3.905,10.237,3.905,14.143,0c3.905-3.905,3.905-10.237,0-14.142L83.54,3.041 C79.644-0.854,73.33-0.865,69.421,3.017L2.953,69.035C1.067,70.909,0.004,73.455,0,76.113s1.049,5.208,2.929,7.088L133.639,213.912 z"></path> <path d="M443.617,363.118L313.019,232.52c-3.905-3.905-10.237-3.905-14.143,0c-3.905,3.905-3.905,10.237,0,14.143l123.527,123.526 l-52.101,52.101l-53.323-53.324l26.662-26.662c3.905-3.905,3.905-10.237,0-14.142s-10.237-3.905-14.142,0l-26.661,26.662 l-23.419-23.419l26.662-26.662c3.905-3.905,3.905-10.237,0-14.143s-10.237-3.905-14.143,0l-26.662,26.662l-18.499-18.499 c-3.905-3.904-10.237-3.904-14.143,0c-3.905,3.905-3.905,10.237,0,14.143l130.598,130.598c1.953,1.953,4.512,2.929,7.071,2.929 s5.119-0.976,7.071-2.929l66.243-66.243C447.521,373.355,447.521,367.023,443.617,363.118z"></path> <path d="M63.324,61.988c-3.778,3.777-5.858,8.8-5.858,14.143c0,5.342,2.081,10.365,5.858,14.142 c3.777,3.778,8.8,5.858,14.142,5.858s10.365-2.081,14.143-5.858c7.797-7.798,7.797-20.486,0-28.284 c-3.778-3.777-8.8-5.857-14.143-5.857S67.101,58.21,63.324,61.988z"></path> <path d="M384.445,383.109c3.777-3.778,5.858-8.8,5.858-14.142c0-5.342-2.081-10.365-5.858-14.143 c-3.778-3.777-8.8-5.857-14.143-5.857c-5.342,0-10.364,2.08-14.142,5.857c-3.778,3.778-5.858,8.8-5.858,14.143 c0,5.342,2.08,10.364,5.857,14.142c3.778,3.778,8.8,5.858,14.142,5.858C375.645,388.967,380.667,386.887,384.445,383.109z"></path> <path d="M402.429,114.827c0.002-0.002,0.003-0.003,0.005-0.005s0.003-0.003,0.005-0.005l28.645-28.645 c19.495-19.495,19.495-51.216,0-70.711c-9.432-9.431-21.988-14.625-35.355-14.625c-13.368,0-25.924,5.194-35.356,14.626 l-28.64,28.64c-0.003,0.003-0.007,0.006-0.01,0.009s-0.006,0.007-0.009,0.01l-35.342,35.342c-0.001,0.001-0.003,0.002-0.004,0.004 s-0.002,0.003-0.004,0.004L67.16,308.674c-0.019,0.019-0.034,0.042-0.053,0.061c-0.306,0.312-0.59,0.643-0.853,0.991 c-0.057,0.075-0.108,0.153-0.163,0.23c-0.229,0.323-0.441,0.657-0.631,1.004c-0.021,0.039-0.05,0.073-0.071,0.112l-37.247,70.484 c-0.019,0.035-0.038,0.07-0.056,0.106L1.996,431.036c-2.05,3.879-1.332,8.641,1.77,11.744c1.923,1.922,4.482,2.929,7.074,2.929 c1.591,0,3.194-0.379,4.669-1.159l49.379-26.094c0.032-0.016,0.063-0.033,0.095-0.05l70.489-37.25 c0.019-0.01,0.036-0.024,0.055-0.034c0.384-0.207,0.753-0.441,1.107-0.695c0.062-0.045,0.124-0.089,0.185-0.135 c0.347-0.262,0.677-0.545,0.989-0.851c0.02-0.02,0.044-0.035,0.064-0.055L402.429,114.827z M62.137,397.288l-12.88-12.88 l21.055-39.842l4.323,19.719c0.011,0.051,0.032,0.098,0.044,0.149c0.087,0.372,0.196,0.738,0.326,1.1 c0.025,0.069,0.046,0.138,0.072,0.206c0.154,0.401,0.334,0.793,0.542,1.176c0.032,0.059,0.069,0.114,0.102,0.172 c0.178,0.313,0.376,0.617,0.591,0.913c0.062,0.085,0.122,0.17,0.186,0.253c0.257,0.332,0.53,0.656,0.834,0.961 c0.305,0.305,0.629,0.578,0.962,0.835c0.082,0.063,0.166,0.123,0.25,0.184c0.298,0.216,0.604,0.415,0.919,0.595 c0.056,0.032,0.109,0.067,0.166,0.098c0.384,0.209,0.778,0.389,1.18,0.544c0.066,0.025,0.133,0.046,0.199,0.07 c0.364,0.131,0.734,0.241,1.109,0.329c0.049,0.012,0.095,0.032,0.145,0.043l19.718,4.322L62.137,397.288z M104.399,356.288 l36.76-36.761c3.905-3.905,3.905-10.237,0-14.142s-10.237-3.905-14.142,0l-36.76,36.76l-5.086-23.198l218.268-218.267 l14.142,14.142L151.135,281.267c-3.905,3.905-3.905,10.237,0,14.143c1.953,1.953,4.512,2.929,7.071,2.929 c2.559,0,5.119-0.977,7.071-2.929l166.445-166.445l14.142,14.142L127.597,361.374L104.399,356.288z M338.794,65.326l42.426,42.426 l-21.213,21.213l-42.426-42.426L338.794,65.326z M374.515,29.605c5.654-5.655,13.188-8.769,21.213-8.769 c8.025,0,15.559,3.114,21.212,8.768c11.697,11.697,11.697,30.729,0,42.426l-21.578,21.578l-42.426-42.426L374.515,29.605z M39.478,402.914l4.154,4.154l-8.809,4.655L39.478,402.914z"></path> </g> </g></svg>`
                    : `<svg fill="${option?.chart_icon_styles.includes("light")
                      ? "#000000"
                      : "#ffffff"
                    }" height="100px" width="100px" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 373 373" xml:space="preserve" transform="rotate(180)matrix(1, 0, 0, 1, 0, 0)"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <g> <path d="M369,70.664H4c-2.209,0-4,1.791-4,4v69c0,2.209,1.791,4,4,4h292v150.672c0,2.209,1.791,4,4,4h69c2.209,0,4-1.791,4-4 V74.664C373,72.455,371.209,70.664,369,70.664z M292,139.664v-8h-8v8h-7.706v-13.062h-8v13.062h-7.706v-8h-8v8h-7.706v-8h-8v8 h-7.706v-8h-8v8h-7.705v-13.062h-8v13.062h-7.706v-8h-8v8h-7.706v-8h-8v8h-7.706v-8h-8v8h-7.706v-13.062h-8v13.062h-7.706v-8h-8v8 h-7.705v-8h-8v8h-7.706v-8h-8v8h-7.706v-13.062h-8v13.062h-7.706v-8h-8v8h-7.706v-8h-8v8h-7.705v-8h-8v8H25v-13.062h-8v13.062H8 v-61h9v12.063h8V78.664h7.706v7h8v-7h7.705v7h8v-7h7.706v7h8v-7h7.706v12.063h8V78.664h7.706v7h8v-7h7.706v7h8v-7h7.705v7h8v-7 h7.706v12.063h8V78.664h7.706v7h8v-7h7.706v7h8v-7h7.706v7h8v-7h7.706v12.063h8V78.664h7.705v7h8v-7h7.706v7h8v-7h7.706v7h8v-7 h7.706v12.063h8V78.664H284v7h8v-7h7.882v7h8v-7h7.706v7h8v-7h7.706v12.063h8V78.664h20.05l-61,61H292z M304,294.336V145.32l61-61 v210.016H304z"></path> <path d="M30.5,96.164c-6.893,0-12.5,5.607-12.5,12.5c0,6.893,5.607,12.5,12.5,12.5c6.893,0,12.5-5.607,12.5-12.5 C43,101.771,37.393,96.164,30.5,96.164z M30.5,113.164c-2.482,0-4.5-2.019-4.5-4.5c0-2.481,2.018-4.5,4.5-4.5 c2.481,0,4.5,2.019,4.5,4.5C35,111.146,32.981,113.164,30.5,113.164z"></path> <path d="M349.5,110.664c-6.893,0-12.5,5.607-12.5,12.5c0,6.892,5.607,12.5,12.5,12.5c6.892,0,12.5-5.607,12.5-12.5 C362,116.271,356.392,110.664,349.5,110.664z M349.5,127.664c-2.482,0-4.5-2.019-4.5-4.5c0-2.481,2.018-4.5,4.5-4.5 c2.481,0,4.5,2.019,4.5,4.5C354,125.646,351.981,127.664,349.5,127.664z"></path> <path d="M356.227,148.352h-43.453c-2.209,0-4,1.791-4,4v134.313c0,2.209,1.791,4,4,4h43.453c2.209,0,4-1.791,4-4V152.352 C360.227,150.143,358.435,148.352,356.227,148.352z M337.75,156.352v126.313h-6.5V156.352H337.75z M316.773,156.352h6.477v126.313 h-6.477V156.352z M352.227,282.664h-6.477V156.352h6.477V282.664z"></path> </g> </g></svg>`
            : ""
          }
        </span>
        ${option?.chart_title ?? ""}</span>`;

        divButtonOnSizeChart.addEventListener("click", function () {
          let modalSizeChart = AvisOptionsData.createModalSizeChart(option);
          let body = document.querySelector("body");
          body.append(modalSizeChart);
        });

        return $(divButtonOnSizeChart);
      },

      _createEmailInput: function (
        elemOptionAvisContainer,
        productId,
        labelCart,
        placeholder,
        required,
        defaultValue,
        id
      ) {
        var elemEmailInput = document.createElement("input");
        elemEmailInput.setAttribute("type", "text");
        elemEmailInput.setAttribute("field-name", labelCart);
        elemEmailInput.setAttribute(
          "name",
          isNotUseAvisHidden ? `properties[${labelCart}]` : labelCart
        );
        elemEmailInput.setAttribute("id", id);
        elemEmailInput.setAttribute("value-email-input", "");
        elemEmailInput.setAttribute("autocomplete", "off");

        elemEmailInput.classList.add("avp-productdescfont");
        elemEmailInput.classList.add("avp-productoptiontextcolor");
        elemEmailInput.classList.add("avp-productoptionbackground");

        elemEmailInput.removeEventListener("input", (event) =>
          e.handleChangeElement(elemOptionAvisContainer, productId, event)
        );
        elemEmailInput.addEventListener("input", (event) => {
          e.handleChangeElement(elemOptionAvisContainer, productId, event);
        });

        var textField = document.createElement("span");
        textField.classList.add("apo-text-field");
        textField.appendChild(elemEmailInput);

        let elemInputJq = window.AP_POptions.$(elemEmailInput);
        return (
          void 0 !== placeholder &&
          "" !== placeholder &&
          elemInputJq.prop("placeholder", placeholder),
          required && elemInputJq.prop("required", required),
          defaultValue && elemInputJq.val(defaultValue),
          createAvisContainerHidden(
            elemOptionAvisContainer,
            productId,
            labelCart,
            defaultValue
          ),
          textField ? window.AP_POptions.$(textField) : elemInputJq
        );
      },
      _createSwatch: function (
        elemOptionAvisContainer,
        productId,
        t,
        n,
        i,
        o,
        quantityDefault
      ) {
        let isColor =
          t.is_color === true || t.is_color === false
            ? t.is_color
            : n.swatch.is_color;
        if (
          t.type === "swatch_single_image" ||
          t.type === "swatch_multi_image"
        ) {
          isColor = false;
        } else if (
          t.type === "swatch_single_color" ||
          t.type === "swatch_multi_color"
        ) {
          isColor = true;
        }
        let imageUrl = n.swatch.file_image_url;
        if (t.option_url === OPTION_URL.group && !imageUrl)
          imageUrl = n.url_image;
        var r = priceMod.getValueText(n, t),
          a = !isColor
            ? "background-image: url('" + (imageUrl ?? "") + "');"
            : `background:${n.swatch.color};`,
          swatchShape =
            t?.swatch_shape === "circle"
              ? "border-radius: 50% !important;"
              : "",
          s = window.AP_POptions.$(
            `<label class="avp-productoptionswatchwrapper${t.type.indexOf("swatch") > -1 &&
              (t?.hidden_variant_title != null &&
                t?.hidden_variant_title !== undefined
                ? t?.hidden_variant_title
                : customizeryConfig?.customize_options?.swatch
                  ?.hidden_variant_title)
              ? " avp-hiddenvarianttitleswatch"
              : ""
            }"></label>`
          ),
          addImg =
            !isColor && !isCustom149 && imageUrl
              ? `<img src="${imageUrl ?? ""}" />`
              : "",
          addTooltip = isCustom149
            ? `<span class="apo-option-value-tooltip">${n.value ? n.value : n.url_name
            }</span>`
            : "";
        hiddenHoverImg = customizeryConfig?.hide_hover_img_swatches
          ? " hover-img-hidden-mobile"
          : "";

        let isHover =
          isColor || !t.allow_hover_img || t.allow_hover_img != "true";
        let swatchItem = `<span class="avp-productoptionswatch" style="${a}${swatchShape}"></span>`;
        if (isHover)
          swatchItem = `<span class="avp-productoptionswatch" data-src="${isColor ? "" : imageUrl ?? ""
            }" style="${a}${swatchShape}"></span>`;

        let valueUrl = n?.url?.trim();
        let isOnlyUrl =
          t.option_url === OPTION_URL.group || t.option_url === OPTION_URL.only;
        if (valueUrl && isOnlyUrl) {
          swatchItem = `<a class="apo-swatch-a" href="${valueUrl}">${swatchItem}</a>`;
        }

        let p = window.AP_POptions.$(
          isHover
            ? swatchItem
            : `<div class="avp-productoptionswatch-box${hiddenHoverImg}">${swatchItem}${addImg}${addTooltip}</div>`
        );
        var c =
          t.allow_multiple == "true"
            ? e._createCheckboxButton(
              elemOptionAvisContainer,
              productId,
              t,
              n,
              !1,
              o,
              quantityDefault
            )
            : e._createRadioButton(
              elemOptionAvisContainer,
              productId,
              t,
              n,
              !1,
              o,
              quantityDefault,
              isOnlyUrl
            );

        let valueWrapper = null;
        if (i) {
          let valueElement = s
            .append(
              priceMod.attachData(c, t.label_cart, n, r.display, t, productId)
            )
            .append(p)
            .append(
              t.type.indexOf("swatch") > -1 &&
                (t?.hidden_variant_title != null &&
                  t?.hidden_variant_title !== undefined
                  ? t?.hidden_variant_title
                  : customizeryConfig?.customize_options?.swatch
                    ?.hidden_variant_title)
                ? window.AP_POptions.$(r.display)
                  .css({ display: "none" })
                  .prop("outerHTML")
                : r.display
            );
          if (t.show_option_value_qty) {
            valueWrapper = e._createQuantity(
              elemOptionAvisContainer,
              productId,
              valueElement,
              t.min_value_qty,
              t.max_value_qty,
              quantityDefault
            );
          } else valueWrapper = valueElement;
        }
        return i ? valueWrapper : c;
      },
      createRadioList: function (
        elemOptionAvisContainer,
        productId,
        e,
        t,
        n,
        optionDefaultValues,
        createRadioButton
      ) {
        t.attr("id", n).removeAttr("for");
        var o = [];
        let indexValue = -1;
        let indexSetDefault = 0;
        let isSetDefault = false;
        let quantityDefault = -1;
        let isOnlyUrl =
          e.option_url === OPTION_URL.group || e.option_url === OPTION_URL.only;
        return (
          e.option_values &&
          window.AP_POptions.$.each(e.option_values, function () {
            let optionValue = this;
            indexValue += 1;
            if (isOnlyUrl) {
              let handle = optionValue?.url?.split("/").pop();
              if (
                optionValue.url_id === productId ||
                optionValue.url_id ===
                window.ap_front_settings?.product_info?.product?.id ||
                handle ===
                window.ap_front_settings?.product_info?.product?.handle
              ) {
                indexSetDefault = indexValue;
                isSetDefault = true;
              }
            } else {
              if (
                optionDefaultValues &&
                optionDefaultValues.indexOf(optionValue["value_id"]) > -1
              ) {
                indexSetDefault = indexValue;
                isSetDefault = true;
              } else if (optionDefaultValues) {
                let arrValueDefault = optionDefaultValues.split(",");
                for (let value of arrValueDefault) {
                  let arrValue = value.split(" * ");
                  let newValue = arrValue[0].trim();
                  if (optionValue.value.trim() === newValue) {
                    indexSetDefault = indexValue;
                    isSetDefault = true;
                    if (arrValue.length > 1)
                      quantityDefault = parseInt(arrValue[1]);
                  }
                }
              }
            }

            o.push(
              createRadioButton(
                elemOptionAvisContainer,
                productId,
                e,
                this,
                !0,
                function (t) {
                  priceMod.variantChange(
                    e.label_cart,
                    $(o).map(function () {
                      return $(this).find("input").first();
                    }),
                    productId
                  );
                },
                quantityDefault,
                isOnlyUrl
              )
            );
          }),
          o.length &&
          o[indexSetDefault].find("input").each(function () {
            if (isSetDefault) $(this).prop("checked", "checked")
            if (
              priceModAll[productId].radioInput &&
              priceModAll[productId].radioInput[e.label_cart]
            ) {
              priceModAll[productId].radioInput[e.label_cart].value = "";
            }
            $(this).trigger("change", ["onLoad"]);
          }),
          o
        );
      },
      createCheckboxList: function (
        elemOptionAvisContainer,
        productId,
        t,
        n,
        optionDefaultValues,
        i
      ) {
        var o = window.AP_POptions.$("<fieldset></fieldset>").append(
          window.AP_POptions.$("<legend></legend>")
            .attr(
              "style",
              "position: absolute !important;top: 0;clip: rect(1px, 1px, 1px, 1px) !important;overflow: hidden !important;height: 1px !important;width: 1px !important;padding: 0 !important;border: 0 !important;"
            )
            .text(t.label_product || "")
        );
        n.removeAttr("for"), t.required && o.attr("data-required", "true");
        var r = e._createHiddenInput(
          elemOptionAvisContainer,
          productId,
          t.label_cart
        );
        let isHasDefaultValue = false;
        let minTotalQuantity = 0;
        let maxTotalQuantity = 0;
        var desMinMax = null;
        if (t.show_option_value_qty && t.check_total_qty) {
          minTotalQuantity = parseInt(t.min_total_qty, 10);
          maxTotalQuantity = parseInt(t.max_total_qty, 10);

          if (minTotalQuantity > 0 || maxTotalQuantity > 0) {
            desMinMax = window.AP_POptions.$(
              "<p class='avp-productdescfont avp-productdesctextcolor avp-min-max-total'></p>"
            );
          }
        }
        return (
          o.append(r),
          t.option_values &&
          window.AP_POptions.$.each(t.option_values, function () {
            let valueDefault = false;
            let quantityDefault = -1;
            let optionValue = this;
            if (
              optionDefaultValues &&
              optionDefaultValues.indexOf(optionValue["value_id"]) > -1
            ) {
              valueDefault = true;
              isHasDefaultValue = true;
            } else if (optionDefaultValues) {
              let arrValueDefault = optionDefaultValues.split(",");
              for (let value of arrValueDefault) {
                let arrValue = value.split(" * ");
                let newValue = arrValue[0].trim();
                if (optionValue.value.trim() === newValue) {
                  valueDefault = true;
                  isHasDefaultValue = true;
                  if (arrValue.length > 1)
                    quantityDefault = parseInt(arrValue[1]);
                }
              }
            }
            o.append(
              i(
                elemOptionAvisContainer,
                productId,
                t,
                this,
                !0,
                valueDefault,
                quantityDefault
              )
            );
          }),

          t.max_selections &&
          parseInt(t.max_selections, 10) > 0 &&
          o.data("max_selections", t.max_selections),
          t.min_selections &&
          parseInt(t.min_selections, 10) > 0 &&
          o.data("min_selections", t.min_selections),
          t.max_selections &&
          parseInt(t.max_selections, 10) > 0 &&
          o.data("max_selections", t.max_selections),
          minTotalQuantity > 0 && o.data("min_total_qty", minTotalQuantity),
          maxTotalQuantity > 0 && o.data("max_total_qty", maxTotalQuantity),
          desMinMax && (o = o.add(desMinMax)),
          o.on("change", async function () {
            let elemOnChange = this;
            if (elemOnChange.localName != "fieldset") return;
            var n = window.AP_POptions.$(this).find('input[type="checkbox"]');
            p_disabled(t, o, n),
              priceMod.variantChange(t.label_cart, n, productId),
              window.AP_POptions.apps.productoptions.toggleInputError(o, !0);

            function genVariantTitleHtml(thisObj) {
              $(document).ready(function () {
                var label = window.AP_POptions.$(thisObj)
                  .closest(".ap-options__swatch-container")
                  .find(".avp-option-title");
                var variantTitleHtml = n
                  .filter(":checked")
                  .map((_, data) =>
                    window.AP_POptions.$(
                      window.AP_POptions.$(data)
                        .parent()
                        .find(".swatch-variant-title")
                        .prop("outerHTML")
                    )
                      .css({
                        display: "inline-block",
                        fontStyle: "normal",
                        fontWeight: "normal",
                        textTransform: "unset",
                      })
                      .prepend("| ")
                      .prop("outerHTML")
                  )
                  .toArray()
                  .join(" ");

                label.html(
                  `${t.label_product}${n.required ? '<div class="avp-required">*</div>' : " "
                  }` + variantTitleHtml
                );
              });
            }

            if (
              t.type.indexOf("swatch") > -1 &&
              (t?.hidden_variant_title != null &&
                t?.hidden_variant_title !== undefined
                ? t?.hidden_variant_title
                : customizeryConfig?.customize_options?.swatch
                  ?.hidden_variant_title)
            ) {
              genVariantTitleHtml(elemOnChange);
            }
            var i = n
              .filter(":checked")
              .map(function () {
                return this.value;
              })
              .get()
              .join(",");

            r.val(i),
              await createAvisContainerHidden(
                elemOptionAvisContainer,
                productId,
                t.label_cart,
                i,
                $(elemOnChange),
                "fieldset"
              ),
              eventApi.fieldChange({
                name: t.label_cart,
                value: i,
                element: $(this).closest("div"),
              });

            e._createTotalAdd(elemOptionAvisContainer, productId);
            findButtonAddCart(elemOptionAvisContainer, productId);
          }),
          isHasDefaultValue && o.trigger("change"),
          o
        );
      },
      showAddChargeTitle: function (option) {
        let isType = checkOptionAddCharge(option.type);

        return (
          isType &&
          option.option_values &&
          option.option_values.length > 0 &&
          option.option_values[0]?.price &&
          parseFloat(option.option_values[0]?.price) > 0
        );
      },
      genOptionTitleHtml: function (option) {
        let titleHtml = "";
        if (option.label_product)
          titleHtml = `<span class='apo-title'>${option.label_product}</span>`;
        if (option.required) {
          titleHtml += '<div class="avp-required">*</div>';
        }
        if (e.showAddChargeTitle(option)) {
          let priceAddCharge = parseFloat(option.option_values[0].price);
          let formatPrice = priceMod.formatMoney(priceAddCharge, true);
          titleHtml += `<span class='apo-title-addcharge'>(+${formatPrice})</span>`;
        }
        return titleHtml;
      },
      add: function (
        n,
        optionSetInfo,
        r,
        productInfo,
        productId,
        elemOptionAvisContainer
      ) {
        let option = n;
        var p = [],
          c = "avp" + (n.option_id ?? n.label_cart) + "-" + r;
        apoProductDefault !== productId && (c = c + "-" + productId),
          ($formContainer = createAvisOptionContainer(
            productInfo,
            productId,
            elemOptionAvisContainer,
            optionSetInfo?.templ_class + "-wrapper"
          ));
        if (!n.help_text_select) n.help_text_select = "tooltip";
        var l = window.AP_POptions.$("<label><label>")
          .attr("for", c)
          .addClass("avp-option-title")
          .addClass(
            `${n?.title_style?.length
              ? n.title_style
                .map(
                  (style) => `avp-text${style !== "normal" ? style : ""}`
                )
                .join(" ")
              : ""
            }`
          )
          .html(e.genOptionTitleHtml(option)),
          d =
            n &&
              n.help_text_select &&
              "" !== n.help_text_select &&
              "uploadery" !== n.type
              ? n.help_text_select
              : "",
          u =
            n && n.help_text && "" !== n.help_text && "uploadery" !== n.type
              ? n.help_text
              : "",
          f = "";
        if ("" !== u && "below" === d)
          var f = window.AP_POptions.$("<div><div>")
            .addClass("avp-productdescfont")
            .addClass("avp-productdesctextcolor")
            .addClass("ap-helptext")
            .html(u);
        else if ("" !== u && "tooltip" === d)
          var f = window.AP_POptions.$("<div><div>")
            // .attr("title", u)
            .addClass("avp-productdescfont")
            .addClass("avp-productdesctextcolor")
            .addClass("ap-tooltip")
            .append(
              `<div class="apo-icons"><img src="${window.ap_front_settings.icon_tooltip}" style="width:15px" /></div><div class="ap-tooltip-inner"><p>${u}</p></div>`
            );

        let optionDefaultValues = n["option_default_value"];
        n.is_multi_files = n.is_multi_files ? n.is_multi_files : false;

        if (!n["is_option_default_value"]) optionDefaultValues = null;
        switch (n.type) {
          case "text":
            p.push(
              e._createTextInput(
                elemOptionAvisContainer,
                productId,
                n.label_cart,
                n["default_value"],
                n.placeholder,
                n.max_length,
                n.min_length,
                n.required,
                c,
                n["allow_value"],
                n["text_transform"]
              )
            );
            break;
          case "space":
            p.push(
              e._createSpace(n.spacer)
            );
            break;
          case "phone":
            p.push(
              e._createPhoneInput(
                elemOptionAvisContainer,
                productId,
                n.label_cart,
                n["default_value"],
                n.placeholder,
                n.required,
                n?.value_country,
                c
              )
            );
            break;
          case "number":
            p.push(
              e._createNumberInput(
                elemOptionAvisContainer,
                productId,
                n.label_cart,
                n["default_value"],
                n.placeholder,
                n.min,
                n.max,
                n.required,
                c
              )
            );
            break;
          case "date":
            var dateHtml = e._createDateInput(
              elemOptionAvisContainer,
              productId,
              n.label_cart,
              n["default_value"],
              n.placeholder,
              n.required,
              c
            );
            n.element_id = c;
            p.push(dateHtml);
            break;
          case "textarea":
            p.push(
              e._createTextArea(
                elemOptionAvisContainer,
                productId,
                n.label_cart,
                n["default_value"],
                n.placeholder,
                n.max_length,
                n.required,
                c,
                n.text_transform,
                n.min_length
              )
            );
            break;
          case "color":
            var colorHtml = e._createColorInput(
              elemOptionAvisContainer,
              productId,
              n.label_cart,
              n["default_value"],
              n.required,
              c
            );
            n.element_id = c;
            p.push(colorHtml);
            break;
          case "file":
            var colorHtml = e._createFileInput(
              elemOptionAvisContainer,
              productId,
              n.label_cart,
              n.required,
              n.is_multi_files,
              c
            );
            n.element_id = c;
            p.push(colorHtml);
            break;
          case "font":
            var colorHtml = e._createFontInput(
              elemOptionAvisContainer,
              productId,
              n.label_cart,
              n.font_selected,
              n.required,
              c
            );
            n.element_id = c;
            p.push(colorHtml);
            break;
          case "paragraph":
            var paragraphHtml = e._createParagraph(n.rich_text_value);
            p.push(paragraphHtml);
            break;
          case "html":
            var elementHTML = e._createHTML(n.html_code);
            if (elementHTML) {
              elementHTML.find("*").css("margin", "0");
            }
            p.push(elementHTML);
            break;
          case "switch":
            var switchHtml = e._createSwitch(
              elemOptionAvisContainer,
              productId,
              n,
              c
            );
            n.element_id = c;
            p.push(switchHtml);
            break;
          case "hidden_field":
            p.push(
              e._createHiddenField(
                elemOptionAvisContainer,
                productId,
                n.label_cart,
                n["default_value"],
                c
              )
            );
            break;
          case "heading":
            var headingHtml = e._createHeading(
              n.content_heading,
              n.styles_heading,
              n.heading_color
            );
            p.push(headingHtml);
            break;
          case "divider":
            var dividerHtml = e._createDivider(
              n.border_styles,
              n.divider_color
            );
            p.push(dividerHtml);
            break;
          case "modal":
            var modalhHtml = e._createModal(n);
            p.push(modalhHtml);
            break;
          case "size_chart":
            var sizeChartlhHtml = e._createSizeChart(n);
            p.push(sizeChartlhHtml);
            break;
          case "email":
            p.push(
              e._createEmailInput(
                elemOptionAvisContainer,
                productId,
                n.label_cart,
                n.placeholder,
                n.required,
                n["default_value"],
                c
              )
            );
            break;
          case "radio":
          case "button_single":
            var h = e.createRadioList(
              elemOptionAvisContainer,
              productId,
              n,
              l,
              c,
              optionDefaultValues,
              e._createRadioButton
            );
            window.AP_POptions.$.merge(p, h);
            break;
          case "swatch":
          case "swatch_single_color":
          case "swatch_single_image":
          case "swatch_multi_color":
          case "swatch_multi_image":
            if (n.allow_multiple == "true") {
              var v = e.createCheckboxList(
                elemOptionAvisContainer,
                productId,
                n,
                l,
                optionDefaultValues,
                e._createSwatch
              );
              p.push(v);
            } else {
              var h = e.createRadioList(
                elemOptionAvisContainer,
                productId,
                n,
                l,
                c,
                optionDefaultValues,
                e._createSwatch
              );
              window.AP_POptions.$.merge(p, h);
            }
            break;
          case "checkbox":
          case "button_multi":
            var v = e.createCheckboxList(
              elemOptionAvisContainer,
              productId,
              n,
              l,
              optionDefaultValues,
              e._createCheckboxButton
            );
            p.push(v);
            break;
          case "select":
            var g = e._createSelectMenu(
              elemOptionAvisContainer,
              productId,
              n.label_cart,
              n.option_values,
              n.placeholder,
              n.required,
              c,
              optionDefaultValues,
              n
            );
            p.push(g);
            break;

          case "swatch_select_color":
          case "swatch_select_image":
            var g = e._createSelectSwatch(
              elemOptionAvisContainer,
              productId,
              n,
              c
            );
            p.push(g);
            break;
        }
        if (p.length) {
          let inputSelector = p[0];
          if (e.showAddChargeTitle(option)) {
            priceMod.attachData(
              inputSelector,
              option.label_cart,
              option.option_values[0],
              "has-value",
              option,
              productId
            );
            if (
              option.default_value ||
              option.type === "color" ||
              (option.type === "switch" && option?.default_status === "true")
            ) {
              priceMod.variantChange(
                option.label_cart,
                [inputSelector],
                productId,
                elemOptionAvisContainer
              );
            }
          }
          var y = n["class_name"] || "",
            w = window.AP_POptions.$("<div></div>").addClass(y);
          var classOptions = "";
          var classOptionsSwatch = "";
          var classOptionsButton = "";
          switch (n.type) {
            case "text":
              classOptions = "ap-options__text";
              break;
            case "phone":
              classOptions = "ap-options__phone";
              break;
            case "number":
              classOptions = "ap-options__number";
              break;
            case "date":
              classOptions = "ap-options__date";
              break;
            case "color":
              classOptions = "ap-options__color";
              break;
            case "file":
              classOptions = "ap-options__file";
              break;
            case "textarea":
              classOptions = "ap-options__textarea";
              break;
            case "radio":
              classOptions = "ap-options__radio";
              break;
            case "swatch":
              classOptions = "ap-options__swatch";
              break;
            case "swatch_single_color":
            case "swatch_single_image":
              classOptions = "ap-options__swatch";
              classOptionsSwatch = "ap-swatch__single";
              break;
            case "swatch_multi_color":
            case "swatch_multi_image":
              classOptions = "ap-options__swatch";
              classOptionsSwatch = "ap-swatch__multi";
              break;
            case "button_single":
              classOptions = "ap-options__button";
              classOptionsButton = "ap-button__single";
              break;
            case "button_multi":
              classOptions = "ap-options__button";
              classOptionsButton = "ap-button__multi";
              break;
            case "checkbox":
              classOptions = "ap-options__checkbox";
              break;
            case "space":
              classOptions = "ap-options__space";
              break;
            case "html":
              classOptions = "ap-options__HTML";
              break;
            case "switch":
              classOptions = "ap-options__switch";
              break;
            case "hidden_field":
              classOptions = "ap-options__hidden-field";
              break;
            case "heading":
              classOptions = "ap-options__heading";
              break;
            case "divider":
              classOptions = "ap-options__divider";
              break;
            case "modal":
              classOptions = "ap-options__modal";
              break;
            case "font":
            case "select":
            case "swatch_select_color":
            case "swatch_select_image":
              classOptions = "ap-options__select";
              break;
          }
          if (n.label_product && !n?.hidden_label && n.type !== 'space')
            if ("tooltip" === d) {
              var b = window.AP_POptions.$("<div></div>")
                .addClass("ap-label-tooltip")
                .append(l)
                .append(f);
              w.append(b);
            } else w.append(l);
          w.addClass(
            `avp-option ${`${classOptions}-container`} ${isCustom149 ? "custom-149" : ""
            }`
          );
          if (n.type === 'space') {
            w.css("margin", "0")
            w.css("height", `${n.spacer}px`)
          }
          if (
            isCssV3 ||
            n?.option_url === OPTION_URL.allowed ||
            n?.option_url === OPTION_URL.group ||
            n?.option_url === OPTION_URL.only
          )
            w.addClass("apo-option-v3");
          if (optionSetInfo?.templ_class) w.addClass(optionSetInfo.templ_class);
          n?.column_width && w.addClass(`avp-columnwidth-${n.column_width}`),
            ("radio" == n.type || "button_single" == n.type ||
              (n.type.indexOf("swatch") > -1 &&
                n.allow_multiple === "false" &&
                n.type !== "swatch_select_color" &&
                n.type !== "swatch_select_image")) &&
            w.attr("role", "group").attr("aria-labelledby", c);
          let spanSelector = document.createElement("span");
          if (classOptions) spanSelector.classList.add(classOptions);
          if (classOptionsSwatch)
            spanSelector.classList.add(classOptionsSwatch);
          if (classOptionsButton)
            spanSelector.classList.add(classOptionsButton);

          if (
            (n?.column_width_variant &&
              n?.column_width_variant !== "default")
          ) {
            spanSelector.classList.add(
              `ap-col__${n?.column_width_variant !== "default" && n?.column_width_variant
              }`
            );
            spanSelector.classList.remove(
              "ap-col__22",
              "ap-col__30",
              "ap-col__46",
              "ap-col__100"
            );
          } else if (n?.column_width_variant === "default") {
            spanSelector.classList.remove(
              `ap-col__${n?.column_width_variant !== "default" && n?.column_width_variant
              }`
            );
            spanSelector.classList.remove(
              "ap-col__22",
              "ap-col__30",
              "ap-col__46",
              "ap-col__100"
            );
          }

          if (n?.type === "button_single" &&
            !customizeryConfig?.customize_options?.button?.is_check_column_variant_mobile.includes("default") &&
            $(window).width() < 600
          ) {
            spanSelector.classList.add(
              `ap-col__${customizeryConfig?.customize_options?.button?.column_variant_button_mobile}`
            );
          } else {
            spanSelector.classList.remove(
              `ap-col__${customizeryConfig?.customize_options?.button?.column_variant_button_mobile}`
            );
            spanSelector.classList.remove(
              "ap-col__22",
              "ap-col__30",
              "ap-col__46",
              "ap-col__100"
            );
          }

          if (
            n.required &&
            ("radio" == n.type || "button_single" == n.type ||
              (n.type.indexOf("swatch") > -1 &&
                n.allow_multiple === "false" &&
                n.type !== "swatch_select_color" &&
                n.type !== "swatch_select_image"))
          ) {
            spanSelector.setAttribute("data-required", "true");
          }
          if ("below" === d) {
            for (let item of p) {
              spanSelector.appendChild(item[0]);
            }
            if (f) spanSelector.appendChild(f[0]);
          } else {
            for (let item of p) {
              spanSelector.appendChild(item[0]);
            }
          }

          if (
            n.type === "swatch_select_color" ||
            n.type === "swatch_select_image"
          ) {
            w.addClass("ap-options__select_swatch");
            let selectSelector = spanSelector.querySelector(
              ".option-avis-dropdown-inner"
            );
            if (selectSelector) {
              selectSelector.setAttribute("role", "group");
              selectSelector.setAttribute("aria-labelledby", c);
              if (n.required) {
                selectSelector.setAttribute("data-required", "true");
              }
            }

            p = selectSelector.querySelectorAll("li.option-avis-value");
          }

          if (
            isCustom149 &&
            n.type.indexOf("swatch") > -1 &&
            n.allow_multiple === "false"
          ) {
            let customWrapper = document.createElement("div");
            customWrapper.classList.add("apo-custom-wrapper");
            let colLeft = document.createElement("div");
            colLeft.classList.add("apo-col-left");
            let mainA = document.createElement("a");
            mainA.classList.add("apo-image-modal");

            let imageDefault =
              "https://cdn.shopify.com/s/files/1/0615/3089/8667/files/No-Image.png?v=1696923538";
            let isSetDefault = false;
            if (optionDefaultValues) {
              let findOptionValueDefault = n.option_values.filter(
                (e) => e.value_id === optionDefaultValues
              );
              if (
                findOptionValueDefault.length > 0 &&
                findOptionValueDefault[0]?.swatch &&
                !n?.is_color &&
                !findOptionValueDefault[0]?.swatch?.is_color &&
                findOptionValueDefault[0]?.swatch?.file_image_url
              ) {
                isSetDefault = true;
                imageDefault =
                  findOptionValueDefault[0]?.swatch?.file_image_url;
              }
            }
            mainA.innerHTML = `<svg class="svg-inline--fa fa-search-plus fa-w-16 position-absolute text-primary" aria-hidden="true" focusable="false" data-prefix="fa" data-icon="search-plus" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path color="#7b3700" d="M304 192v32c0 6.6-5.4 12-12 12h-56v56c0 6.6-5.4 12-12 12h-32c-6.6 0-12-5.4-12-12v-56h-56c-6.6 0-12-5.4-12-12v-32c0-6.6 5.4-12 12-12h56v-56c0-6.6 5.4-12 12-12h32c6.6 0 12 5.4 12 12v56h56c6.6 0 12 5.4 12 12zm201 284.7L476.7 505c-9.4 9.4-24.6 9.4-33.9 0L343 405.3c-4.5-4.5-7-10.6-7-17V372c-35.3 27.6-79.7 44-128 44C93.1 416 0 322.9 0 208S93.1 0 208 0s208 93.1 208 208c0 48.3-16.4 92.7-44 128h16.3c6.4 0 12.5 2.5 17 7l99.7 99.7c9.3 9.4 9.3 24.6 0 34zM344 208c0-75.2-60.8-136-136-136S72 132.8 72 208s60.8 136 136 136 136-60.8 136-136z"></path></svg>
                            <img class="apo-main-image" src="${imageDefault}">`;
            mainA.addEventListener("click", showPopupImageSwatch.bind(this));
            colLeft.appendChild(mainA);

            let colRight = document.createElement("div");
            colRight.classList.add("apo-col-right");
            let customInput = e._createTextInput(
              elemOptionAvisContainer,
              productId,
              `Custom ${n.label_cart}`,
              "",
              `Custom ${n.label_cart}`,
              "",
              "",
              "",
              ""
            );
            colRight.appendChild(spanSelector);
            colRight.appendChild(customInput[0]);
            customWrapper.appendChild(colLeft);
            customWrapper.appendChild(colRight);
            w[0].appendChild(customWrapper);
          } else {
            w[0].appendChild(spanSelector);
          }
          conditionalLogicInstances[productId].register(
            elemOptionAvisContainer,
            productId,
            n,
            w,
            p
          ),
            appendOption(
              n,
              w,
              productInfo,
              productId,
              $formContainer,
              elemOptionAvisContainer
            );
        }
      },
    };

    function getFormHasAddToCart(sectionPageSelector) {
      if (!sectionPageSelector) {
        sectionPageSelector = document;
      }

      let formAddCartsSelector = sectionPageSelector.querySelectorAll(
        window.AP_POptions.apps.productoptions.formAddOptionClassProductPage
      );
      if (formAddCartsSelector && formAddCartsSelector.length > 0) {
        for (let elm of formAddCartsSelector) {
          let buttonAddCart = elm.querySelector(
            window.AP_POptions.addToCartButton
          );
          if (buttonAddCart) {
            return elm;
          }
        }

        return formAddCartsSelector[0];
      }
      return null;
    }

    function appendOptionByWidget(
      customizeryConfig,
      elmContainerQ,
      containerOptionAvis,
      productInfo,
      isMultiPage,
      productId
    ) {
      let elementProductPageSelector = formProductGenOptionJs[productId]
        ? $(formProductGenOptionJs[productId])
        : null;
      let widget = customizeryConfig.widget;
      let position =
        !widget || !widget.position || widget.position == "default"
          ? "prepend"
          : widget.position.split("_")[0];
      let keyElement =
        !widget || !widget.position || widget.position == "default"
          ? "default"
          : widget.position.split("_")[1];
      let elementProductPage = null;
      switch (keyElement) {
        case "variant":
          let selectorAll = elementProductPageSelector.find(
            window.AP_POptions.variantWrapper
          );

          if (!selectorAll || selectorAll.length === 0) {
            selectorAll = elmContainerQ.find(window.AP_POptions.variantWrapper);
          }
          index = "before" == position ? 0 : selectorAll.length - 1;
          if (selectorAll?.length > 0) {
            elementProductPage = $(selectorAll[index]);
            if (
              index > 0 &&
              selectorAll[index].closest(".product-form__option.no-js")
            ) {
              elementProductPage = $(selectorAll[index - 1]);
            }
          } else {
            let findQuantity = elementProductPageSelector.find(
              ".product-form__info-item--quantity"
            );
            if (findQuantity) elementProductPage = findQuantity;
          }
          break;
        case "atc":
          elementProductPage = elementProductPageSelector.find(
            window.AP_POptions.addToCartButton
          );
          if (!elementProductPage || elementProductPage.length === 0) {
            elementProductPage = elmContainerQ.find(
              window.AP_POptions.addToCartButton
            );
          }
          break;
        case "selector":
          if (widget && widget.selector) {
            elementProductPage = elementProductPageSelector.find(
              widget.selector
            );
            if (elementProductPage.length === 0) {
              elementProductPage = elmContainerQ.find(widget.selector);
            }
            if (elementProductPage.length === 0) {
              elementProductPage = elementProductPageSelector.find(
                window.AP_POptions.addToCartButton
              );
            }
          }
          break;

        case "default":
          if (
            elmContainerQ.find("div.ecom__avis-plus--product-options").length
          ) {
            elementProductPage = elmContainerQ
              .find("div.ecom__avis-plus--product-options")
              .first();
          } else {
            elmContainerQ = elmContainerQ.find("div").first();
            if (elmContainerQ.find("form").first()) {
              elmContainerQ = elmContainerQ.find("form").first();
            }

            elementProductPage =
              elementProductPageSelector &&
                (elementProductPageSelector.length === undefined ||
                  elementProductPageSelector.length > 0)
                ? $(elementProductPageSelector)
                : elmContainerQ;
          }
      }

      switch (position) {
        case "before":
          elementProductPage &&
            (elementProductPage.length === undefined ||
              elementProductPage?.length > 0)
            ? elementProductPage.length
              ? containerOptionAvis.insertBefore(elementProductPage[0])
              : containerOptionAvis.insertBefore(elementProductPage)
            : elementProductPageSelector?.prepend(containerOptionAvis);
          break;
        case "after":
          elementProductPage &&
            (elementProductPage.length === undefined ||
              elementProductPage?.length > 0)
            ? elementProductPage.length
              ? containerOptionAvis.insertAfter(elementProductPage[0])
              : containerOptionAvis.insertAfter(elementProductPage)
            : elementProductPageSelector?.prepend(containerOptionAvis);
          break;
        case "prepend":
          elementProductPage &&
            (elementProductPage.length === undefined ||
              elementProductPage?.length > 0)
            ? elementProductPage.prepend(containerOptionAvis)
            : elementProductPageSelector?.prepend(containerOptionAvis);
          break;
        case "append":
          elementProductPage &&
            (elementProductPage.length === undefined ||
              elementProductPage?.length > 0)
            ? elementProductPage.append(containerOptionAvis)
            : elementProductPageSelector?.prepend(containerOptionAvis);
          break;
        default:
          elementProductPageSelector?.prepend(containerOptionAvis);
      }
    }

    function createAvisOptionContainer(
      productInfo,
      productId,
      elemOptionAvisContainer,
      templ_class
    ) {
      // Not product page
      if (productId != apoProductDefault) {
        let container = elemOptionAvisContainer.querySelector(
          `.${container_AP_POptions}`
        );
        if (container) {
          return $(container);
        }

        let containerOptionAvis = $(
          "<div class=" +
          container_AP_POptions +
          (templ_class ? ` ${templ_class} ` : "") +
          "></div>"
        );

        // Find form productPage
        findFormGenOoption(elemOptionAvisContainer, productId, false);
        appendOptionByWidget(
          customizeryConfig,
          $(elemOptionAvisContainer),
          containerOptionAvis,
          productInfo,
          true,
          productId
        );

        conditionalLogicInstances[productId]?.s_check_input_variant(
          elemOptionAvisContainer,
          productId,
          productInfo
        );
        return containerOptionAvis;
      }

      let editOptionPopup = document.querySelector(
        "[data-avis-cart-popup-form] .avis-popupBody"
      );
      if (editOptionPopup) {
        let containerPopup = editOptionPopup.querySelector(
          "#" + container_AP_POptions
        );
        if (containerPopup) return $(containerPopup);
      } else {
        if ($("#" + container_AP_POptions).length > 0) {
          return $("#" + container_AP_POptions);
        }
      }

      let containerOptionAvis = $(
        "<div class=" +
        container_AP_POptions +
        " id=" +
        container_AP_POptions +
        "></div>"
      );
      if (
        templ_class &&
        containerOptionAvis?.className?.indexOf(templ_class) > -1
      )
        containerOptionAvis.classList.add(templ_class);

      // Find form productPage
      findFormGenOoption(elemOptionAvisContainer, productId, editOptionPopup);

      if (editOptionPopup) {
        $(editOptionPopup).prepend(containerOptionAvis);
      } else {
        appendOptionByWidget(
          customizeryConfig,
          $(document),
          containerOptionAvis,
          productInfo,
          false,
          productId
        );
        conditionalLogicInstances[productId]?.s_check_input_variant(
          elemOptionAvisContainer,
          productId,
          productInfo
        );
      }
      return containerOptionAvis;
    }

    function findFormGenOoption(
      elemOptionAvisContainer,
      productId,
      editOptionPopup
    ) {
      let isFormOk = false;
      formProductGenOptionJs[productId] =
        productId !== apoProductDefault ? elemOptionAvisContainer : null;
      for (let key of window.AP_POptions.listKeyAppendOptionPG) {
        let element = elemOptionAvisContainer.querySelectorAll(key);
        if (element?.length > 0) {
          for (let elm of element) {
            let buttonAddCart = elm.querySelector(
              window.AP_POptions.addToCartButton
            );
            if (buttonAddCart) {
              formProductGenOptionJs[productId] = elm;
              isFormOk = true;
              break;
            } else {
              formProductGenOptionJs[productId] = elm;
              if (editOptionPopup) {
                isFormOk = true;
              }
            }
          }
        }
        if (isFormOk) break;
      }
    }

    async function createAvisContainerHidden(
      elemOptionAvisContainer,
      productId,
      fieldName,
      value,
      elem,
      elementName,
      isQuantity = false,
      elmQuantity
    ) {
      if (isNotUseAvisHidden) return;
      let avisAddCartFormActive = formProductGenOptionJs[productId]
        ? $(formProductGenOptionJs[productId])
        : null;
      let avisAddCartFormActiveJS = formProductGenOptionJs[productId];

      if (!avisAddCartFormActive || avisAddCartFormActive.length == 0) {
        console.log("Not Found Form Product");
        return;
      }

      let containerOptionHiddenAvis = avisAddCartFormActiveJS.querySelector(
        `.${window.AP_POptions.classContainerHidden}`
      );
      if (containerOptionHiddenAvis)
        containerOptionHiddenAvis = $(containerOptionHiddenAvis);

      if (containerOptionHiddenAvis && containerOptionHiddenAvis.length > 0) {
      } else {
        containerOptionHiddenAvis = $(
          `<div data-productid='${productId}' class='${window.AP_POptions.classContainerHidden}'></div>`
        );
        avisAddCartFormActive.append(containerOptionHiddenAvis);
      }

      let newFieldName = fieldName?.replaceAll('"', "&quot;");
      let findInput = containerOptionHiddenAvis.find(
        `input[temp-name="${newFieldName}"]`
      );

      if (elem) {
        let elementBoxOption = null;
        // When checked option value for checkbox
        if (elementName == "fieldset") {
          elementBoxOption = elem;
        } else {
          let parents = elem.parents(".avp-value-grid");
          if (parents.length > 0) {
            elementBoxOption =
              parents.parent().length > 0 ? parents.parent() : parents;
          }
        }
        if (!elementBoxOption) elementBoxOption = elem;

        if (!isQuantity) {
          elementBoxOption.find("input.avp-qty-input").each(function () {
            $(this).attr("disabled", "disabled");
          });

          elementBoxOption.find("button.avp-qty-button").each(function () {
            $(this).attr("disabled", "disabled");
          });
        }

        let totalQuantity = 0;
        elementBoxOption.find(":checked").map(function () {
          let quantityInput = $(this)
            .parents(".avp-value-grid")
            .find("input.avp-qty-input");
          if (quantityInput && quantityInput.length > 0) {
            let quantity = quantityInput.val();
            if ($(this).val()) {
              if (!isQuantity) {
                quantityInput.removeAttr("disabled");
              }

              let min = quantityInput.attr("min");
              let max = quantityInput.attr("max");
              if (!quantity) quantity = min > 0 ? min : 1;

              let quantityButtonCut = $(this)
                .parents(".avp-value-grid")
                .find("button.avp-qty-cut");
              quantityButtonCut.each(function () {
                if (min && parseInt(quantity) > parseInt(min)) {
                  $(this).removeAttr("disabled");
                } else {
                  $(this).attr({ disabled: "disabled" });
                }
              });

              let quantityButtonAdd = $(this)
                .parents(".avp-value-grid")
                .find("button.avp-qty-add");
              quantityButtonAdd.each(function () {
                if (!max || (max && parseInt(quantity) < parseInt(max))) {
                  $(this).removeAttr("disabled");
                } else {
                  $(this).attr({ disabled: "disabled" });
                }
              });

              totalQuantity += parseInt(quantity);
              return `${$(this).val()} * ${parseInt(quantity)}`;
            }
          }
          totalQuantity += 1;
          return this.value;
        });

        // Reset input quantity to min when unchecked
        elementBoxOption
          .find("input[type=checkbox]:not(:checked)")
          .each(function () {
            let inputQuantityElm = $(this)
              .closest(".avp-value-grid")
              .find("input.avp-qty-input");
            if (inputQuantityElm)
              inputQuantityElm.val(inputQuantityElm.attr("min"));
          });

        if (elementBoxOption && elementBoxOption.data("max_total_qty")) {
          // Toggle input error display
          window.AP_POptions.apps.productoptions.toggleInputError(elementBoxOption, true);

          // Calculate quantities and limits
          let maxTotalQty = elementBoxOption.data("max_total_qty");
          let maxSelections = elementBoxOption.data("max_selections");
          const selectedCount = elementBoxOption.filter(":checked").length;

          // Handle when total quantity exceeds max total quantity
          if (totalQuantity >= maxTotalQty) {
            // Reset input quantity
            if (elmQuantity) {
              let tempQuantity = totalQuantity - maxTotalQty;
              let newQuantity = parseInt($(elmQuantity).val(), 10) - tempQuantity;
              $(elmQuantity).val(newQuantity);
            }

            // Disable quantity increase buttons
            elementBoxOption.find(":checked").each(function () {
              let quantityButtonCut = $(this).closest(".avp-value-grid").find("button.avp-qty-add");
              quantityButtonCut.each(function () {
                $(this).attr({ disabled: "disabled" });
              });
            });
          }

          // Disable unchecked checkboxes when total quantity plus minimum quantity exceeds max total quantity
          elementBoxOption.find("input[type=checkbox]:not(:checked)").each(function () {
            let inputQuantityElm = $(this).closest(".avp-value-grid").find("input.avp-qty-input");
            if (inputQuantityElm) {
              let minQty = parseInt(inputQuantityElm.attr("min"), 10);
              if (totalQuantity + minQty <= maxTotalQty) {
                this.removeAttribute("disabled");
              } else {
                this.disabled = "disabled";
              }
            }
          });

          // Disable unchecked checkboxes if max selections reached
          if (maxSelections && selectedCount >= maxSelections) {
            elementBoxOption.find("input[type=checkbox]:not(:checked)").each(function () {
              this.disabled = "disabled";
            });
          }

          // Update notification for total quantity max
          if (!elementBoxOption.data("min_total_qty") || (totalQuantity >= elementBoxOption.data("min_total_qty"))) {
            let notify = window.AP_POptions.apps.productoptions.strings.totalQuantityMax;
            if (customizeryConfig.text_customization_notification_max_quantity) {
              notify = customizeryConfig.text_customization_notification_max_quantity;
            }
            elementBoxOption.parent("span").find(".avp-min-max-total").html(
              notify.replace("{selected_quantity}", totalQuantity).replace("{max_total_quantity}", maxTotalQty)
            );
          }
        }

        let tempValueArr = elementBoxOption.find(":checked").map(function () {
          let quantityInput = $(this)
            .parents(".avp-value-grid")
            .find("input.avp-qty-input");
          if (quantityInput && quantityInput.length > 0) {
            let quantity = quantityInput.val();
            let min = quantityInput.attr("min");
            if (!quantity) quantity = min > 0 ? min : 1;
            if ($(this).val()) {
              var variantString = $(this).data("variant-string");
              if (priceModAll[productId].activeVariants[variantString]) {
                priceModAll[productId].activeVariants[variantString][
                  "quantity"
                ] = parseInt(quantity);
              }

              return `${$(this).val()} * ${parseInt(quantity)}`;
            }
          }
          return this.value;
        });
        let tempValue = tempValueArr.get().join(", ");
        if (tempValue) value = tempValue;

        if (
          !tempValue &&
          elementBoxOption.parent("span").find(".avp-min-max-total")
        ) {
          elementBoxOption.parent("span").find(".avp-min-max-total").html("");
        }
      }

      if (findInput && findInput.length > 0) {
        // if (!findInput.attr("nme-disabled")) {
        if (value) {
          if (findInput.attr("disabled")) findInput.removeAttr("disabled");
        } else findInput.attr("disabled", "disabled");
        // }
        findInput.val(value);
      } else {
        let inputHidden = e._createHiddenInput(
          elemOptionAvisContainer,
          productId,
          fieldName,
          true
        );
        if (value) {
          inputHidden.val(value);
          if (inputHidden.attr("disabled")) inputHidden.removeAttr("disabled");
        }
        else inputHidden.attr("disabled", "disabled");
        // if (!inputHidden.attr("nme-disabled")) {
        // if (value) {
        //   if (inputHidden.attr("disabled"))
        //     inputHidden.removeAttr("disabled");
        // } else inputHidden.attr("disabled", "disabled");
        // }

        containerOptionHiddenAvis.append(inputHidden);
      }

      setTimeout(function () {
        getAllProperties(productId);
      }, 300);

      if (!customizeryConfig?.cart_page?.edit_options) return;

      let isHasApo = false;
      avisAddCartFormActive
        .find("input[name*=properties]")
        .each(function (e, t) {
          if (
            t.name &&
            t.name.indexOf("properties[") > -1 &&
            t.value &&
            t.name !== "properties[_has_apo]"
          ) {
            isHasApo = true;
          }
        });

      if (
        isHasApo &&
        !avisAddCartFormActiveJS.querySelector(
          "input[name='properties[_has_apo]']"
        )
      ) {
        let inputHidden = e._createHiddenInput(
          elemOptionAvisContainer,
          productId,
          "_has_apo",
          true
        );
        inputHidden.val(true);
        containerOptionHiddenAvis.append(inputHidden);
      } else if (
        !isHasApo &&
        avisAddCartFormActiveJS.querySelector(
          "input[name='properties[_has_apo]']"
        )
      ) {
        avisAddCartFormActiveJS
          .querySelector("input[name='properties[_has_apo]']")
          .remove();
      }
    }

    function hideConditionLogic(
      e,
      productInfo,
      productId,
      elemOptionAvisContainer
    ) {
      var o = conditionalLogicInstances[productId];
      if (
        ((e =
          e ||
          createAvisOptionContainer(
            productInfo,
            productId,
            elemOptionAvisContainer
          )),
          o.active && !e.hasClass("io-inputs-loading"))
      ) {
        window.AP_POptions.apps.productoptions.containerCssDisplay =
          e.css("display");
        var r = e[0];
        r.style.setProperty("display", "none", "important"),
          e.addClass("io-inputs-loading");
      }
    }
    function i_lasted(productInfo, productId, elemOptionAvisContainer) {
      var i = conditionalLogicInstances[productId];
      i.active &&
        i.runAfterTimeouts(function () {
          $formContainer = createAvisOptionContainer(
            productInfo,
            productId,
            elemOptionAvisContainer
          );
          var i = $formContainer[0];
          i.style.removeProperty("display"),
            "none" !==
            window.AP_POptions.apps.productoptions.containerCssDisplay &&
            i.style.setProperty(
              "display",
              window.AP_POptions.apps.productoptions.containerCssDisplay ||
              "block",
              ""
            ),
            $formContainer.removeClass("io-inputs-loading");
        });

      createTotalAdd(elemOptionAvisContainer, productId);
    }
    function appendOption(
      optionInfo,
      boxOption,
      productInfo,
      productId,
      formContainer,
      elemOptionAvisContainer
    ) {
      var formContainer = formContainer,
        conditionlogic = conditionalLogicInstances[productId];
      formContainer &&
        (hideConditionLogic(
          formContainer,
          productInfo,
          productId,
          elemOptionAvisContainer
        ),
          formContainer.append(boxOption),
          eventApi.fieldLoad(
            {
              name: optionInfo.label_cart,
              element: boxOption,
              fieldConfig: optionInfo,
              hasConditionalLogic:
                !!conditionlogic.reactions[optionInfo.label_cart],
            },
            productId
          ));

      if (optionInfo.type == "color") {
        let inputColor = $("input[field-name='" + optionInfo.label_cart + "']");
        if (inputColor) {
          createAvisContainerHidden(
            elemOptionAvisContainer,
            productId,
            optionInfo.label_cart,
            inputColor.val()
          );
        }
      }

      if (optionInfo.type === "date") {
        var options = {
          theme: {
            bgcolor: "#275efe",
            color: "#ffffff",
            pnColor: "#53c0d9",
          },
          isToday: false,
          onClose: false,
          trigger: "click",
          language: {
            name: "en",
            month: [
              "01",
              "02",
              "03",
              "04",
              "05",
              "06",
              "07",
              "08",
              "09",
              "10",
              "11",
              "12",
            ],
            weeks: ["SU", "MO", "TU", "WE", "TH", "FR", "SA"],
            times: ["Hour", "Minute", "Second"],
            timetxt: ["Time", "Start Time", "End Time"],
            backtxt: "Back",
            clear: "Clear",
            today: "Now",
            yes: "Confirm",
            close: "Close",
          },
          format: optionInfo.date_format,
          donefun: function (t) {
            $(`#${optionInfo.element_id}`).change();
          },
        };

        // Set mindate
        switch (optionInfo.min_date_type) {
          case "today":
            options.minDate = formatDate(new Date(), "yyyy-MM-dd") + " ";
            break;

          case "designated":
            if (optionInfo.min_date_value) {
              options.minDate = optionInfo.min_date_value;
            }

          case "fix_number_days":
            if (optionInfo?.date_fixed_min_days) {
              let newDateMin = new Date();
              newDateMin.setDate(
                newDateMin.getDate() + parseInt(optionInfo?.date_fixed_min_days)
              );
              options.minDate = formatDate(newDateMin, "yyyy-MM-dd") + " ";
            }
        }
        // Set maxdate
        switch (optionInfo.max_date_type) {
          case "today":
            options.maxDate = formatDate(new Date(), "yyyy-MM-dd") + " ";
            break;

          case "designated":
            if (optionInfo.max_date_value) {
              options.maxDate = optionInfo.max_date_value;
            }

          case "fix_number_days":
            if (optionInfo?.date_fixed_max_days) {
              let newDateMax = new Date();
              newDateMax.setDate(
                newDateMax.getDate() + parseInt(optionInfo?.date_fixed_max_days)
              );
              options.maxDate = formatDate(newDateMax, "yyyy-MM-dd") + " ";
            }
        }
        window.ap_front_settings.jeDate(`#${optionInfo.element_id}`, options);
      }

      if (optionInfo.type === "color") {
        window.ap_front_settings.jeColor(`#${optionInfo.element_id}`, options);
      }
      if (optionInfo.type === "file") {
        const fileFlag = {
          is_multi_files: optionInfo.is_multi_files ?? false,
          is_cropper: optionInfo.is_cropper ?? false,
        };
        window.ap_front_settings.file(
          elemOptionAvisContainer,
          productId,
          null,
          `#${optionInfo.element_id}`,
          options,
          $,
          createAvisContainerHidden,
          priceMod.variantChange,
          optionInfo.default_value,
          fileFlag
        );
      }

      if (optionInfo.type === "font") {
        window.ap_front_settings.font(
          elemOptionAvisContainer,
          productId,
          `#${optionInfo.element_id}`,
          $,
          createAvisContainerHidden,
          priceMod.variantChange,
          optionInfo.default_value,
          optionInfo.font_selected,
          optionInfo.applied_for
        );
      }
    }

    function formatDate(date, format) {
      var t = format;
      var i = {
        "M+": date.getMonth() + 1,
        "d+": date.getDate(),
        "h+": date.getHours(),
        "m+": date.getMinutes(),
        "s+": date.getSeconds(),
        "q+": Math.floor((date.getMonth() + 3) / 3),
        S: date.getMilliseconds(),
      };
      for (var e in (/(y+)/.test(t) &&
        (t = t.replace(
          RegExp.$1,
          (date.getFullYear() + "").substr(4 - RegExp.$1.length)
        )),
        i))
        new RegExp("(" + e + ")").test(t) &&
          (t = t.replace(
            RegExp.$1,
            1 == RegExp.$1.length
              ? i[e]
              : ("00" + i[e]).substr(("" + i[e]).length)
          ));
      return t;
    }
    function createLinkCss(href) {
      if (!href) return;

      let mainCssSelector = document.createElement("link");
      mainCssSelector.setAttribute("href", href);
      mainCssSelector.setAttribute("rel", "stylesheet");
      mainCssSelector.setAttribute("type", "text/css");
      document.head.appendChild(mainCssSelector);
    }

    async function mainRenderOptions(
      optionSets,
      productInfo,
      productId,
      elemOptionAvisContainer
    ) {
      if (window.ap_front_settings.shop_id === "64896630969") {
        var divAvis = elemOptionAvisContainer.querySelector(
          `.${container_AP_POptions}`
        );
        if (divAvis) {
          $(divAvis).empty();
        }
      }

      // optionSets[0].options[0].type = "phone";
      // optionSets[0].options[1].type = "font";
      // optionSets[0].options[1].font_selected = [
      //   "ABeeZee",
      //   "Abel",
      //   "Abhaya Libre",
      //   "Abril Fatface",
      //   "Aclonica",
      //   "Acme",
      //   "Actor",
      //   "Advent Pro",
      // ];
      // optionSets[0].options[1].applied_for = [
      //   {
      //     field: "text",
      //     field_label: "Single line text",
      //     tag: "input",
      //   },
      // ];

      // var r = $(`.${container_AP_POptions}`);
      let productHandles = [];
      for (let optionSet of optionSets) {
        if (optionSet.options && optionSet.options.length > 0) {
          for (let option of optionSet.options) {
            if (option && option.option_values) {
              for (let optionValue of option.option_values.filter(
                (x) =>
                  x.handle &&
                  (x.type == "useexistingvariant" || x.type == "chargeorbundle")
              )) {
                if (!productHandles.includes(optionValue.handle))
                  productHandles.push(optionValue.handle);
              }

              if (option?.option_url === OPTION_URL.group) {
                for (let optionValue of option.option_values) {
                  let handle = optionValue?.url?.split("/").pop();
                  if (handle) productHandles.push(handle);
                }
              }
            }
          }
        }
      }
      // r.length > 1 && spLog(!0, "multiple containers", !0), r.empty();
      if (productHandles.length > 0)
        await priceMod.getAllProductVariantBundles(productHandles);

      //createLinkCss(isCssV2 ? window.ap_front_settings?.url_css_main_v2 : window.ap_front_settings?.url_css_main_v1);
      if (
        window.ap_front_settings?.url_css_date &&
        optionSets &&
        optionSets.filter(
          (x) => x.options.filter((y) => y?.type === "date").length > 0
        ).length > 0
      ) {
        createLinkCss(window.ap_front_settings?.url_css_date);
      }
      if (!optionSets || optionSets.length === 0) return;

      let checkConditionVariant = optionSets.filter((x) =>
        x.options?.filter((y) =>
          y?.conditional_logic?.condition_items?.filter(
            (z) => z?.field === "avis_shopify_option"
          )
        )
      );

      var p = "",
        listTemplOptionSet = [],
        l = conditionalLogicInstances[productId],
        d = optionSets
          .filter(function (e, t) {
            return (
              !(!e.options || !e.options.length) && (l.init(e.options, !t), !0)
            );
          })
          .map(function (optionSet, i) {
            if (
              optionSet?.template_info?.class_name &&
              optionSet?.template_info?.css &&
              !listTemplOptionSet.includes(optionSet?.template_info?.class_name)
            ) {
              p += " " + optionSet?.template_info?.css;
            }
            return (
              $.each(optionSet.options, function (t, r) {
                if (priceMod.cartItemEdit && priceMod.cartItemEdit.properties) {
                  if (
                    priceMod.cartItemEdit.properties.hasOwnProperty(
                      r.label_cart
                    )
                  ) {
                    if (r.is_multi_files) {
                      console.log(
                        "priceMod.cartItemEdit",
                        priceMod.cartItemEdit
                      );
                      priceMod.cartItemEdit.properties[r.label_cart] = "";
                      priceMod.cartItemEdit.properties[r.label_cart] =
                        groupValueForMultiUpload(
                          priceMod.cartItemEdit.properties
                        )[r.label_cart] ?? "";
                    }
                    let valueOptionInCart =
                      priceMod.cartItemEdit.properties[r.label_cart];
                    r.default_value = valueOptionInCart;
                    r.default_status = valueOptionInCart ? "true" : "false";

                    if (valueOptionInCart && r.option_values) {
                      r.is_option_default_value = true;
                      r.option_default_value = valueOptionInCart;
                      let findValueId = r.option_values?.find(
                        (x) => x.value === valueOptionInCart
                      );
                      if (findValueId)
                        r.option_default_value = findValueId["value_id"];
                    }
                  }
                }

                if (r.option_values && r.option_url === OPTION_URL.group) {
                  for (let optionValueUrl of r.option_values.filter((x) =>
                    x?.url?.trim()
                  )) {
                    let handle = optionValueUrl?.url?.split("/")?.pop()?.trim();
                    let productByHandle = priceMod.productVariantBundles.filter(
                      (x) => x.handle == handle
                    );

                    if (productByHandle.length > 0) {
                      optionValueUrl["url_name"] = productByHandle[0]?.title;
                      optionValueUrl["url_image"] =
                        productByHandle[0]?.featured_image;
                    }
                  }
                }

                if (
                  r.option_values &&
                  r.option_values.filter(
                    (x) =>
                      x.type == "useexistingvariant" ||
                      x.type == "chargeorbundle"
                  ).length > 0
                ) {
                  for (let optionValue of r.option_values.filter(
                    (x) =>
                      x.type == "useexistingvariant" ||
                      x.type == "chargeorbundle"
                  )) {
                    if (
                      optionValue.productVariationId &&
                      optionValue.productId
                    ) {
                      let productBundle = priceMod.productVariantBundles.filter(
                        (x) => x.id == optionValue.productId
                      );
                      if (
                        productBundle.length > 0 &&
                        productBundle[0].variants &&
                        productBundle[0].variants.length > 0
                      ) {
                        let productVariantBundle =
                          productBundle[0].variants.filter(
                            (x) => x.id == optionValue.productVariationId
                          );
                        if (productVariantBundle.length > 0) {
                          optionValue["is_exist"] = true;
                          optionValue.price =
                            productVariantBundle[0].price ?? 0;
                        } else {
                          optionValue["is_exist"] = false;
                          optionValue.price = 0;
                        }
                      } else {
                        optionValue["is_exist"] = false;
                        optionValue.price = 0;
                      }
                    } else if (optionValue.productId) {
                      let productBundle = priceMod.productVariantBundles.filter(
                        (x) => x.id == optionValue.productId
                      );
                      if (
                        productBundle.length > 0 &&
                        productBundle[0].variants &&
                        productBundle[0].variants.length > 0
                      ) {
                        let productVariantBundle = productBundle[0].variants[0];
                        optionValue["is_exist"] = true;
                        optionValue.price = productVariantBundle.price ?? 0;
                      } else {
                        optionValue["is_exist"] = false;
                        optionValue.price = 0;
                      }
                    } else {
                      optionValue["is_exist"] = false;
                      optionValue.price = 0;
                    }

                    if (optionValue.type == "chargeorbundle") {
                      optionValue.type = "useexistingvariant";
                    }
                  }
                }

                e.add(
                  this,
                  {
                    uuid: shop_id,
                    templ_class: optionSet?.template_info?.class_name,
                  },
                  i + "-" + t,
                  productInfo,
                  productId,
                  elemOptionAvisContainer
                );
              }),
              optionSet.options
            );
          });
      subfixLabelCart(),
        (window.AP_POptions.apps.productoptions._fieldsReady = !0),
        i_lasted(productInfo, productId, elemOptionAvisContainer);
      if (!checkConditionVariant && shop_id === "60370419756") {
        setTimeout(function () {
          handleChangeShopifyVariant(
            elemOptionAvisContainer,
            productId,
            productInfo
          );
        }, 200)
      }
      if (checkConditionVariant)
        setTimeout(function () {
          handleChangeShopifyVariant(
            elemOptionAvisContainer,
            productId,
            productInfo
          );
        }, 200),
          x(),
          "function" == typeof window.AP_POptions.apps.productoptions.ready &&
          (window.AP_POptions.apps.productoptions.ready.call(
            $(`#${container_AP_POptions}`),
            Array.prototype.concat.apply([], d)
          ),
            datePicker.hasDatePicker(d) && datePicker.fixLegacyHandlers()),
          "function" ==
          typeof window.AP_POptions.apps.productoptions.uploaderyReady &&
          window.AP_POptions.apps.productoptions.uploaderyReady.call(
            $(`#${container_AP_POptions}`),
            Array.prototype.concat.apply([], d)
          ),
          addStyleCss(p),
          eventApi.appLoad({
            fields: d,
            hasConditionalLogic: l.active,
            hasBundledProducts: !!priceModAll[productId].activeVariants.length,
          });
    }

    function groupValueForMultiUpload(obj) {
      const grouped = {};

      for (const key in obj) {
        if (obj.hasOwnProperty(key)) {
          // Extract the prefix (part before the hyphen) or the entire key if no hyphen
          const prefix = key.includes("-") ? key.split("-")[0] : key;

          // Initialize an array for each prefix, if it doesn't already exist
          if (!grouped[prefix]) {
            grouped[prefix] = [];
          }

          // Push the value to the corresponding array, if the value is not empty
          if (obj[key]) {
            grouped[prefix].push(obj[key]);
          }
        }
      }

      // Join the values in each group with a comma
      for (const key in grouped) {
        grouped[key] = grouped[key].join(",");
      }

      return grouped;
    }

    function addStyleCss(e) {
      $("head").append(
        "<style>" +
        (customizeryConfig.css ?? "") +
        (customizeryConfig.product_page &&
          customizeryConfig.product_page.add_price_to_variant
          ? AvisOptionsConfig.productVariantPriceCssHide
          : "") +
        ` ${e} </style>`
      ),
        $("head").append(
          '<style>.avp-productoptionswatchwrapper { vertical-align: middle; } .avp-productoptionswatchwrapper input[type="radio"] {\tposition: fixed; opacity: 0; } .avp-productoptionswatchwrapper input[type="radio"]:checked + .avp-productoptionswatch { border: 1px solid #fff; box-shadow: 0px 0px 0px 1px #ad0000; } .avp-productoptionswatchwrapper input[type="checkbox"] { position: fixed; opacity: 0; } .avp-productoptionswatchwrapper input[type="checkbox"]:checked + .avp-productoptionswatch { border: 1px solid #fff; box-shadow: 0px 0px 0px 1px #ad0000; }</style>'
        );
    }
    function subfixLabelCart() {
      var e = $(`.${container_AP_POptions}`);
      e.length > 0 &&
        $.each(e, function (e, t) {
          var n = $(t).closest("form"),
            i = [],
            o = [];
          $(n)
            .find(":input")
            .each(function (e, t) {
              t.name &&
                t.name.indexOf("properties[") > -1 &&
                !$(t).parents(`.${container_AP_POptions}`).length > 0 &&
                t.name &&
                (o[t.name] = [t.name]);
            });
          var r = "",
            a = !1,
            s = !0;
          $(t)
            .find(":input")
            .each(function (e, t) {
              if (t.name.indexOf("properties[") > -1) {
                var n = t.name,
                  p = !1;
                if ("checkbox" !== t.type || "button_multi" !== t.type) {
                  if ("radio" === t.type || "button_single" === t.type) {
                    var c = $(t)
                      .closest('[role="group"]')
                      .attr("aria-labelledby");
                    (p = c === r), p || (a = !1), (r = c);
                  } else (a = !1), (r = "");
                  if ((p && a) || !p)
                    if (
                      (o[n]
                        ? ((s = !1), (a = !0))
                        : i[n] && ((s = !0), (a = !0)),
                        a)
                    ) {
                      if (i[n]) var l = i[n];
                      else var l = { existing_entries: [], is_io_duplicate: s };
                      p || l.existing_entries.push(n);
                      var d = s ? "_io_duplicate" : "_third_party_duplicate",
                        u = s
                          ? l.existing_entries.length
                          : l.existing_entries.length + 1,
                        f =
                          "properties[" +
                          n
                            .replace("properties[", "")
                            .replace("]", "")
                            .replace("properties[", "")
                            .replace("]", "") +
                          "-" +
                          u +
                          "" +
                          //d +
                          "]";
                      spLog(
                        !0,
                        (s ? "IO" : "Third party") +
                        " field already exists with name " +
                        n +
                        ". Renaming IO field with name:" +
                        f,
                        !0
                      ),
                        (i[n] = l),
                        (t.name = f);
                    } else i[n] = { existing_entries: [n], is_io_duplicate: s };
                }
              }
            });

          let formatPrice = priceMod.formatNewMoney(totalPriceAdd);
          let priceString = formatPrice;
          let defaultTextSelection =
            customizeryConfig && customizeryConfig.text_price_add
              ? customizeryConfig.text_price_add
              : "Selection will add {price_add} to the price";
          let priceOvewrite = `<span ${t.id === "avpoptions-container__v2"
            ? "id='avp-productoption-totalpriceadd'"
            : ""
            } class='avp-productoption-totalpriceadd'>${priceString}</span>`;
          defaultTextSelection = defaultTextSelection?.replaceAll(
            "{price_add}",
            priceOvewrite
          );
          if (
            !customizeryConfig.product_page ||
            customizeryConfig.product_page.show_extra_charge
          ) {
            if (t.querySelector(".avp-productoption-total-add")) {
            } else {
              $(t).append(
                `<div ${t.id === "avpoptions-container__v2"
                  ? "id='avp-productoption-total-add'"
                  : ""
                } class='avp-productoption-total-add apo-total-addcharge-hide'>${defaultTextSelection}</div>`
              );
            }
          }
          if (t.querySelector(".apo-total-addcharge")) {
          } else {
            $(t).append(
              `<input type="hidden" value="0" class="apo-total-addcharge" />`
            );
          }

          if (isShowWatermarkOnProductPage === true && !priceMod.cartItemEdit) {
            if (t.querySelector(".avp-watermark-footer")) {
            } else {
              $(t).append(
                `<div ${t.id === "avpoptions-container__v2"
                  ? "id='avp-watermark-footer'"
                  : ""
                } class='avp-watermark-footer'>
                  <p class="avp-watermark-footer-title">Powered by AvisPlus</p>
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 14 14" class="avp-watermark-footer-icon">
                    <defs>
                      <style>
                        .cls-1 {
                          fill: #7f7f7f;
                        }
                      </style>
                    </defs>
                    <path id="Icon" class="cls-1" d="M7,14a7,7,0,1,1,7-7A7.008,7.008,0,0,1,7,14ZM6.125,9.625v1.75H7.874V9.625ZM7,4.375a.876.876,0,0,1,.875.875c0,.357-.476.673-.875.875a1.64,1.64,0,0,0-.875,1.621v.129H7.874c0-.287.263-.478.6-.72a2.2,2.2,0,0,0,1.156-1.9,2.59,2.59,0,0,0-.769-1.97A2.678,2.678,0,0,0,7,2.625,2.628,2.628,0,0,0,4.375,5.25h1.75A.876.876,0,0,1,7,4.375Z"/>
                  </svg>
                  <p style='padding: 2px 12px !important;' class="avp-watermark-footer-text">Contact support to hide this watermark.</p>
                </div>`
              );
            }
          }
        });
    }
    function p_disabled(e, t, n) {
      if (n && n.length) {
        const maxSelections = e.max_selections;
        const maxTotalQty = e.max_total_qty;
        const selectedCount = n.filter(":checked").length;

        let disableItems = false;

        // Kiểm tra maxSelections
        if (parseInt(maxSelections, 10) > 0 && selectedCount >= parseInt(maxSelections, 10)) {
          disableItems = true;
        }

        // Kiểm tra maxTotalQty
        if (parseInt(maxTotalQty, 10) > 0 && selectedCount >= parseInt(maxTotalQty, 10)) {
          disableItems = true;
        }

        // Vô hiệu hóa hoặc kích hoạt lại các phần tử
        if (disableItems) {
          n.filter(":not(:checked)").each(function () {
            this.disabled = "disabled";
          });
        } else {
          n.filter(":disabled").each(function () {
            this.disabled = false;
          });
        }
      }
    }

    function toggleStyleErrorForInput(e, t) {
      // if (window.AP_POptions.apps.productoptions.checkExistInputInvalid) return;
      t
        ? e.removeClass("apo-required-error")
        : e.addClass("apo-required-error");
    }
    function validateDataInput(e, t, showToggleError = true) {
      var n,
        i = e.tagName.toLowerCase();
      n =
        "input" === i
          ? e.type + ":" + t
          : "fieldset" === i
            ? "checkboxes:" + t
            : "span" === i || "div" === i
              ? "radiobuttons:" + t
              : i + ":" + t;
      var o = window.AP_POptions.apps.productoptions,
        r = $(e);
      let message = "";
      switch (n) {
        case "textarea:required":
        case "text:required":
        case "number:required":
          message =
            "" === r.val()?.trim()
              ? (showToggleError && o.toggleInputError(r, !1),
                "number" === e.type
                  ? customizeryConfig.text_alert_number_input
                    ? customizeryConfig.text_alert_number_input
                    : o.strings.errorMessages.forNumberInputs
                  : customizeryConfig.text_alert_text_input
                    ? customizeryConfig.text_alert_text_input
                    : o.strings.errorMessages.forTextInputs)
              : "";
          break;
        case "hidden:required":
          let apoFile = r.parent();

          message =
            "" === r.val()?.trim()
              ? (showToggleError &&
                o.toggleInputError(apoFile ? apoFile : r, !1),
                customizeryConfig.text_alert_file_upload
                  ? customizeryConfig.text_alert_file_upload
                  : o.strings.errorMessages.forFileInputs)
              : "";
          break;
        case "select:required":
          message = $("option:selected:disabled", r).length
            ? (showToggleError && o.toggleInputError(r, !1),
              customizeryConfig.text_alert_text_select
                ? customizeryConfig.text_alert_text_select
                : o.strings.errorMessages.forDropdowns)
            : "";
          break;
        case "radiobuttons:required":
          let inputRadio = $('input[type="radio"]:checked', r);
          message =
            0 === $("input[type=radio]", r).length
              ? ""
              : 0 === inputRadio.length || !inputRadio[0]?.value
                ? (showToggleError && o.toggleInputError(r, !1),
                  customizeryConfig.text_alert_checkbox_radio_swatches_input
                    ? customizeryConfig.text_alert_checkbox_radio_swatches_input
                    : o.strings.errorMessages.forCheckboxes)
                : "";
          break;
        case "checkbox:required":
          message =
            r.length > 0 && !r[0].checked
              ? (showToggleError && o.toggleInputError(r.parent(), !1),
                o.strings.errorMessages.forSwitch)
              : "";
          break;
        case "checkboxes:required":
          message =
            0 === $("input[type=checkbox]", r).length
              ? ""
              : 0 === $('input[type="checkbox"]:checked', r).length
                ? (showToggleError && o.toggleInputError(r, !1),
                  customizeryConfig.text_alert_checkbox_radio_swatches_input
                    ? customizeryConfig.text_alert_checkbox_radio_swatches_input
                    : o.strings.errorMessages.forCheckboxes)
                : "";
          break;
        case "checkboxes:minvalue":
          if (0 === $("input[type=checkbox]", r).length) message = "";
          var a =
            r.data("min_selections") && parseInt(r.data("min_selections"), 10);
          if (!a) message = !1;
          var s = $('input[type="checkbox"]:checked', r).length;
          message =
            s > 0 && s < a
              ? customizeryConfig.customize_alert_required_min_selections
                ? (showToggleError && o.toggleInputError(r, !1),
                  customizeryConfig.customize_alert_required_min_selections.replace(
                    "{min_selections}",
                    a
                  ))
                : (showToggleError && o.toggleInputError(r, !1),
                  o.strings.errorMessages.forMinimumValues.replace(
                    "{min_selections}",
                    a
                  ))
              : "";
          break;
        case "checkboxes:minquantity":
          var a =
            r.data("min_total_qty") && parseInt(r.data("min_total_qty"), 10);
          if (!a) message = !1;
          let totalQuantity = 0;
          $('input[type="checkbox"]:checked', r).map(function () {
            let quantityInput = $(this)
              .parents(".avp-value-grid")
              .find("input.avp-qty-input");
            if (quantityInput && quantityInput.length > 0) {
              let quantity = quantityInput.val();
              if (!quantity) quantity = 1;
              totalQuantity += parseInt(quantity);
            }
            return true;
          });

          message =
            totalQuantity > 0 && totalQuantity < a
              ? customizeryConfig.customize_alert_required_min_quantity
                ? (showToggleError && o.toggleInputError(r, !1),
                  customizeryConfig.customize_alert_required_min_quantity.replace(
                    "{min_quantity}",
                    a
                  ))
                : (showToggleError && o.toggleInputError(r, !1),
                  o.strings.errorMessages.forMinQuantity.replace(
                    "{min_quantity}",
                    a
                  ))
              : "";
          break;

        case "text:data-allow-value":
          let allowValue = r.attr("data-allow-value");
          if (allowValue) {
            if (
              allowValue == "only_letters" &&
              o.allowedValueLetterRegex.test(r.val())
            ) {
              showToggleError && o.toggleInputError(r, !1);
              return o.strings.errorMessages.forTextLettersValid;
            } else if (
              allowValue == "only_letters_and_numbers" &&
              o.allowedValueLetterNumberRegex.test(r.val())
            ) {
              showToggleError && o.toggleInputError(r, !1);
              return o.strings.errorMessages.forTextLettersAndNumbersValid;
            }
          }
          break;

        case "text:minlength":
          let minLength = r.attr("minlength");
          let value = r.val()?.trim();

          if (minLength && value && value.length < parseInt(minLength, 10)) {
            showToggleError && o.toggleInputError(r, !1);
            return o.strings.errorMessages.forTextMinLength.replace(
              "{min_length}",
              minLength
            );
          }
          break;

        case "text:value-phone-input":
          let input = document.querySelector(`#${e.id}`);
          let phoneValue = r.val();
          if (phoneValue.length) {
            let validPhoneNumber = window.apoPhoneInputGlobals
              .getInstance(input)
              .isValidNumberPrecise();

            if (!validPhoneNumber) {
              showToggleError && o.toggleInputError(r, !1);
              return o.strings.errorMessages.forTextPhone;
            }
          }
          break;

        case "text:value-email-input":
          let emailValue = r.attr("value-email-input");
          if (emailValue === "") {
            if (r.val().trim() === "") {
              return true;
            }
            let emailRegex = /^[a-zA-Z0-9.]+@[a-zA-Z0-9]+\.[a-zA-Z]{2,}$/;
            if (!emailRegex.test(r.val())) {
              showToggleError && o.toggleInputError(r, !1);
              return o.strings.errorMessages.forTextEmail;
            }
          }
          break;
      }
      if (message) return message;

      return "";
    }

    function submitEditOption(e) {
      e.preventDefault();
      e.stopImmediatePropagation();
      p_check_validate(e, document, apoProductDefault);
    }
    function p_check_validate(e, elemOptionAvisContainer, productId, isRedirectCheckout = false) {
      if (
        window.ap_front_settings.check_on.add_to_cart &&
        window.ap_front_settings.custom_error_message
      ) {
        return (
          alert(window.ap_front_settings.custom_error_message),
          e.stopImmediatePropagation(),
          !1
        );
      }

      if (priceMod.isCloneButtonAddCart) priceMod.addLoadingAddCart(e.target);

      if ("function" == typeof window.AP_POptions.apps.productoptions.validate)
        return (
          spLog(
            !0,
            "theme has custom validation, conditional logic may not work as expected",
            !0
          ),
          window.AP_POptions.apps.productoptions.validate(e)
        );
      var n = "";
      const i = function (e) {
        var t = "";
        return (
          $(
            "input[type=text][required], textarea[required], input[type=number][required], input[type=hidden][required], fieldset[data-required], select[required], span[data-required],div[data-required],input[type=checkbox][avp-data=switch][required]",
            e
          )
            .not("[disabled]")
            .each(function (e, n) {
              t ||
                (t = window.AP_POptions.apps.productoptions.validateInput(
                  n,
                  "required"
                ));
            }),
          !t &&
          $("input[type=text][data-allow-value]", e)
            .not("[disabled]")
            .each(function (e, n) {
              t ||
                (t = window.AP_POptions.apps.productoptions.validateInput(
                  n,
                  "data-allow-value"
                ));
            }),
          !t &&
          $("input[type=text][minlength]", e)
            .not("[disabled]")
            .each(function (e, n) {
              t ||
                (t = window.AP_POptions.apps.productoptions.validateInput(
                  n,
                  "minlength"
                ));
            }),
          !t &&
          $("fieldset", e)
            .not("[disabled]")
            .each(function (e, n) {
              t ||
                (t = window.AP_POptions.apps.productoptions.validateInput(
                  n,
                  "minvalue"
                )) ||
                (t = window.AP_POptions.apps.productoptions.validateInput(
                  n,
                  "minquantity"
                ));
            }),
          $("input[type=text].iti__tel-input", e)
            .not("[disabled]")
            .each(function (e, n) {
              t ||
                (t = window.AP_POptions.apps.productoptions.validateInput(
                  n,
                  "value-phone-input"
                ));
            }),
          !t &&
          $("input[type=text][value-email-input]", e)
            .not("[disabled]")
            .each(function (e, n) {
              t ||
                (t = window.AP_POptions.apps.productoptions.validateInput(
                  n,
                  "value-email-input"
                ));
            }),
          t
        );
      };
      if (
        (($io = $(`#${container_AP_POptions}`)),
          (n = i(
            elemOptionAvisContainer &&
              elemOptionAvisContainer.querySelector(`.${container_AP_POptions}`)
              ? $(
                elemOptionAvisContainer.querySelector(
                  `.${container_AP_POptions}`
                )
              )
              : $io
          )),
          n && n.length)
      ) {
        var o = eventApi.validationFail({ error: n });
        priceMod.removeLoadingAddCart(e.target);
        return (
          o || alert(n), e.preventDefault(), e.stopImmediatePropagation(), !1
        );
      }
      return (
        eventApi.validationSuccess(),
        priceMod.isEditOptionCart
          ? editOptionsToCart(e, productId)
          : addProductBundleToCart(e, productId, isRedirectCheckout)
      );
    }
    function r(e, t) {
      if (
        t && (shop_id !== "86097166639" && shop_id !== "87077945665")
      )
        return (
          console.log(
            "Avis dynamic checkout: button clicked + price mods selected, preventing submission"
          ),
          window.alert(
            window.AP_POptions.apps.productoptions.strings.errorMessages
              .forDynamicCheckout
          ),
          e.stopImmediatePropagation(),
          !1
        );
      var n = $(
        ".sp-dynamic-checkout-button-" + e.data["io-dynamic-checkout-type"]
      );
      return n.data("uploadery-dynamic-bound")
        ? (spLog(
          !0,
          "dynamic checkout: form fields are valid and uploadery is present, allowing uploadery to run it's validation",
          !0
        ),
          !0)
        : (a(e), !0);
    }
    function a(e) {
      if ("secondary" === e.data["io-dynamic-checkout-type"])
        return (
          spLog(
            !0,
            'dynamic checkout: clicking "more payment options" button.',
            !0
          ),
          $(".shopify-payment-button__more-options").click(),
          !0
        );
      if ("primary" === e.data["io-dynamic-checkout-type"]) {
        var t = $(".shopify-payment-button__button"),
          n = {
            paypal: '[role="button"]',
            amazon: "form > button",
            google: "iframe",
            shopify: "",
          };
        $.each(n, function (e, n) {
          if (!n)
            return (
              spLog(
                !0,
                "dynamic checkout: clicking native shopify button.",
                !0
              ),
              priceMod.buyItNow(),
              // t.click(), // Continue buy it now
              !0
            );
          if ("google" === e) {
            spLog(!0, "dynamic checkout: clicking google pay button.", !0);
            var i = $(t.find(n).contents());
            return i.find("button").click(), !0;
          }
          return t.find(n).length
            ? (spLog(!0, "dynamic checkout: clicking " + e + " button.", !0),
              t.find(n).click(),
              !0)
            : void 0;
        });
      }
    }

    function addProductBundleToCart(e, productId, isRedirectCheckout = false) {
      if (e.data && e.data["io-dynamic-checkout-type"]) {
        priceMod.options.skipPriceModIfVisible = "";
        var i = r(e, priceMod.getVariantSubmissions(productId).length);
        priceMod.removeLoadingAddCart(e.target);
        return (
          i &&
          window.AP_POptions.apps.productoptions.themeAppExtensionId &&
          ($($io)
            .css("display", "none")
            .prependTo(
              "form#" +
              window.AP_POptions.apps.productoptions.themeAppExtensionId
            ),
            console.log(
              "Avis Buy now button clicked in Shopify Theme 2.0.  Moving IO div to be within the Add to Cart form."
            )),
          !0
        );
      }

      if (priceMod.isCloneButtonAddCart) {
        priceMod.orderId = new Date().getTime();
        priceMod.listInputAddBundle.forEach((e) => {
          if ($(`[name="${e}"]`).length > 0) $(`[name="${e}"]`).remove();
        });

        let variantSelection = document.querySelector("variant-selection");
        if (shop_id === "64722796780" && variantSelection) {
          variantSelection.getVariant().then(variant => {
            if (!variant) {
              priceMod.removeLoadingAddCart(e.target);
              return;
            }
            else {
              return priceMod.addToCart(productId, e, async function (i) {
                let productForm = e.target.closest("product-form");

                let productFormAdd = e.target.closest('form[action="/cart/add"]');

                if (i && i.status) {
                  console.log(
                    "Avis: price variants: add variant to cart error ",
                    i.description
                  );
                  priceMod.removeLoadingAddCart(e.target);
                  if (productForm) {
                    productForm.error = true;
                    if (typeof productForm.handleErrorMessage === "function") {
                      productForm.handleErrorMessage(i.description);
                    }
                  } else if (i.description) alert(i.description);
                  else alert("Error!");
                  return;
                }

                if (i?.items?.length > 0) {
                  i.key = i.items[0].key;
                  let mainProductCart = i.items.find(
                    (x) =>
                      Object.keys(x.properties).length > 0 &&
                      x.properties.hasOwnProperty("_apo_variants")
                  );
                  if (mainProductCart) i.key = mainProductCart.key;
                }
                if (productForm) {
                  productForm.error = false;
                }

                try {
                  if (priceMod.cartSection) {
                    function finalAddCart() {
                      if (priceMod.cartSection.classList.contains("is-empty"))
                        priceMod.cartSection.classList.remove("is-empty");
                    }
                    const quickAddModal = e.target.closest("quick-add-modal");
                    if (quickAddModal) {
                      document.body.addEventListener(
                        "modalClosed",
                        () => {
                          setTimeout(() => {
                            if (
                              priceMod.cartSection?.renderContents &&
                              typeof priceMod.cartSection?.renderContents ===
                              "function"
                            )
                              priceMod.cartSection.renderContents(i);
                          });
                        },
                        { once: true }
                      );
                      quickAddModal.hide(true);
                      priceMod.removeLoadingAddCart(e.target);
                      finalAddCart();
                      return;
                    } else {
                      if (
                        priceMod.cartSection?.renderContents &&
                        typeof priceMod.cartSection?.renderContents === "function"
                      ) {
                        priceMod.removeLoadingAddCart(e.target);
                        priceMod.cartSection.renderContents(i);
                        finalAddCart();
                        if (shop_id === "76880183633") {
                          if (window.themeSettings.redirectToCart) {
                            location.href = '/cart';
                          } else {
                            let submitButton = productForm?.querySelector('[type="submit"]')
                            if (submitButton) priceMod.cartSection.open(submitButton);
                          }
                          document.dispatchEvent(new CustomEvent('cart:item-add', {
                            detail: {
                              items: [i],
                            },
                          }));

                          publish(PUB_SUB_EVENTS.cartItemAdd, {
                            items: [i],
                          });
                        }
                        return;
                      }
                      else {
                        let miniCartSelector = priceMod.cartSection?.querySelector("mini-cart");
                        if (miniCartSelector?.renderContents &&
                          typeof miniCartSelector?.renderContents === "function") {
                          priceMod.removeLoadingAddCart(e.target);
                          miniCartSelector.renderContents(i);
                          if (miniCartSelector.classList.contains("is-empty"))
                            miniCartSelector.classList.remove("is-empty");
                          return;
                        }
                      }
                    }
                  }
                } catch (ex) {
                  console.log("Render cart error: ", ex);
                }

                if (window.BOOMR.themeName === "Warehouse") {
                  let sectionProduct = document.querySelector('[data-section-type="product"]');
                  if (sectionProduct) {
                    sectionProduct.dispatchEvent(new CustomEvent("product:added", {
                      bubbles: !0,
                      detail: {
                        // variant: this.currentVariant,
                        // button: target,
                        // quantity: parseInt(formElement.querySelector('[name="quantity"]').value)
                      }
                    }));

                    priceMod.removeLoadingAddCart(e.target);
                    return;
                  }
                }

                if (shop_id = "17207277") {
                  const newCartResponse = await fetch(`${window.theme.routes.cart}.js`);
                  if (!newCartResponse.ok) throw new Error(newCartResponse.status);
                  const newCartData = await newCartResponse.json();
                  this.dispatchEvent(new CustomEvent('on:cart:add', {
                    bubbles: true,
                    detail: {
                      cart: newCartData,
                      variantId: i.variant_id
                    }
                  }));

                  priceMod.removeLoadingAddCart(e.target);
                  return;
                }

                if (shop_id === "22344067") {
                  let cartIcon = document.querySelector('#HeaderCartTrigger');
                  if (cartIcon) {
                    cartIcon.click();
                    priceMod.removeLoadingAddCart(e.target);
                    return;
                  }
                }

                if (window?.routes?.cart_url)
                  window.location = window.routes.cart_url;
                else window.location.href = "/cart";
                priceMod.removeLoadingAddCart(e.target);
              })
            }
          })
        }
        else {
          return priceMod.addToCart(productId, e, async function (i) {
            let productForm = e.target.closest("product-form");

            let productFormAdd = e.target.closest('form[action="/cart/add"]');

            if (i && i.status) {
              console.log(
                "Avis: price variants: add variant to cart error ",
                i.description
              );
              priceMod.removeLoadingAddCart(e.target);
              if (productForm) {
                productForm.error = true;
                if (typeof productForm.handleErrorMessage === "function") {
                  productForm.handleErrorMessage(i.description);
                }
              } else if (i.description) alert(i.description);
              else alert("Error!");
              return;
            }

            if (i?.items?.length > 0) {
              if (isRedirectCheckout) {
                location.href = '/checkout';
                priceMod.removeLoadingAddCart(e.target);
                return;
              }

              i.key = i.items[0].key;
              let mainProductCart = i.items.find(
                (x) =>
                  Object.keys(x.properties).length > 0 &&
                  x.properties.hasOwnProperty("_apo_variants")
              );
              if (mainProductCart) i.key = mainProductCart.key;
            }
            if (productForm) {
              productForm.error = false;
            }

            if (window.ap_front_settings.shop_id === "76484182349") {
              if (priceMod.cartSection) {
                let cartItems =
                  priceMod.cartSection.querySelector("cart-items");
                if (cartItems?.cart) {
                  cartItems?.getCart();
                  priceMod.removeLoadingAddCart(e.target);
                  return;
                }
              }
            }

            if (shop_id === "71933788448") {
              var spro = window.AvisCartDrawerConfig.spro,
                $body = window.AvisCartDrawerConfig.$body;

              if (window.quick_cart.show && spro && $body) {
                Shopify.getCart((cart) => {
                  $body.addClass('cart-sidebar-show');
                  spro.updateSidebarCart(cart);
                });

                priceMod.removeLoadingAddCart(e.target);
                return;
              }
            }
            if (shop_id === "35051536443") {
              let selectForm = document.querySelector('form[action="/cart/add"]');
              let product = window.theme.utils.serialize(selectForm);
              if (window.theme.settings.cartType === 'page') {
                window.location = window.theme.routes.cartPage;
              }

              selectForm.dispatchEvent(new CustomEvent('ajaxProduct:added', {
                detail: {
                  product: product,
                  addToCartBtn: this.addToCart
                },
                bubbles: true
              }));
              return;
            }
            if (shop_id === "14252734" && productFormAdd) {
              productFormAdd.dispatchEvent(new CustomEvent('ajaxProduct:added', {
                detail: {
                  product: i.items[0],
                  addToCartBtn: productFormAdd.addToCart
                },
                bubbles: true
              }));

              priceMod.removeLoadingAddCart(e.target);
              return;
            }
            try {
              if (priceMod.cartSection) {
                function finalAddCart() {
                  if (priceMod.cartSection.classList.contains("is-empty"))
                    priceMod.cartSection.classList.remove("is-empty");
                }
                const quickAddModal = e.target.closest("quick-add-modal");
                if (quickAddModal) {
                  document.body.addEventListener(
                    "modalClosed",
                    () => {
                      setTimeout(() => {
                        if (
                          priceMod.cartSection?.renderContents &&
                          typeof priceMod.cartSection?.renderContents ===
                          "function"
                        )
                          priceMod.cartSection.renderContents(i);
                      });
                    },
                    { once: true }
                  );
                  quickAddModal.hide(true);
                  priceMod.removeLoadingAddCart(e.target);
                  finalAddCart();
                  return;
                } else {
                  if (
                    priceMod.cartSection?.renderContents &&
                    typeof priceMod.cartSection?.renderContents === "function"
                  ) {
                    priceMod.removeLoadingAddCart(e.target);
                    priceMod.cartSection.renderContents(i);
                    finalAddCart();
                    if (shop_id === "76880183633") {
                      if (window.themeSettings.redirectToCart) {
                        location.href = '/cart';
                      } else {
                        let submitButton = productForm?.querySelector('[type="submit"]')
                        if (submitButton) priceMod.cartSection.open(submitButton);
                      }
                      document.dispatchEvent(new CustomEvent('cart:item-add', {
                        detail: {
                          items: [i],
                        },
                      }));

                      publish(PUB_SUB_EVENTS.cartItemAdd, {
                        items: [i],
                      });
                    }
                    return;
                  }
                  else {
                    let miniCartSelector = priceMod.cartSection?.querySelector("mini-cart");
                    if (miniCartSelector?.renderContents &&
                      typeof miniCartSelector?.renderContents === "function") {
                      priceMod.removeLoadingAddCart(e.target);
                      miniCartSelector.renderContents(i);
                      if (miniCartSelector.classList.contains("is-empty"))
                        miniCartSelector.classList.remove("is-empty");
                      return;
                    }
                  }
                }
              }
            } catch (ex) {
              console.log("Render cart error: ", ex);
            }
            if (shop_id === "25514049590") {
              let cartContent = await priceModCart.getCartV2();
              document.documentElement.dispatchEvent(
                new CustomEvent('cart:updated', {
                  bubbles: true,
                  detail: {
                    cart: cartContent,
                  },
                })
              );
              cartContent['sections'] = i['sections'];
              document.documentElement.dispatchEvent(
                new CustomEvent('cart:refresh', {
                  bubbles: true,
                  detail: {
                    cart: cartContent,
                    openMiniCart: window.themeVariables?.settings?.cartType === 'drawer' && e?.target?.closest('.drawer') === null,
                  },
                })
              );

              priceMod.removeLoadingAddCart(e.target);
              return;
            }
            if (shop_id === "6037953")
            {
              const cartContent = await priceModCart.getCartV2();
              cartContent["sections"] = i["sections"];
              this.dispatchEvent(new CustomEvent("variant:add", {
                bubbles: true,
                detail: {
                  items: i.hasOwnProperty("items") ? i["items"] : [i],
                  cart: cartContent,
                  onSuccessDo:  null
                }
              }));
              document.documentElement.dispatchEvent(new CustomEvent("cart:change", {
                bubbles: true,
                detail: {
                  baseEvent: "variant:add",
                  onSuccessDo:  null,
                  cart: cartContent
                }
              }));

              priceMod.removeLoadingAddCart(e.target);
              return;
            }
            if (shop_id === "79302132006") {
              let cart = await priceModCart.getCartV2();
              if (cart) {
                document.dispatchEvent(
                  new CustomEvent("theme:cart:change", {
                    detail: {
                      cart: cart,
                    },
                    bubbles: !0,
                  })
                );

                if (
                  window.theme.state.cartOpen ||
                  Boolean(
                    document.body.querySelector('[data-section-type="cart"]')
                  )
                ) {
                  document.dispatchEvent(
                    new CustomEvent("theme:cart:reload", {
                      bubbles: !0,
                    })
                  );
                } else {
                  let popdown = document.querySelector(
                    "[data-product-add-popdown-wrapper]"
                  );
                  if (popdown) {
                    popdown.dispatchEvent(
                      new CustomEvent("theme:cart:popdown", {
                        detail: {
                          variant: e,
                        },
                        bubbles: !0,
                      })
                    );
                  }
                }
              }
              priceMod.removeLoadingAddCart(e.target);
              return;
            }

            if (shop_id === "52058915007" && productFormAdd && i?.items?.length > 0 
            ) {
              productFormAdd.dispatchEvent(
                new CustomEvent("ajaxProduct:added", {
                  detail: {
                    product: i.items[0],
                  },
                  bubbles: true,
                })
              );

              priceMod.removeLoadingAddCart(e.target);
              window.monster_refresh && window.monster_refresh();
              return;
            }
            // window.BOOMR.themeName = "Impact"
            if (window.ap_front_settings.shop_id === "83553517888" || window.ap_front_settings.shop_id === "25604915279") {
              productForm = e.target.closest("form[is='product-form']");
              const cartContent = await (
                await fetch(`${Shopify.routes.root}cart.js`)
              ).json();
              (cartContent.sections = i.sections),
                productForm?.dispatchEvent(
                  new CustomEvent("variant:add", {
                    bubbles: !0,
                    detail: {
                      items: i.hasOwnProperty("items") ? i.items : [i],
                      cart: cartContent,
                    },
                  })
                ),
                document.documentElement.dispatchEvent(
                  new CustomEvent("cart:change", {
                    bubbles: !0,
                    detail: {
                      baseEvent: "variant:add",
                      cart: cartContent,
                    },
                  })
                );
              priceMod.removeLoadingAddCart(e.target);
              return;
            }

            if (shop_id === "57510330564") {
              let config = document.getElementById('cart-config');
              if (!config) return false;
              config = JSON.parse(config.innerHTML || '{}');
              WAU.ThemeCart.getCart().then(Cart => {
                if (config.cart_action == 'drawer' && config.cart_added_event == 'go_to_active_cart') {
                  WAU.AjaxCart.showDrawer(config);
                } else if (config.cart_action == 'modal_cart' && config.cart_added_event == 'go_to_active_cart') {
                  WAU.AjaxCart.showModal(config);
                } else if (config.cart_action == 'page_only' && config.cart_added_event == 'go_to_active_cart') {
                  window.location.href = config.cart_url;
                } else if (config.cart_added_event == 'product_page') {
                  WAU.Helpers.fadeIn(context.querySelector(".js-added-msg"));
                  setTimeout(function () {
                    WAU.Helpers.fadeOut(context.querySelector(".js-added-msg"));
                  }, 4000);
                } else {
                  window.location.href = config.cart_url;
                }

                WAU.AjaxCart.updateView(config, Cart);
                priceMod.removeLoadingAddCart(e.target);
              }).catch(error => {
                console.log("Avis AddCart error", error);
                priceMod.removeLoadingAddCart(e.target);
              });
              return;
            }

            if (shop_id === "18227167316") {
              let cartIcon = document.querySelector('.Header-iconsContainer a[data-drawer-name="cart"]');
              if (cartIcon) {
                cartIcon.click();
                priceMod.removeLoadingAddCart(e.target);
                return;
              }
            }
            if (window.BOOMR.themeName === "Warehouse") {
              let sectionProduct = document.querySelector('[data-section-type="product"]');
              if (sectionProduct) {
                sectionProduct.dispatchEvent(new CustomEvent("product:added", {
                  bubbles: !0,
                  detail: {
                    // variant: this.currentVariant,
                    // button: target,
                    // quantity: parseInt(formElement.querySelector('[name="quantity"]').value)
                  }
                }));

                priceMod.removeLoadingAddCart(e.target);
                return;
              }
            }

            if (shop_id === "22344067") {
              let cartIcon = document.querySelector('#HeaderCartTrigger');
              if (cartIcon) {
                cartIcon.click();
                priceMod.removeLoadingAddCart(e.target);
                return;
              }
            }

            if (window?.routes?.cart_url)
              window.location = window.routes.cart_url;
            else window.location.href = "/cart";
            priceMod.removeLoadingAddCart(e.target);
          })
        }
      }
    }
    async function editOptionsToCart(e, productId) {
      priceMod.orderId = new Date().getTime();
      let keyLineItemEdit = priceMod.cartItemEdit.key;
      let postDataCart = [];
      let newItemCart = {
        id: !1,
        quantity: priceMod.cartItemEdit.quantity,
        properties: {},
      };
      let addItemsCart = {
        items: [],
      };

      let variants = priceMod.getVariantSubmissions(productId);
      let listVariantBundle = [];
      for (var optionIndex in variants) {
        let optionData = `${variants[optionIndex].name}: ${variants[optionIndex].value} - ${variants[optionIndex].variantId}`;
        listVariantBundle.push(
          variants[optionIndex].isOneTime
            ? optionData
            : `${optionData} * ${variants[optionIndex].quantity}`
        );
      }

      if (!$('[name="properties[_apo_variants]"]').length) {
        var variant = $("<input />")
          .attr("type", "hidden")
          .attr("name", `properties[_apo_variants]`)
          .val(listVariantBundle.join(joinAddCharge));
        $(e.target).before(variant);
      } else {
        $('[name="properties[_apo_variants]"]').val(
          listVariantBundle.join(joinAddCharge)
        );
      }

      $.each(variants, function (e, t) {
        let optionData = `${t.name}: ${t.value} - ${t.variantId}`;
        addItemsCart.items.push({
          id: parseInt(t.variantId),
          quantity: t.isOneTime ? 1 : newItemCart.quantity * (t.quantity ?? 1),
          properties: {
            _apo_added_by: t.isOneTime
              ? optionData
              : `${optionData} * ${t.quantity ?? 1}`,
          },
        });
      });

      let elemFormPopup = document.querySelector(".avis-cart-popup-form");
      let formData = new FormData(elemFormPopup);
      formData.forEach((e, t) => {
        if (
          ("id" == t && (newItemCart.id = parseInt(e)),
            t.indexOf("properties") > -1)
        ) {
          let property = t.replace("properties[", "").replace("]", "");
          newItemCart.properties[property] = e;
        }
      });

      if (addItemsCart.items.length > 0) {
        addItemsCart.items.push(newItemCart);
      }

      let postDelOrAddCart = [];
      let cartItemRemoveInput = {};
      if (addItemsCart.items.length > 0) {
        cartItemRemoveInput[keyLineItemEdit] = 0;
      }

      if (
        priceMod.cartItemEdit.properties &&
        priceMod.cartItemEdit.properties.hasOwnProperty("_apo_variants")
      ) {
        let oldVariantAddChargeStr =
          priceMod.cartItemEdit.properties._apo_variants;
        if (oldVariantAddChargeStr) {
          let oldVariantCharges = oldVariantAddChargeStr.split(joinAddCharge);
          let cartItemRemoves = priceMod.cartCurrent.items.filter(
            (x) =>
              x.properties &&
              x.properties.hasOwnProperty("_apo_added_by") &&
              oldVariantCharges.find(
                (y) => y.indexOf(x.properties._apo_added_by) > -1
              )
          );
          if (cartItemRemoves.length > 0) {
            for (let cartItem of cartItemRemoves) {
              cartItemRemoveInput[cartItem.key] = 0;
            }
          }
        }
      }

      if (
        addItemsCart.items.length === 0 &&
        Object.keys(cartItemRemoveInput).length > 0
      ) {
        cartItemRemoveInput[keyLineItemEdit] = 0;
        addItemsCart.items.push(newItemCart);
      }

      if (Object.keys(cartItemRemoveInput).length > 0) {
        postDelOrAddCart.push(priceModCart.postUpdateCart(cartItemRemoveInput));
      }

      async function updateMainProduct() {
        let cartItemChange = {
          id: keyLineItemEdit,
          properties: newItemCart.properties,
        };

        await Promise.all([priceModCart.postChangeCart(cartItemChange)]).then(
          (values) => {
            if (
              values.filter(
                (x) =>
                  x.res &&
                  (!x.res.status ||
                    (x.res.status != "bad_request" &&
                      x.res.status != "too_many_requests" &&
                      x.res.status != 404 &&
                      x.res.status != 422))
              ).length > 0
            ) {
              location.reload();
            } else {
              console.log(
                "Error: Edit options to cart for change main line item",
                values
              );
            }
          }
        );
      }

      // Line item (old, new) has product bundle
      if (postDelOrAddCart.length > 0) {
        await Promise.all(postDelOrAddCart).then(async (values) => {
          if (
            values.filter(
              (x) =>
                x.res &&
                (!x.res.status ||
                  (x.res.status != "bad_request" &&
                    x.res.status != "too_many_requests" &&
                    x.res.status != 404 &&
                    x.res.status != 422))
            ).length > 0
          ) {
            console.log("Res Del or Add Bundle when edit option", values);
            let newCart = await priceModCart.getCartV2();
            priceMod.cartCurrent = newCart;
            if (addItemsCart.items.length > 0) {
              postDataCart.push(priceModCart.postAddsCart(addItemsCart));
              await Promise.all(postDataCart).then(async (resData) => {
                console.log("Res Del or Add Bundle when edit option", resData);
                location.reload();
              });
            } else {
              location.reload();
            }
          } else {
            priceMod.removeLoadingAddCart(e.target);
            console.log("Error: Edit options to cart", values);
          }
        });
      }

      if (addItemsCart.items.length === 0) {
        await updateMainProduct();
      }
    }
    function findButtonAddCart(elemOptionAvisContainer, productId) {
      var e = window.AP_POptions.apps.productoptions.jQueryKey || "jQuery",
        t =
          window[e] && window[e].fn && (window[e]._data || window[e].data)
            ? window[e]
            : $;

      if (priceMod.isCloneButtonAddCart) {
        let buttonAddCart = null;
        let avisAddCartFormActiveJS = formProductGenOptionJs[productId];
        if (
          !elemOptionAvisContainer ||
          (productId === "default" && avisAddCartFormActiveJS)
        ) {
          if (shop_id === "83089457466") {
            for (let itemAddCart of window.AP_POptions.addToCartButton.split(
              ","
            )) {
              buttonAddCart =
                avisAddCartFormActiveJS.querySelector(itemAddCart);
              if (buttonAddCart) {
                break;
              }
            }
          } else if (shop_id === "75236638988") {
            buttonAddCart =
              avisAddCartFormActiveJS.querySelector('button[id*="rfq-btn"]');

            if (!buttonAddCart) return;
          }
          else
            buttonAddCart = avisAddCartFormActiveJS.querySelector(
              window.AP_POptions.addToCartButton
            );
        }
        if (elemOptionAvisContainer && !buttonAddCart) {
          let findFormProduct = getFormHasAddToCart(elemOptionAvisContainer);
          if (findFormProduct) {
            avisAddCartFormActiveJS = findFormProduct;

            buttonAddCart = avisAddCartFormActiveJS.querySelector(
              window.AP_POptions.addToCartButton
            );
          }
        }

        if (!buttonAddCart && shop_id === "33012973707") {
          buttonAddCart = elemOptionAvisContainer.querySelector("button[data-action='add-to-cart']");
        }

        if (!buttonAddCart) {
          return;
        }

        let isCloneButtonAddCart = isExistOptionHasDataInputInvalid(
          elemOptionAvisContainer
        );
        let hasProductBundle = false;
        for (let item in priceModAll[productId].activeVariants) {
          if (
            priceModAll[productId].activeVariants[item].isShow &&
            (priceModAll[productId].activeVariants[item].productId ||
              priceModAll[productId].activeVariants[item].variantId)
          ) {
            hasProductBundle = true;
            break;
          }
        }
        if (isCloneButtonAddCart || hasProductBundle) {
          let newClassNameAvisButtonAddCart =
            window.AP_POptions.apps.productoptions.avisNewAddCartButtonClass;
          let oldClassNameAvisButtonAddCart =
            window.AP_POptions.apps.productoptions.avisOrgAddCartButtonClass;

          if (
            buttonAddCart.className &&
            (buttonAddCart.className.indexOf(newClassNameAvisButtonAddCart) >
              -1 || buttonAddCart.className.indexOf(oldClassNameAvisButtonAddCart) >
              -1)
          )
            return;

          let cloneButtonAddCart = buttonAddCart
            ? buttonAddCart.cloneNode(true)
            : false;
          if (shop_id === "61391962248") {
            cloneButtonAddCart = document.createElement("div");
            let getHtml = buttonAddCart.querySelector("span");
            cloneButtonAddCart.innerHTML = getHtml?.innerHTML ? getHtml?.innerHTML : "Add to cart";
            cloneButtonAddCart.classList.add("button");
            cloneButtonAddCart.classList.add("button--full-width");
            cloneButtonAddCart.classList.add("product-form__submit");
          }

          if (shop_id === "69043421407") {
            let isCheckoutAvis = avisAddCartFormActiveJS.querySelector(".checkout-avis-options");
            if (!isCheckoutAvis) {
              let buttonCheckout = avisAddCartFormActiveJS.querySelector("button.ecom-product-single__buy_it_now_btn--checkout");
              if (buttonCheckout) {
                let cloneButtonCheckout = buttonCheckout.cloneNode(true);
                buttonCheckout.setAttribute("style", "display:none !important");
                cloneButtonCheckout.classList.add("checkout-avis-options");
                cloneButtonCheckout.addEventListener("click", (event) => {
                  p_check_validate(event, elemOptionAvisContainer, productId, true);//isRedirectCheckout = true
                })

                buttonCheckout.parentNode.insertBefore(
                  cloneButtonCheckout,
                  buttonCheckout
                );
              }
            }
          }
          if (cloneButtonAddCart) {
            switch (
            (cloneButtonAddCart.classList.add(newClassNameAvisButtonAddCart),
              cloneButtonAddCart.tagName)
            ) {
              case "BUTTON":
              case "INPUT":
              case "A":
                cloneButtonAddCart.addEventListener(
                  "click",
                  (event) => {
                    p_check_validate(event, elemOptionAvisContainer, productId);
                  },
                  false
                );
                break;
              case "DIV":
              case "SPAN":
                if (shop_id === "61391962248") {
                  cloneButtonAddCart.addEventListener(
                    "click",
                    (event) => {
                      p_check_validate(event, elemOptionAvisContainer, productId);
                    },
                    false
                  );
                }
                else {
                  cloneButtonAddCart.querySelectorAll("button").forEach((e) =>
                    cloneButtonAddCart.addEventListener(
                      "click",
                      (event) => {
                        p_check_validate(
                          event,
                          elemOptionAvisContainer,
                          productId
                        );
                      },
                      false
                    )
                  );
                }
                break;
            }

            buttonAddCart.classList.add(oldClassNameAvisButtonAddCart);
            buttonAddCart.parentNode.insertBefore(
              cloneButtonAddCart,
              buttonAddCart
            );
            var eventButtonAddCart = getEventData(t, buttonAddCart);
            eventButtonAddCart &&
              eventButtonAddCart.click &&
              eventButtonAddCart.click.length > 1 &&
              (console.log("Avis add to cart has other bound events"),
                eventButtonAddCart.click.unshift(eventButtonAddCart.click.pop())),
              g((e) => {
                p_check_validate(e, elemOptionAvisContainer, productId);
              }); // Check validate options of avisplus
          }
        } else {
          if (avisAddCartFormActiveJS)
            RemoveCloneButtonAddCart($(avisAddCartFormActiveJS));
        }
      }

      function RemoveCloneButtonAddCart(avisAddCartFormActive) {
        avisAddCartFormActive
          .find(
            `.${window.AP_POptions.apps.productoptions.avisNewAddCartButtonClass}`
          )
          .each(function () {
            $(this).remove();
          });
        avisAddCartFormActive
          .find(
            `.${window.AP_POptions.apps.productoptions.avisOrgAddCartButtonClass}`
          )
          .each(function () {
            $(this).removeClass(
              window.AP_POptions.apps.productoptions.avisOrgAddCartButtonClass
            );
          });
      }
      function isExistOptionHasDataInputInvalid(elemOptionAvisContainer) {
        window.AP_POptions.apps.productoptions.checkExistInputInvalid = true;
        var messageError = "";
        const checkValidateDataInput = function (e) {
          var t = "";
          return (
            $(
              "input[type=text][required], textarea[required], input[type=number][required], input[type=hidden][required], fieldset[data-required], select[required], span[data-required],div[data-required],input[type=checkbox][avp-data=switch][required]",
              e
            )
              .not("[disabled]")
              .each(function (e, n) {
                t ||
                  (t = window.AP_POptions.apps.productoptions.validateInput(
                    n,
                    "required",
                    false
                  ));
              }),
            !t &&
            $("input[type=text][data-allow-value]", e)
              .not("[disabled]")
              .each(function (e, n) {
                t ||
                  (t = window.AP_POptions.apps.productoptions.validateInput(
                    n,
                    "data-allow-value",
                    false
                  ));
              }),
            !t &&
            $("input[type=text][minlength]", e)
              .not("[disabled]")
              .each(function (e, n) {
                t ||
                  (t = window.AP_POptions.apps.productoptions.validateInput(
                    n,
                    "minlength",
                    false
                  ));
              }),
            !t &&
            $("fieldset", e)
              .not("[disabled]")
              .each(function (e, n) {
                t ||
                  (t = window.AP_POptions.apps.productoptions.validateInput(
                    n,
                    "minvalue",
                    false
                  )) ||
                  (t = window.AP_POptions.apps.productoptions.validateInput(
                    n,
                    "minquantity",
                    false
                  ));
              }),
            !t &&
            $("input[type=text].iti__tel-input", e)
              .not("[disabled]")
              .each(function (e, n) {
                t ||
                  (t = window.AP_POptions.apps.productoptions.validateInput(
                    n,
                    "value-phone-input",
                    false
                  ));
              }),
            !t &&
            $("input[type=text][value-email-input]", e)
              .not("[disabled]")
              .each(function (e, n) {
                t ||
                  (t = window.AP_POptions.apps.productoptions.validateInput(
                    n,
                    "value-email-input",
                    false
                  ));
              }),
            t
          );
        };
        if (
          (($io = $(`#${container_AP_POptions}`)),
            (messageError = checkValidateDataInput(
              elemOptionAvisContainer &&
                elemOptionAvisContainer.querySelector(`.${container_AP_POptions}`)
                ? $(
                  elemOptionAvisContainer.querySelector(
                    `.${container_AP_POptions}`
                  )
                )
                : $io
            )),
            messageError && messageError.length)
        ) {
          window.AP_POptions.apps.productoptions.checkExistInputInvalid = false;
          return true;
        }
        window.AP_POptions.apps.productoptions.checkExistInputInvalid = false;
        return false;
      }
    }

    function h(e, t) {
      return "undefined" != typeof e.shopifyPriceSynced
        ? t(e)
        : void $.ajax({
          url: "/products.json?id=" + e.productId,
          success: function (n) {
            if (n && n.products && n.products[0])
              for (var i = n.products[0].variants, o = 0; o < i.length; o++)
                i[o].id == e.variantId &&
                  ((e.price = i[o].price),
                    spLog(
                      e,
                      "Successfully fetched latest price from Shopify product",
                      !0
                    ));
            return t(e);
          },
          error: function (n) {
            return t(e);
          },
        });
    }

    function g(e) {
      var t = 0;
      if (window.AP_POptions.apps.productoptions.hideDynamicCheckout)
        return (
          spLog(
            !0,
            "hideDynamicCheckout runtime config is set, hiding dynamic checkout buttons.",
            !0
          ),
          $(".shopify-payment-button").hide(),
          !0
        );
      function n(n) {
        var r, a;
        switch (n) {
          case "primary":
            (r = ".shopify-payment-button__button"), (a = i);
            break;
          case "secondary":
            (r = ".shopify-payment-button__more-options"), (a = o);
        }
        if ($(r).length) {
          spLog(
            !0,
            "dynamic checkout: " +
            n +
            " button found, preventing submission until our options pass validation.",
            !0
          ),
            clearInterval(a),
            m(e, n, r);
          var s = new MutationObserver(function (t) {
            (t[0].addedNodes.length ||
              (t[0].removedNodes.length && !$(r).length)) &&
              m(e, n, r);
          });
          s.observe($(".shopify-payment-button")[0], {
            childList: !0,
            subtree: !0,
          });
        }
        t >= 9 &&
          (spLog(
            !1,
            "dynamic checkout: unable to locate " +
            n +
            " dynamic checkout button after polling for 5 seconds.",
            !0
          ),
            clearInterval(a)),
          t++;
      }
      var i = setInterval(function () {
        n("primary");
      }, 500),
        o = setInterval(function () {
          n("secondary");
        }, 500);
    }
    function m(e, t, n) {
      var i, o;
      if ($(".sp-dynamic-checkout-button-" + t).length) {
        if (
          ((o = $(".sp-dynamic-checkout-button-" + t)),
            (overlayEvents = getEventData($, o[0])),
            overlayEvents && overlayEvents.click)
        )
          for (var r = 0; r < overlayEvents.click.length; r++)
            if (overlayEvents.click[r].data["io-AP_POptions-validate"])
              return !0;
      } else
        (o = genDivVForButtonAddCart("sp-dynamic-checkout-button-" + t, !0)),
          (i = !0);
      onBindEvent(
        $,
        o,
        window.AP_POptions.apps.productoptions.validationEventName,
        { "io-AP_POptions-validate": !0, "io-dynamic-checkout-type": t },
        e
      ),
        i && $(n).css({ position: "relative" }).append(o),
        o.data("io-dynamic-bound", !0);
      var a = getEventData($, o[0]);
      a && a.click && a.click.length > 1 && a.click.unshift(a.click.pop());
    }
    // y
    function genDivVForButtonAddCart(className, status) {
      if ((($overlay = $('<div class="' + className + '"></div>')), status)) {
        var n = {
          all: {
            position: "absolute",
            display: "block",
            "z-index": "100",
            cursor: "pointer",
            top: "0",
            right: "0",
            bottom: "0",
            left: "0",
          },
        };
        $.each(n, function (e, t) {
          $overlay.css(t);
        });
      }
      return $overlay;
    }
    // w
    function onBindEvent(e, t, n, i, o) {
      e.fn.on ? t.on(n, i, o) : t.bind(n, i, o);
    }

    function x() {
      $(`#${container_AP_POptions} select[required="required"]`)
        .find('option[disabled="disabled"][selected="selected"]')
        .prop("selected", "selected");
    }

    window.AP_POptions &&
      window.AP_POptions.apps &&
      window.AP_POptions.apps.customizery &&
      ((window.AP_POptions.apps.productoptions =
        window.AP_POptions.apps.customizery),
        delete window.AP_POptions.apps.customizery);

    // Check all option set by condition product
    // elemOptionAvisContainer : container quickview, featured product, product page
    function mainCheckAllRules(
      productInfo,
      productId,
      isPopup = false,
      elemOptionAvisContainer = null
    ) {
      if (!productId) productId = apoProductDefault;
      priceModAll[productId] = {
        variantSubmissionAlters: [],
        variantOrdering: [],
        activeVariants: {},
        productVariantBundles: [],
        radioInput: {},
      };
      if (elemOptionAvisContainer) {
        let containerAvisOption = elemOptionAvisContainer.querySelector(
          `.${container_AP_POptions}`
        );
        if (containerAvisOption) containerAvisOption.remove();
      } else elemOptionAvisContainer = document;

      customizeryRules.checkAllRules(
        customizeryConfig,
        "optionSets",
        productInfo,
        async function (optionSets, productInfo) {
          if (optionSets && optionSets.length > 0) {
            if (!optionSets.find((x) => x.sort !== 0)) {
              optionSets.sort(function (a, b) {
                return new Date(a.created_at) - new Date(b.created_at);
              });
            }

            let checkExistLabelCart = {};
            for (let optionSet of optionSets) {
              if (optionSet.options && optionSet.options.length > 0) {
                for (let option of optionSet.options) {
                  if (checkExistLabelCart.hasOwnProperty(option.label_cart)) {
                    checkExistLabelCart[option.label_cart] += 1;

                    let oldLabelCart = option.label_cart;
                    let newLabelCart = `${option.label_cart}-${checkExistLabelCart[option.label_cart]
                      }`;
                    option.label_cart = newLabelCart;

                    for (let optionForConditionLogic of optionSet.options.filter(
                      (e) =>
                        e["conditional_logic"] &&
                        e["conditional_logic"]["condition_items"] &&
                        e["conditional_logic"]["condition_items"].length > 0
                    )) {
                      for (let conditionLogicItem of optionForConditionLogic[
                        "conditional_logic"
                      ]["condition_items"]) {
                        if (conditionLogicItem["field"] == oldLabelCart) {
                          conditionLogicItem["field"] = newLabelCart;
                        }
                      }
                    }
                  } else checkExistLabelCart[option.label_cart] = 0;

                  if (
                    option["option_values"] &&
                    option["option_values"].length > 0
                  ) {
                    for (let optionValue of option["option_values"]) {
                      if (optionValue["type"] == "percentagecharge") {
                        optionValue["type"] = "createcharge";
                        let priceProduct = productInfo["price"] ?? 0;
                        let priceCharge =
                          (parseFloat(priceProduct) *
                            parseFloat(optionValue["percentageCharge"] ?? 0)) /
                          100;
                        optionValue["price"] = priceCharge;
                      } else if (optionValue["price"]) {
                        optionValue["price"] = optionValue["price"] * 100;
                      }
                    }
                  }
                }
              }
            }

            priceMod.init({
              skipPriceModIfVisible:
                window.AP_POptions.apps.productoptions.skipPriceModIfVisible,
            }),
              (conditionalLogicInstances[productId] =
                new conditionalLogicFactory(window.AP_POptions.$)),
              await mainRenderOptions(
                optionSets,
                productInfo,
                productId,
                elemOptionAvisContainer
              );
            if (priceMod.isCloneButtonAddCart && elemOptionAvisContainer) {
              setInterval(function () {
                findButtonAddCart(elemOptionAvisContainer, productId);
              }, 100);
            }
          }
          if (!isPopup)
            priceModCart.init(function () {
              return true;
            });
        }
      );
    }

    let listKeyButtonAddCart = [
      '.product-submit input.spice-submit-button',
      'form div[class="mb-2 md:mb-3"] button[type="submit"]:not(.spr-button):not(.apo-exclude)',
      'button[id*="rfq-btn"]',
      'button[id*="AddToCart"]',
      'button[id*="add-to-cart"]',
      'button[id*="addToCart"]',
      'a[id*="AddToCart"]',
      'a[id*="addToCart"]',
      ".product__add-to-cart-button",
      //".product-submit",
      ".product-form--atc-button",
      ".product-form__cart-submit",
      ".product-buy-buttons--cta",
      ".btn--add-to-cart",
      ".button-cart",
      "button.add-to-cart-btn",
      ".add-to-cart-button",
      "button--addToCart",
      "button[type=submit].single_add_to_cart_button",
      "[data-product-add]",
      'button[data-pf-type*="ProductATC"]',
      "[name=add]:not([type=normal])",
      "[type=submit]:not(.spr-button):not(.apo-exclude):not(.hidden-cart-btn)",
      ".lh-buy-now",
      ".qview-btn-addtocart",
      ".ajax-submit.action_button.add_to_cart",
      ".action_button.add_to_cart",
      ".atc-btn-container .add_to_cart",
      ".add_to_cart",
      ".button.ajax-submit.action_button",
      ".action_button.add_to_cart",
      ".action_button.add_to_cart",
      ".btn-addtocart",
      ".product-form__submit",
      ".product-form__add-button:not(.hidden-cart-btn)",
      ".product-form--add-to-cart",
      ".btn--subtle-hover",
      "#product-add-to-cart",
      "#AddToCart",
      ".button--large",
      ".AddtoCart",
      "button[type='button'][data-action='add-to-cart']"
    ];
    window.AP_POptions = $.extend(
      !0,
      {
        listKeyAppendOptionPG: [
          ".product__container .apo-form-cart:not(.installment)",
          "[data-avis-cart-popup-form] .avis-popupBody",
          ".product-converter__add-to-cart .apo-form-cart:not(.installment)",
          "#mainWrap form[action*='/cart/add'].apo-form-cart:not(.installment)",
          ".container.main .clearfix.product_form:not(.installment)",
          ".product__info-wrapper form[action='/cart/add'][data-type='add-to-cart-form']:not(.installment)",
          "form[action*='/cart/add'].apo-form-cart:not(.installment)",
          ".home-product form[action*='/cart/add']:not(.installment)",
          ".shop-product form[action*='/cart/add']:not(.installment)",
          "#shopify-section-featured-product form[action*='/cart/add']:not(.installment)",
          "[data-block-type=\"buy-buttons\"] form[action*='cart/add']:not(.installment)",
          ".product-form__buy-buttons form[action*='cart/add']:not(.installment)",
          "product-form form[action*='cart/add']:not(.installment)",
          ".product-form form[action*='cart/add']:not(.installment)",
          ".product-page form[action*='cart/add']:not(.installment)",
          ".product-add form[action*='cart/add']:not(.installment)",
          "[id*='ProductSection--'] form[action*='cart/add']:not(.installment)",
          "form#add-to-cart-form:not(.installment)",
          "form.sf-cart__form:not(.installment)",
          "form.productForm:not(.installment)",
          "form.product-form:not(.installment)",
          "form.product-single__form:not(.installment)",
          "form.product__form:not(.installment)",
          "form.shopify-product-form[data-product-form]:not(.installment)",
          "form.atc-form:not(.installment)",
          "form.atc-form-mobile:not(.installment)",
          "form[action*='/cart/add']:not([hidden]):not(.installment)",
          "form[action*='/cart/add']:not(.installment)",
          "form.product__form:not(.installment)",
          "form.js-product-form[action='/cart/add']:not(.installment)",
        ],
        variantWrapper:
          '.avis-variant-wrapper, [id*="MainProduct-"] variant-selects, [id*="MainProduct-"] variant-radios, .sp-swatches-container, .t4s-swatch, .inline-field-wrapper.js-required, select[id*="product-select-"], variant-radios, variant-selects, .variant-wrapper.variant-wrapper--button.js, .avis-swatch-product-container, .variations, gp-product-variants, .product-form__variants, .product__details .js-enabled .select-wrapper, #ProductSelect, .product-collection__options',
        addToCartButton: listKeyButtonAddCart.join(","),
        classContainerHidden: "avis-input-hiddens",
        apps: {
          productoptions: {
            _initialized: !0,
            _fieldsReady: !1,
            validate: null,
            validateType: null,
            jQueryKey: "jQuery",
            formAddOptionClassProductPage: "form[action$='/cart/add']",
            formAddOptionProductPage: null,
            avisOrgAddCartButtonClass: "avis-org-addcart-button",
            avisNewAddCartButtonClass: "avis-new-addcart-button",
            addToCartButton: "form[action$='/cart/add'] [type=submit]",
            addToCartButtonAPO:
              "form[action$='/cart/add'].apo-form-cart [type=submit]",
            validationEventName: "click",
            insertContainerAfter: null,
            themeAppExtensionActive: !1,
            themeAppExtensionId: null,
            activeProductId: null,
            checkExistInputInvalid: false,
            toggleInputError: toggleStyleErrorForInput,
            allowedValueLetterRegex:
              /[`!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~\d]+/,
            allowedValueLetterNumberRegex:
              /[`!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~]/,
            validateInput: validateDataInput,
            getLatestVariantPrice: h,
            submitPriceModCartAnyways:
              window.ap_front_settings?.shop_id == "9291762",
            hideDynamicCheckout: !1,
            skipPriceModIfVisible:
              'form[action$="/cart/add"] [type=submit] .secondary-text',
            errorClass: "apo-required-error",
            errorStyles: {
              "background-color": "#fef6f5",
              color: "#666",
              "border-color": "#ff5d5d",
            },
            strings: {
              charactersRemaining: "Characters remaining",
              totalQuantityMin:
                "Selected {selected_quantity} item(s). Please select at least {min_total_quantity} item(s)",
              totalQuantityMax:
                "Selected {selected_quantity} out of {max_total_quantity} item(s)",
              errorMessages: {
                forTextInputs:
                  "Please fill out this field before adding this item to cart",
                forNumberInputs:
                  "Please fill out this field before adding this item to cart",
                forCheckboxes:
                  "Please select your options before adding this item to cart",
                forButton:
                  "Please select your option before adding this item to cart",
                forMinimumValues:
                  "Please select at least {min_selections} option(s) before adding this item to cart",
                forDropdowns:
                  "Please select an option before adding this item to cart",
                forDynamicCheckout:
                  "This product cannot be purchased using this checkout method. Please add the item to cart, then proceed to checkout from the cart.",
                forColorInputs:
                  "Please add your personalized color before adding this item to cart",
                forSwitch:
                  "Please confirm your options status before adding this item to cart",
                forFileInputs:
                  "Please upload file before adding this item to cart",
                forTextLettersValid:
                  "Please enter only letters before adding this item to cart",
                forTextLettersAndNumbersValid:
                  "Please enter only letters and numbers before adding this item to cart",
                forMinQuantity:
                  "Please select at least {min_quantity} item(s) before adding this item to cart",
                forTextMinLength:
                  "Please enter at least {min_length} letters before adding this item to cart",
                forTextPhone: "Invalid phone number.",
                forTextEmail: "Invalid email format.",
              },
            },
            debug:
              window.AP_POptions &&
              window.AP_POptions.Cookies &&
              "undefined" !=
              typeof window.AP_POptions.Cookies("avisplus_options_debug"),
          },
        },
      },
      window.AP_POptions
    );
    AvisOptionsData = AvisOptionsData || {};
    AvisOptionsData.mainCheckAllRules = mainCheckAllRules;
    AvisOptionsData.pluginAction = pluginAction;
    AvisOptionsData.formProductQuickview = "";
    window.AP_POptions.apps.productoptions.priceMod = priceMod;
    AvisOptionsData.priceMod = priceMod;
    AvisOptionsData.priceModCart = priceModCart;
    AvisOptionsData.submitEditOption = submitEditOption;
    window.AP_POptions.apps.productoptions.init = mainCheckAllRules;

    if (window?.ap_front_settings?.page_type === "product") {
      mainCheckAllRules();
    }
    return;
  }),
  (doesFileExist = function (urlToFile) {
    var xhr = new XMLHttpRequest();
    xhr.open("HEAD", urlToFile, false);
    xhr.send();

    return xhr.status !== 404;
  }),
  (ap_loadConfig = function ($) {
    var shop_id = window.ap_front_settings.shop_id;
    if (shop_id && shop_id != "") {
      if (
        window.ap_front_settings.config &&
        window.ap_front_settings.config.hasOwnProperty("config_app") &&
        window.ap_front_settings.config.hasOwnProperty("optionset")
      ) {
        var optionsConfigData =
          window.ap_front_settings.config.config_app ?? {};
        optionsConfigData.css =
          window.ap_front_settings.config["config_css"] ?? "";
        optionsConfigData.optionSets =
          window.ap_front_settings.config.optionset;
        if (typeof optionsConfigData.enabled == "string") {
          optionsConfigData.enabled = optionsConfigData.enabled == "true";
        }

        if (optionsConfigData && optionsConfigData.enabled) {
          if (shop_id === "59142209629") {
            var urlConfig = `https://product-options-js.avisplus.io/${shop_id}.js`;
            doesFileExist(urlConfig) &&
              ap_loadScript(urlConfig, function () {
                if (window?.optionsConfig && window?.optionsConfig?.enabled) {
                  optionsConfigData.optionSets = optionsConfig.optionSets;
                  ap_addOptions($, optionsConfigData);
                }
              });
          }
          else ap_addOptions($, optionsConfigData);
        }
      } else {
        var urlConfig = `https://product-options-js.avisplus.io/${shop_id}.js`;
        doesFileExist(urlConfig) &&
          ap_loadScript(urlConfig, function () {
            if (optionsConfig && optionsConfig.enabled) {
              ap_addOptions($, optionsConfig);
            }
          });
      }
    }
  });
"undefined" == typeof window ? this : window,
  (window.ApOptions = window.ApOptions || {});

"undefined" == typeof jQuery ||
  window.ap_front_settings?.shop_id == "9291762" ||
  (3 == parseInt(jQuery.fn.jquery) &&
    parseFloat(jQuery.fn.jquery.replace(/^1\./, "")) < 2.1)
  ? ap_loadScript(window.ap_front_settings.url_jquery, function () {
    (ap_jQuery = jQuery.noConflict(!0)), ap_loadConfig(ap_jQuery);
  })
  : ((ap_jQuery = jQuery), ap_loadConfig(ap_jQuery));
