"use strict";(self.webpackChunkcheckout_web=self.webpackChunkcheckout_web||[]).push([[661],{2045:(e,t,n)=>{var r=n(5895),o=n(9081);class a extends Error{constructor(e,t){super(`GraphQL fetch failed with network failure or prevented the request from completing: ${t.message}. headers: ${JSON.stringify(Object.fromEntries(e.entries()))}`),this.headers=e,this.error=t,this.name="AddressValidatorGraphQLFetchNetworkError"}}class s extends Error{constructor(e,t){super(`GraphQL fetch failed with status: ${e}, response: ${t}`),this.status=e,this.response=t,this.name="AddressValidatorHttpError"}}const i={"Content-Type":"application/json",Accept:"application/json"};let d=function(e){return e.Ac="AC",e.Ad="AD",e.Ae="AE",e.Af="AF",e.Ag="AG",e.Ai="AI",e.Al="AL",e.Am="AM",e.An="AN",e.Ao="AO",e.Ar="AR",e.At="AT",e.Au="AU",e.Aw="AW",e.Ax="AX",e.Az="AZ",e.Ba="BA",e.Bb="BB",e.Bd="BD",e.Be="BE",e.Bf="BF",e.Bg="BG",e.Bh="BH",e.Bi="BI",e.Bj="BJ",e.Bl="BL",e.Bm="BM",e.Bn="BN",e.Bo="BO",e.Bq="BQ",e.Br="BR",e.Bs="BS",e.Bt="BT",e.Bv="BV",e.Bw="BW",e.By="BY",e.Bz="BZ",e.Ca="CA",e.Cc="CC",e.Cd="CD",e.Cf="CF",e.Cg="CG",e.Ch="CH",e.Ci="CI",e.Ck="CK",e.Cl="CL",e.Cm="CM",e.Cn="CN",e.Co="CO",e.Cr="CR",e.Cu="CU",e.Cv="CV",e.Cw="CW",e.Cx="CX",e.Cy="CY",e.Cz="CZ",e.De="DE",e.Dj="DJ",e.Dk="DK",e.Dm="DM",e.Do="DO",e.Dz="DZ",e.Ec="EC",e.Ee="EE",e.Eg="EG",e.Eh="EH",e.Er="ER",e.Es="ES",e.Et="ET",e.Fi="FI",e.Fj="FJ",e.Fk="FK",e.Fo="FO",e.Fr="FR",e.Ga="GA",e.Gb="GB",e.Gd="GD",e.Ge="GE",e.Gf="GF",e.Gg="GG",e.Gh="GH",e.Gi="GI",e.Gl="GL",e.Gm="GM",e.Gn="GN",e.Gp="GP",e.Gq="GQ",e.Gr="GR",e.Gs="GS",e.Gt="GT",e.Gw="GW",e.Gy="GY",e.Hk="HK",e.Hm="HM",e.Hn="HN",e.Hr="HR",e.Ht="HT",e.Hu="HU",e.Id="ID",e.Ie="IE",e.Il="IL",e.Im="IM",e.In="IN",e.Io="IO",e.Iq="IQ",e.Ir="IR",e.Is="IS",e.It="IT",e.Je="JE",e.Jm="JM",e.Jo="JO",e.Jp="JP",e.Ke="KE",e.Kg="KG",e.Kh="KH",e.Ki="KI",e.Km="KM",e.Kn="KN",e.Kp="KP",e.Kr="KR",e.Kw="KW",e.Ky="KY",e.Kz="KZ",e.La="LA",e.Lb="LB",e.Lc="LC",e.Li="LI",e.Lk="LK",e.Lr="LR",e.Ls="LS",e.Lt="LT",e.Lu="LU",e.Lv="LV",e.Ly="LY",e.Ma="MA",e.Mc="MC",e.Md="MD",e.Me="ME",e.Mf="MF",e.Mg="MG",e.Mk="MK",e.Ml="ML",e.Mm="MM",e.Mn="MN",e.Mo="MO",e.Mq="MQ",e.Mr="MR",e.Ms="MS",e.Mt="MT",e.Mu="MU",e.Mv="MV",e.Mw="MW",e.Mx="MX",e.My="MY",e.Mz="MZ",e.Na="NA",e.Nc="NC",e.Ne="NE",e.Nf="NF",e.Ng="NG",e.Ni="NI",e.Nl="NL",e.No="NO",e.Np="NP",e.Nr="NR",e.Nu="NU",e.Nz="NZ",e.Om="OM",e.Pa="PA",e.Pe="PE",e.Pf="PF",e.Pg="PG",e.Ph="PH",e.Pk="PK",e.Pl="PL",e.Pm="PM",e.Pn="PN",e.Ps="PS",e.Pt="PT",e.Py="PY",e.Qa="QA",e.Re="RE",e.Ro="RO",e.Rs="RS",e.Ru="RU",e.Rw="RW",e.Sa="SA",e.Sb="SB",e.Sc="SC",e.Sd="SD",e.Se="SE",e.Sg="SG",e.Sh="SH",e.Si="SI",e.Sj="SJ",e.Sk="SK",e.Sl="SL",e.Sm="SM",e.Sn="SN",e.So="SO",e.Sr="SR",e.Ss="SS",e.St="ST",e.Sv="SV",e.Sx="SX",e.Sy="SY",e.Sz="SZ",e.Ta="TA",e.Tc="TC",e.Td="TD",e.Tf="TF",e.Tg="TG",e.Th="TH",e.Tj="TJ",e.Tk="TK",e.Tl="TL",e.Tm="TM",e.Tn="TN",e.To="TO",e.Tr="TR",e.Tt="TT",e.Tv="TV",e.Tw="TW",e.Tz="TZ",e.Ua="UA",e.Ug="UG",e.Um="UM",e.Us="US",e.Uy="UY",e.Uz="UZ",e.Va="VA",e.Vc="VC",e.Ve="VE",e.Vg="VG",e.Vn="VN",e.Vu="VU",e.Wf="WF",e.Ws="WS",e.Xk="XK",e.Ye="YE",e.Yt="YT",e.Za="ZA",e.Zm="ZM",e.Zw="ZW",e.Zz="ZZ",e}({});const c="https://atlas.shopifysvc.com/graphql",l=(d.At,d.Au,d.Be,d.Br,d.Ca,d.Ch,d.De,d.Dk,d.Es,d.Fr,d.Gb,d.Hk,d.In,d.It,d.Jp,d.Lu,d.Nl,d.No,d.Nz,d.Sa,d.Se,d.Us,d.Sg,d.Ca,d.Us,"elasticsearch"),u="google",p=new Map([["ELASTICSEARCH_AUTOCOMPLETE",l],["GOOGLE_PLACE_AUTOCOMPLETE",u]]);class S extends Error{constructor(...e){super(...e),this.name="AutocompletePredictionError"}}const h=new class{constructor({validationEndpoint:e}){this.validationEndpoint=void 0,this.validationEndpoint=e}async validate({address:e,locale:t,matchingStrategy:n},r={}){const o=new Headers({...i,...r.overrideHeaders}),d=await fetch(this.validationEndpoint,{method:"POST",headers:o,body:JSON.stringify({query:"\nquery validation($address: AddressInput!, $locale: String!, $matchingStrategy: MatchingStrategy) {\n  validation(address: $address, locale: $locale, matchingStrategy: $matchingStrategy) {\n    validationScope\n    locale\n    fields {\n      name\n      value\n    }\n    concerns {\n      fieldNames\n      code\n      type\n      typeLevel\n      suggestionIds\n      message\n    }\n    id\n    suggestions {\n      id\n      address1\n      streetName\n      streetNumber\n      address2\n      line2\n      neighborhood\n      city\n      zip\n      provinceCode\n      province\n      countryCode\n    }\n  }\n}\n",operationName:"validation",variables:{address:e,locale:t,matchingStrategy:n}})}).catch((e=>e));if(d instanceof Error)throw new a(o,d);if(!d.ok)throw new s(d.status,await d.text());const{data:c,errors:l}=await d.json();return{data:c.validation,errors:l}}}({validationEndpoint:c});(0,r.UD)({addEventListener:window.addEventListener.bind(window),removeEventListener:window.removeEventListener.bind(window),postMessage(e,t){window.parent.postMessage(e,"*",t)}},{callable:["search","fetchAddress","validation","fetchCountriesWithPhoneNumberPrefix"]}).expose({search:async(e,t,n)=>{const r={query:e,countryCode:t.countryCode,location:t.location,locale:t.locale,sessionToken:t.requestToken};[l,u].includes(String(n))&&(r.adapterOverride=n);const a=(0,o.tB)(),s=await fetch(c,{method:"POST",headers:{"Content-Type":"application/json","X-Shop-Id":t.shopId,"X-Client-Request-Id":t.sourceId},body:JSON.stringify({query:"\n  query predictions($query: String, $countryCode: AutocompleteSupportedCountry!, $locale: String!, $location: LocationInput, $sessionToken: String!, $adapterOverride: String) {\n    predictions(query: $query, countryCode: $countryCode, locale: $locale, location: $location, sessionToken: $sessionToken, adapterOverride: $adapterOverride) {\n      addressId\n      description\n      completionService\n      matchedSubstrings {\n        length\n        offset\n      }\n    }\n  }\n",variables:r})}),i=(0,o.tB)(),d=await s.json();if(!d.data)throw new S(`No data returned from autocomplete query ${JSON.stringify(d)}`);return{data:d.data.predictions,duration:{start:a,end:i}}},fetchAddress:async(e,t)=>{const n={addressId:e,locale:t.locale,sessionToken:t.requestToken,adapterOverride:p.get(t.completionService),extendedFields:t.extendedFields},r=await fetch(c,{method:"POST",headers:{"Content-Type":"application/json","X-Shop-Id":t.shopId,"X-Client-Request-Id":t.sourceId},body:JSON.stringify({query:"\n  query address($addressId: String!, $locale: String!, $sessionToken: String!, $adapterOverride: String, $extendedFields: Boolean = false) {\n    address(id: $addressId, locale: $locale, sessionToken: $sessionToken, adapterOverride: $adapterOverride, extendedFields: $extendedFields) {\n      address1\n      address2\n      city\n      country\n      countryCode\n      province\n      provinceCode\n      zip\n      latitude\n      longitude\n    }\n  }\n",variables:n})}),{data:{address:o}}=await r.json(),{address1:a,address2:s,city:i,countryCode:d,provinceCode:l,zip:u,latitude:S,longitude:h}=o,C={latitude:S,longitude:h};return{postalCode:u,city:i,address1:a,address2:s,countryCode:d,zoneCode:l,coordinates:C.latitude&&C.longitude?C:void 0}},validation:async(e,t,n,r)=>{const o={"X-Shop-Id":r?.shopId||"","X-Client-Request-Id":r?.sourceId||""};return h.validate({address:e,locale:t,matchingStrategy:n},{overrideHeaders:o})},fetchCountriesWithPhoneNumberPrefix:async(e,t)=>{async function n(e){return fetch(c,{method:"POST",headers:{"Content-Type":"application/json","X-Shop-Id":t?.shopId??"","X-Client-Request-Id":t?.sourceId??""},body:JSON.stringify({query:"\n  query countries($locale: SupportedLocale!) {\n    countries(locale: $locale) {\n      name\n      code\n      phoneNumberPrefix\n    }\n  }\n",variables:{locale:e.replace(/-/,"_").toUpperCase()}})})}try{const t=await n(e),r=await t.json(),{data:o}=r;if(!o)throw new S(`No data returned from fetch countries with phone number prefix query ${JSON.stringify(r)}`);return o.countries}catch{const e=await n("EN_US"),t=await e.json(),{data:r}=t;if(!r)throw new S(`No data returned from fetch countries with phone number prefix query when using the fallback locale ${JSON.stringify(t)}`);return r.countries}}})}},e=>{e.O(0,[895,81],(()=>(2045,e(e.s=2045)))),e.O()}]);